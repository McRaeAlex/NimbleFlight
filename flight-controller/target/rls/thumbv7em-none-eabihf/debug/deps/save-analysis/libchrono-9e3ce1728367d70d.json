{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19","program":"/home/mcrae/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","chrono","/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=9e3ce1728367d70d","-C","extra-filename=-9e3ce1728367d70d","--out-dir","/home/mcrae/Code/hermes/target/rls/thumbv7em-none-eabihf/debug/deps","--target","thumbv7em-none-eabihf","-L","dependency=/home/mcrae/Code/hermes/target/rls/thumbv7em-none-eabihf/debug/deps","-L","dependency=/home/mcrae/Code/hermes/target/rls/debug/deps","--extern","num_integer=/home/mcrae/Code/hermes/target/rls/thumbv7em-none-eabihf/debug/deps/libnum_integer-6c8c65c459764b3e.rmeta","--extern","num_traits=/home/mcrae/Code/hermes/target/rls/thumbv7em-none-eabihf/debug/deps/libnum_traits-de3dd371c51c23fe.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/mcrae/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/mcrae/Code/hermes/target/rls/thumbv7em-none-eabihf/debug/deps/libchrono-9e3ce1728367d70d.rmeta"},"prelude":{"crate_id":{"name":"chrono","disambiguator":[15519957382535013717,10551311302204177973]},"crate_root":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src","external_crates":[{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2184632775997829466,18026496178680965583]}},{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3726307931522043477,4911878782996857177]}},{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[8506066526834043935,2338947288633172727]}},{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","num":4,"id":{"name":"num_integer","disambiguator":[12540189907850407377,7259722394390819361]}},{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","num":5,"id":{"name":"num_traits","disambiguator":[15747110469652692637,13519712096748236156]}}],"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":76,"byte_end":55909,"line_start":4,"line_end":1535,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1339},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22135,"byte_end":22143,"line_start":486,"line_end":486,"column_start":18,"column_end":26},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1629},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22161,"byte_end":22165,"line_start":488,"line_end":488,"column_start":16,"column_end":20},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":734},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22167,"byte_end":22175,"line_start":488,"line_end":488,"column_start":22,"column_end":30},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":733},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22177,"byte_end":22185,"line_start":488,"line_end":488,"column_start":32,"column_end":40},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1660},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22289,"byte_end":22297,"line_start":491,"line_end":491,"column_start":20,"column_end":28},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1636},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22299,"byte_end":22312,"line_start":491,"line_end":491,"column_start":30,"column_end":43},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":871},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22314,"byte_end":22326,"line_start":491,"line_end":491,"column_start":45,"column_end":57},"alias_span":null,"name":"MAX_DATETIME","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":870},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22328,"byte_end":22340,"line_start":491,"line_end":491,"column_start":59,"column_end":71},"alias_span":null,"name":"MIN_DATETIME","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1868},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22439,"byte_end":22449,"line_start":495,"line_end":495,"column_start":18,"column_end":28},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1018},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22451,"byte_end":22462,"line_start":495,"line_end":495,"column_start":30,"column_end":41},"alias_span":null,"name":"ParseResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1584},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22499,"byte_end":22506,"line_start":497,"line_end":497,"column_start":17,"column_end":24},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1441},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22508,"byte_end":22517,"line_start":497,"line_end":497,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1514},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22519,"byte_end":22532,"line_start":497,"line_end":497,"column_start":37,"column_end":50},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1604},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22534,"byte_end":22543,"line_start":497,"line_end":497,"column_start":52,"column_end":61},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1415},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22648,"byte_end":22659,"line_start":502,"line_end":502,"column_start":18,"column_end":29},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1381},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22661,"byte_end":22672,"line_start":502,"line_end":502,"column_start":31,"column_end":42},"alias_span":null,"name":"LocalResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":168},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22674,"byte_end":22680,"line_start":502,"line_end":502,"column_start":44,"column_end":50},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":170},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22682,"byte_end":22690,"line_start":502,"line_end":502,"column_start":52,"column_end":60},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1430},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22692,"byte_end":22695,"line_start":502,"line_end":502,"column_start":62,"column_end":65},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1431},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22692,"byte_end":22695,"line_start":502,"line_end":502,"column_start":62,"column_end":65},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":102}},{"kind":"Use","ref_id":{"krate":0,"index":1269},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22714,"byte_end":22727,"line_start":503,"line_end":503,"column_start":17,"column_end":30},"alias_span":null,"name":"DurationRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1959},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22729,"byte_end":22742,"line_start":503,"line_end":503,"column_start":32,"column_end":45},"alias_span":null,"name":"RoundingError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1261},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22744,"byte_end":22755,"line_start":503,"line_end":503,"column_start":47,"column_end":58},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1629},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22894,"byte_end":22898,"line_start":508,"line_end":508,"column_start":13,"column_end":17},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":1261},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23088,"byte_end":23099,"line_start":516,"line_end":516,"column_start":13,"column_end":24},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":1660},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23136,"byte_end":23144,"line_start":518,"line_end":518,"column_start":14,"column_end":22},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":1636},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23146,"byte_end":23159,"line_start":518,"line_end":518,"column_start":24,"column_end":37},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":1307},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23197,"byte_end":23205,"line_start":520,"line_end":520,"column_start":14,"column_end":22},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":2021},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23207,"byte_end":23212,"line_start":520,"line_end":520,"column_start":24,"column_end":29},"alias_span":null,"name":"Month","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":1326},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23214,"byte_end":23222,"line_start":520,"line_end":520,"column_start":31,"column_end":39},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":1977},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23224,"byte_end":23231,"line_start":520,"line_end":520,"column_start":41,"column_end":48},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":1415},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23269,"byte_end":23280,"line_start":522,"line_end":522,"column_start":14,"column_end":25},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":1430},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23282,"byte_end":23285,"line_start":522,"line_end":522,"column_start":27,"column_end":30},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":1431},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23282,"byte_end":23285,"line_start":522,"line_end":522,"column_start":27,"column_end":30},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":120}},{"kind":"Use","ref_id":{"krate":0,"index":1441},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23323,"byte_end":23332,"line_start":524,"line_end":524,"column_start":14,"column_end":23},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":1514},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23334,"byte_end":23347,"line_start":524,"line_end":524,"column_start":25,"column_end":38},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":1604},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23349,"byte_end":23358,"line_start":524,"line_end":524,"column_start":40,"column_end":49},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":168},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23396,"byte_end":23402,"line_start":526,"line_end":526,"column_start":14,"column_end":20},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":170},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23404,"byte_end":23412,"line_start":526,"line_end":526,"column_start":22,"column_end":30},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":1415},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":102081,"byte_end":102092,"line_start":469,"line_end":469,"column_start":22,"column_end":33},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":1430},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":102167,"byte_end":102170,"line_start":472,"line_end":472,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":135}},{"kind":"Use","ref_id":{"krate":0,"index":1431},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":102167,"byte_end":102170,"line_start":472,"line_end":472,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":278}},{"kind":"Use","ref_id":{"krate":0,"index":1441},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23994,"byte_end":24003,"line_start":554,"line_end":554,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":279}},{"kind":"Use","ref_id":{"krate":0,"index":319},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":24005,"byte_end":24013,"line_start":554,"line_end":554,"column_start":37,"column_end":45},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":279}},{"kind":"Use","ref_id":{"krate":0,"index":318},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":24015,"byte_end":24023,"line_start":554,"line_end":554,"column_start":47,"column_end":55},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":279}},{"kind":"Use","ref_id":{"krate":0,"index":1514},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":24176,"byte_end":24189,"line_start":558,"line_end":558,"column_start":30,"column_end":43},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":279}},{"kind":"Use","ref_id":{"krate":0,"index":450},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":24191,"byte_end":24203,"line_start":558,"line_end":558,"column_start":45,"column_end":57},"alias_span":null,"name":"MAX_DATETIME","value":"","parent":{"krate":0,"index":279}},{"kind":"Use","ref_id":{"krate":0,"index":449},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":24205,"byte_end":24217,"line_start":558,"line_end":558,"column_start":59,"column_end":71},"alias_span":null,"name":"MIN_DATETIME","value":"","parent":{"krate":0,"index":279}},{"kind":"Use","ref_id":{"krate":0,"index":1584},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":24247,"byte_end":24254,"line_start":559,"line_end":559,"column_start":28,"column_end":35},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":279}},{"kind":"Use","ref_id":{"krate":0,"index":1604},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":24280,"byte_end":24289,"line_start":560,"line_end":560,"column_start":25,"column_end":34},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":279}},{"kind":"Use","ref_id":{"krate":0,"index":1134},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":519668,"byte_end":519673,"line_start":42,"line_end":42,"column_start":22,"column_end":27},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":991}},{"kind":"Use","ref_id":{"krate":0,"index":1909},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":519697,"byte_end":519703,"line_start":43,"line_end":43,"column_start":23,"column_end":29},"alias_span":null,"name":"Parsed","value":"","parent":{"krate":0,"index":991}},{"kind":"Use","ref_id":{"krate":0,"index":1940},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":519729,"byte_end":519742,"line_start":44,"line_end":44,"column_start":25,"column_end":38},"alias_span":null,"name":"StrftimeItems","value":"","parent":{"krate":0,"index":991}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":76,"byte_end":55909,"line_start":4,"line_end":1535,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":2132},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":129},{"krate":0,"index":135},{"krate":0,"index":279},{"krate":0,"index":712},{"krate":0,"index":836},{"krate":0,"index":991},{"krate":0,"index":1250},{"krate":0,"index":1977},{"krate":0,"index":2010},{"krate":0,"index":2011},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2006},{"krate":0,"index":2004},{"krate":0,"index":2002},{"krate":0,"index":1999},{"krate":0,"index":1281},{"krate":0,"index":1288},{"krate":0,"index":1290},{"krate":0,"index":1293},{"krate":0,"index":2013},{"krate":0,"index":2019},{"krate":0,"index":2015},{"krate":0,"index":2016},{"krate":0,"index":1294},{"krate":0,"index":2021},{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2066},{"krate":0,"index":2067},{"krate":0,"index":2065},{"krate":0,"index":2063},{"krate":0,"index":2061},{"krate":0,"index":2058},{"krate":0,"index":1296},{"krate":0,"index":1301},{"krate":0,"index":2072},{"krate":0,"index":2078},{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":1305},{"krate":0,"index":1307},{"krate":0,"index":1326},{"krate":0,"index":1337}],"decl_id":null,"docs":" # Chrono: Date and Time for Rust","sig":null,"attributes":[{"value":"/ # Chrono: Date and Time for Rust","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":76,"byte_end":112,"line_start":4,"line_end":4,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":113,"byte_end":116,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ It aims to be a feature-complete superset of","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":117,"byte_end":165,"line_start":6,"line_end":6,"column_start":1,"column_end":49}},{"value":"/ the [time](https://github.com/rust-lang-deprecated/time) library.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":166,"byte_end":235,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ In particular,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":236,"byte_end":254,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":255,"byte_end":258,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ * Chrono strictly adheres to ISO 8601.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":259,"byte_end":301,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/ * Chrono is timezone-aware by default, with separate timezone-naive types.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":302,"byte_end":380,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ * Chrono is space-optimal and (while not being the primary goal) reasonably efficient.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":381,"byte_end":471,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":472,"byte_end":475,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ There were several previous attempts to bring a good date and time library to Rust,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":476,"byte_end":563,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"/ which Chrono builds upon and should acknowledge:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":564,"byte_end":616,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":617,"byte_end":620,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * [Initial research on","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":621,"byte_end":647,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/    the wiki](https://github.com/rust-lang/rust-wiki-backup/blob/master/Lib-datetime.md)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":648,"byte_end":739,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"/ * Dietrich Epp's [datetime-rs](https://github.com/depp/datetime-rs)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":740,"byte_end":811,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/ * Luis de Bethencourt's [rust-datetime](https://github.com/luisbg/rust-datetime)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":812,"byte_end":896,"line_start":20,"line_end":20,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":897,"byte_end":900,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Any significant changes to Chrono are documented in","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":901,"byte_end":956,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/ the [`CHANGELOG.md`](https://github.com/chronotope/chrono/blob/main/CHANGELOG.md) file.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":957,"byte_end":1048,"line_start":23,"line_end":23,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1049,"byte_end":1052,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1053,"byte_end":1065,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1066,"byte_end":1069,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Put this in your `Cargo.toml`:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1070,"byte_end":1104,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1105,"byte_end":1108,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1109,"byte_end":1120,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1121,"byte_end":1139,"line_start":30,"line_end":30,"column_start":1,"column_end":19}},{"value":"/ chrono = \"0.4\"","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1140,"byte_end":1158,"line_start":31,"line_end":31,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1159,"byte_end":1166,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1167,"byte_end":1170,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ### Features","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1171,"byte_end":1187,"line_start":34,"line_end":34,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1188,"byte_end":1191,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Chrono supports various runtime environments and operating systems, and has","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1192,"byte_end":1271,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ several features that may be enabled or disabled.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1272,"byte_end":1325,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1326,"byte_end":1329,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Default features:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1330,"byte_end":1351,"line_start":39,"line_end":39,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1352,"byte_end":1355,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ - `alloc`: Enable features that depend on allocation (primarily string formatting)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1356,"byte_end":1442,"line_start":41,"line_end":41,"column_start":1,"column_end":87}},{"value":"/ - `std`: Enables functionality that depends on the standard library. This","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1443,"byte_end":1520,"line_start":42,"line_end":42,"column_start":1,"column_end":78}},{"value":"/   is a superset of `alloc` and adds interoperation with standard library types","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1521,"byte_end":1603,"line_start":43,"line_end":43,"column_start":1,"column_end":83}},{"value":"/   and traits.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1604,"byte_end":1621,"line_start":44,"line_end":44,"column_start":1,"column_end":18}},{"value":"/ - `clock`: enables reading the system time (`now`), independent of whether","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1622,"byte_end":1700,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/   `std::time::SystemTime` is present, depends on having a libc.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1701,"byte_end":1768,"line_start":46,"line_end":46,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1769,"byte_end":1772,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Optional features:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1773,"byte_end":1795,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1796,"byte_end":1799,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ - `wasmbind`: Enable integration with [wasm-bindgen][] and its `js-sys` project","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1800,"byte_end":1883,"line_start":50,"line_end":50,"column_start":1,"column_end":84}},{"value":"/ - [`serde`][]: Enable serialization/deserialization via serde.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1884,"byte_end":1950,"line_start":51,"line_end":51,"column_start":1,"column_end":67}},{"value":"/ - `unstable-locales`: Enable localization. This adds various methods with a","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":1951,"byte_end":2030,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/   `_localized` suffix. The implementation and API may change or even be","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2031,"byte_end":2106,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/   removed in a patch release. Feedback welcome.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2107,"byte_end":2158,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2159,"byte_end":2162,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ [`serde`]: https://github.com/serde-rs/serde","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2163,"byte_end":2211,"line_start":56,"line_end":56,"column_start":1,"column_end":49}},{"value":"/ [wasm-bindgen]: https://github.com/rustwasm/wasm-bindgen","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2212,"byte_end":2272,"line_start":57,"line_end":57,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2273,"byte_end":2276,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ See the [cargo docs][] for examples of specifying features.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2277,"byte_end":2340,"line_start":59,"line_end":59,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2341,"byte_end":2344,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ [cargo docs]: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choosing-features","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2345,"byte_end":2451,"line_start":61,"line_end":61,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2452,"byte_end":2455,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ ## Overview","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2456,"byte_end":2471,"line_start":63,"line_end":63,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2472,"byte_end":2475,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ### Duration","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2476,"byte_end":2492,"line_start":65,"line_end":65,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2493,"byte_end":2496,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Chrono currently uses its own [`Duration`] type to represent the magnitude","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2497,"byte_end":2575,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/ of a time span. Since this has the same name as the newer, standard type for","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2576,"byte_end":2656,"line_start":68,"line_end":68,"column_start":1,"column_end":81}},{"value":"/ duration, the reference will refer this type as `OldDuration`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2657,"byte_end":2723,"line_start":69,"line_end":69,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2724,"byte_end":2727,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ Note that this is an \"accurate\" duration represented as seconds and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2728,"byte_end":2799,"line_start":71,"line_end":71,"column_start":1,"column_end":72}},{"value":"/ nanoseconds and does not represent \"nominal\" components such as days or","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2800,"byte_end":2875,"line_start":72,"line_end":72,"column_start":1,"column_end":76}},{"value":"/ months.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2876,"byte_end":2887,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2888,"byte_end":2891,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ When the `oldtime` feature is enabled, [`Duration`] is an alias for the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2892,"byte_end":2967,"line_start":75,"line_end":75,"column_start":1,"column_end":76}},{"value":"/ [`time::Duration`](https://docs.rs/time/0.1.40/time/struct.Duration.html)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":2968,"byte_end":3045,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/ type from v0.1 of the time crate. time v0.1 is deprecated, so new code","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3046,"byte_end":3120,"line_start":77,"line_end":77,"column_start":1,"column_end":75}},{"value":"/ should disable the `oldtime` feature and use the `chrono::Duration` type","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3121,"byte_end":3197,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/ instead. The `oldtime` feature is enabled by default for backwards","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3198,"byte_end":3268,"line_start":79,"line_end":79,"column_start":1,"column_end":71}},{"value":"/ compatibility, but future versions of Chrono are likely to remove the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3269,"byte_end":3342,"line_start":80,"line_end":80,"column_start":1,"column_end":74}},{"value":"/ feature entirely.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3343,"byte_end":3364,"line_start":81,"line_end":81,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3365,"byte_end":3368,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ Chrono does not yet natively support","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3369,"byte_end":3409,"line_start":83,"line_end":83,"column_start":1,"column_end":41}},{"value":"/ the standard [`Duration`](https://doc.rust-lang.org/std/time/struct.Duration.html) type,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3410,"byte_end":3502,"line_start":84,"line_end":84,"column_start":1,"column_end":93}},{"value":"/ but it will be supported in the future.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3503,"byte_end":3546,"line_start":85,"line_end":85,"column_start":1,"column_end":44}},{"value":"/ Meanwhile you can convert between two types with","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3547,"byte_end":3599,"line_start":86,"line_end":86,"column_start":1,"column_end":53}},{"value":"/ [`Duration::from_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.from_std)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3600,"byte_end":3697,"line_start":87,"line_end":87,"column_start":1,"column_end":98}},{"value":"/ and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3698,"byte_end":3705,"line_start":88,"line_end":88,"column_start":1,"column_end":8}},{"value":"/ [`Duration::to_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.to_std)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3706,"byte_end":3799,"line_start":89,"line_end":89,"column_start":1,"column_end":94}},{"value":"/ methods.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3800,"byte_end":3812,"line_start":90,"line_end":90,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3813,"byte_end":3816,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ### Date and Time","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3817,"byte_end":3838,"line_start":92,"line_end":92,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3839,"byte_end":3842,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ Chrono provides a","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3843,"byte_end":3864,"line_start":94,"line_end":94,"column_start":1,"column_end":22}},{"value":"/ [**`DateTime`**](./struct.DateTime.html)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3865,"byte_end":3909,"line_start":95,"line_end":95,"column_start":1,"column_end":45}},{"value":"/ type to represent a date and a time in a timezone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3910,"byte_end":3964,"line_start":96,"line_end":96,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3965,"byte_end":3968,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ For more abstract moment-in-time tracking such as internal timekeeping","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":3969,"byte_end":4043,"line_start":98,"line_end":98,"column_start":1,"column_end":75}},{"value":"/ that is unconcerned with timezones, consider","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4044,"byte_end":4092,"line_start":99,"line_end":99,"column_start":1,"column_end":49}},{"value":"/ [`time::SystemTime`](https://doc.rust-lang.org/std/time/struct.SystemTime.html),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4093,"byte_end":4177,"line_start":100,"line_end":100,"column_start":1,"column_end":85}},{"value":"/ which tracks your system clock, or","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4178,"byte_end":4216,"line_start":101,"line_end":101,"column_start":1,"column_end":39}},{"value":"/ [`time::Instant`](https://doc.rust-lang.org/std/time/struct.Instant.html), which","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4217,"byte_end":4301,"line_start":102,"line_end":102,"column_start":1,"column_end":85}},{"value":"/ is an opaque but monotonically-increasing representation of a moment in time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4302,"byte_end":4383,"line_start":103,"line_end":103,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4384,"byte_end":4387,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ `DateTime` is timezone-aware and must be constructed from","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4388,"byte_end":4449,"line_start":105,"line_end":105,"column_start":1,"column_end":62}},{"value":"/ the [**`TimeZone`**](./offset/trait.TimeZone.html) object,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4450,"byte_end":4512,"line_start":106,"line_end":106,"column_start":1,"column_end":63}},{"value":"/ which defines how the local date is converted to and back from the UTC date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4513,"byte_end":4593,"line_start":107,"line_end":107,"column_start":1,"column_end":81}},{"value":"/ There are three well-known `TimeZone` implementations:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4594,"byte_end":4652,"line_start":108,"line_end":108,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4653,"byte_end":4656,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ * [**`Utc`**](./offset/struct.Utc.html) specifies the UTC time zone. It is most efficient.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4657,"byte_end":4751,"line_start":110,"line_end":110,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4752,"byte_end":4755,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ * [**`Local`**](./offset/struct.Local.html) specifies the system local time zone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4756,"byte_end":4841,"line_start":112,"line_end":112,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4842,"byte_end":4845,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ * [**`FixedOffset`**](./offset/struct.FixedOffset.html) specifies","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4846,"byte_end":4915,"line_start":114,"line_end":114,"column_start":1,"column_end":70}},{"value":"/   an arbitrary, fixed time zone such as UTC+09:00 or UTC-10:30.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4916,"byte_end":4983,"line_start":115,"line_end":115,"column_start":1,"column_end":68}},{"value":"/   This often results from the parsed textual date and time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":4984,"byte_end":5047,"line_start":116,"line_end":116,"column_start":1,"column_end":64}},{"value":"/   Since it stores the most information and does not depend on the system environment,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5048,"byte_end":5137,"line_start":117,"line_end":117,"column_start":1,"column_end":90}},{"value":"/   you would want to normalize other `TimeZone`s into this type.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5138,"byte_end":5205,"line_start":118,"line_end":118,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5206,"byte_end":5209,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ `DateTime`s with different `TimeZone` types are distinct and do not mix,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5210,"byte_end":5286,"line_start":120,"line_end":120,"column_start":1,"column_end":77}},{"value":"/ but can be converted to each other using","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5287,"byte_end":5331,"line_start":121,"line_end":121,"column_start":1,"column_end":45}},{"value":"/ the [`DateTime::with_timezone`](./struct.DateTime.html#method.with_timezone) method.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5332,"byte_end":5420,"line_start":122,"line_end":122,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5421,"byte_end":5424,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ You can get the current date and time in the UTC time zone","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5425,"byte_end":5487,"line_start":124,"line_end":124,"column_start":1,"column_end":63}},{"value":"/ ([`Utc::now()`](./offset/struct.Utc.html#method.now))","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5488,"byte_end":5545,"line_start":125,"line_end":125,"column_start":1,"column_end":58}},{"value":"/ or in the local time zone","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5546,"byte_end":5575,"line_start":126,"line_end":126,"column_start":1,"column_end":30}},{"value":"/ ([`Local::now()`](./offset/struct.Local.html#method.now)).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5576,"byte_end":5638,"line_start":127,"line_end":127,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5639,"byte_end":5642,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5643,"byte_end":5654,"line_start":129,"line_end":129,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5655,"byte_end":5682,"line_start":130,"line_end":130,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5683,"byte_end":5686,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ let utc: DateTime<Utc> = Utc::now();       // e.g. `2014-11-28T12:45:59.324310806Z`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5687,"byte_end":5774,"line_start":132,"line_end":132,"column_start":1,"column_end":88}},{"value":"/ let local: DateTime<Local> = Local::now(); // e.g. `2014-11-28T21:45:59.324310806+09:00`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5775,"byte_end":5867,"line_start":133,"line_end":133,"column_start":1,"column_end":93}},{"value":"/ # let _ = utc; let _ = local;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5868,"byte_end":5901,"line_start":134,"line_end":134,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5902,"byte_end":5909,"line_start":135,"line_end":135,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5910,"byte_end":5913,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ Alternatively, you can create your own date and time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5914,"byte_end":5971,"line_start":137,"line_end":137,"column_start":1,"column_end":58}},{"value":"/ This is a bit verbose due to Rust's lack of function and method overloading,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":5972,"byte_end":6052,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/ but in turn we get a rich combination of initialization methods.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6053,"byte_end":6121,"line_start":139,"line_end":139,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6122,"byte_end":6125,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6126,"byte_end":6137,"line_start":141,"line_end":141,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6138,"byte_end":6165,"line_start":142,"line_end":142,"column_start":1,"column_end":28}},{"value":"/ use chrono::offset::LocalResult;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6166,"byte_end":6202,"line_start":143,"line_end":143,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6203,"byte_end":6206,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 7, 8).and_hms(9, 10, 11); // `2014-07-08T09:10:11Z`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6207,"byte_end":6285,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/ // July 8 is 188th day of the year 2014 (`o` for \"ordinal\")","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6286,"byte_end":6349,"line_start":146,"line_end":146,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(dt, Utc.yo(2014, 189).and_hms(9, 10, 11));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6350,"byte_end":6407,"line_start":147,"line_end":147,"column_start":1,"column_end":58}},{"value":"/ // July 8 is Tuesday in ISO week 28 of the year 2014.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6408,"byte_end":6465,"line_start":148,"line_end":148,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(dt, Utc.isoywd(2014, 28, Weekday::Tue).and_hms(9, 10, 11));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6466,"byte_end":6540,"line_start":149,"line_end":149,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6541,"byte_end":6544,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12); // `2014-07-08T09:10:11.012Z`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6545,"byte_end":6637,"line_start":151,"line_end":151,"column_start":1,"column_end":93}},{"value":"/ assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_micro(9, 10, 11, 12_000));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6638,"byte_end":6711,"line_start":152,"line_end":152,"column_start":1,"column_end":74}},{"value":"/ assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_nano(9, 10, 11, 12_000_000));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6712,"byte_end":6788,"line_start":153,"line_end":153,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6789,"byte_end":6792,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ // dynamic verification","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6793,"byte_end":6820,"line_start":155,"line_end":155,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(21, 15, 33),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6821,"byte_end":6884,"line_start":156,"line_end":156,"column_start":1,"column_end":64}},{"value":"/            LocalResult::Single(Utc.ymd(2014, 7, 8).and_hms(21, 15, 33)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6885,"byte_end":6962,"line_start":157,"line_end":157,"column_start":1,"column_end":78}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(80, 15, 33), LocalResult::None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":6963,"byte_end":7046,"line_start":158,"line_end":158,"column_start":1,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 38).and_hms_opt(21, 15, 33), LocalResult::None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7047,"byte_end":7131,"line_start":159,"line_end":159,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7132,"byte_end":7135,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ // other time zone objects can be used to construct a local datetime.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7136,"byte_end":7209,"line_start":161,"line_end":161,"column_start":1,"column_end":74}},{"value":"/ // obviously, `local_dt` is normally different from `dt`, but `fixed_dt` should be identical.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7210,"byte_end":7307,"line_start":162,"line_end":162,"column_start":1,"column_end":98}},{"value":"/ let local_dt = Local.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7308,"byte_end":7378,"line_start":163,"line_end":163,"column_start":1,"column_end":71}},{"value":"/ let fixed_dt = FixedOffset::east(9 * 3600).ymd(2014, 7, 8).and_hms_milli(18, 10, 11, 12);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7379,"byte_end":7472,"line_start":164,"line_end":164,"column_start":1,"column_end":94}},{"value":"/ assert_eq!(dt, fixed_dt);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7473,"byte_end":7502,"line_start":165,"line_end":165,"column_start":1,"column_end":30}},{"value":"/ # let _ = local_dt;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7503,"byte_end":7526,"line_start":166,"line_end":166,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7527,"byte_end":7534,"line_start":167,"line_end":167,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7535,"byte_end":7538,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Various properties are available to the date and time, and can be altered individually.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7539,"byte_end":7630,"line_start":169,"line_end":169,"column_start":1,"column_end":92}},{"value":"/ Most of them are defined in the traits [`Datelike`](./trait.Datelike.html) and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7631,"byte_end":7713,"line_start":170,"line_end":170,"column_start":1,"column_end":83}},{"value":"/ [`Timelike`](./trait.Timelike.html) which you should `use` before.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7714,"byte_end":7784,"line_start":171,"line_end":171,"column_start":1,"column_end":71}},{"value":"/ Addition and subtraction is also supported.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7785,"byte_end":7832,"line_start":172,"line_end":172,"column_start":1,"column_end":48}},{"value":"/ The following illustrates most supported operations to the date and time:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7833,"byte_end":7910,"line_start":173,"line_end":173,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7911,"byte_end":7914,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7915,"byte_end":7926,"line_start":175,"line_end":175,"column_start":1,"column_end":12}},{"value":"/ # extern crate chrono;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7927,"byte_end":7953,"line_start":176,"line_end":176,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7954,"byte_end":7957,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7958,"byte_end":7975,"line_start":178,"line_end":178,"column_start":1,"column_end":18}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":7976,"byte_end":8003,"line_start":179,"line_end":179,"column_start":1,"column_end":28}},{"value":"/ use chrono::Duration;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8004,"byte_end":8029,"line_start":180,"line_end":180,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8030,"byte_end":8033,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ // assume this returned `2014-11-28T21:45:59.324310806+09:00`:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8034,"byte_end":8100,"line_start":182,"line_end":182,"column_start":1,"column_end":67}},{"value":"/ let dt = FixedOffset::east(9*3600).ymd(2014, 11, 28).and_hms_nano(21, 45, 59, 324310806);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8101,"byte_end":8194,"line_start":183,"line_end":183,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8195,"byte_end":8198,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ // property accessors","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8199,"byte_end":8224,"line_start":185,"line_end":185,"column_start":1,"column_end":26}},{"value":"/ assert_eq!((dt.year(), dt.month(), dt.day()), (2014, 11, 28));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8225,"byte_end":8291,"line_start":186,"line_end":186,"column_start":1,"column_end":67}},{"value":"/ assert_eq!((dt.month0(), dt.day0()), (10, 27)); // for unfortunate souls","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8292,"byte_end":8368,"line_start":187,"line_end":187,"column_start":1,"column_end":77}},{"value":"/ assert_eq!((dt.hour(), dt.minute(), dt.second()), (21, 45, 59));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8369,"byte_end":8437,"line_start":188,"line_end":188,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8438,"byte_end":8481,"line_start":189,"line_end":189,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.weekday().number_from_monday(), 5); // Mon=1, ..., Sun=7","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8482,"byte_end":8556,"line_start":190,"line_end":190,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(dt.ordinal(), 332); // the day of year","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8557,"byte_end":8610,"line_start":191,"line_end":191,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(dt.num_days_from_ce(), 735565); // the number of days from and including Jan 1, 1","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8611,"byte_end":8707,"line_start":192,"line_end":192,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8708,"byte_end":8711,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ // time zone accessor and manipulation","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8712,"byte_end":8754,"line_start":194,"line_end":194,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(dt.offset().fix().local_minus_utc(), 9 * 3600);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8755,"byte_end":8817,"line_start":195,"line_end":195,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(dt.timezone(), FixedOffset::east(9 * 3600));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8818,"byte_end":8877,"line_start":196,"line_end":196,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(dt.with_timezone(&Utc), Utc.ymd(2014, 11, 28).and_hms_nano(12, 45, 59, 324310806));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8878,"byte_end":8976,"line_start":197,"line_end":197,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8977,"byte_end":8980,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ // a sample of property manipulations (validates dynamically)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":8981,"byte_end":9046,"line_start":199,"line_end":199,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(dt.with_day(29).unwrap().weekday(), Weekday::Sat); // 2014-11-29 is Saturday","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9047,"byte_end":9138,"line_start":200,"line_end":200,"column_start":1,"column_end":92}},{"value":"/ assert_eq!(dt.with_day(32), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9139,"byte_end":9177,"line_start":201,"line_end":201,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(dt.with_year(-300).unwrap().num_days_from_ce(), -109606); // November 29, 301 BCE","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9178,"byte_end":9274,"line_start":202,"line_end":202,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9275,"byte_end":9278,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ // arithmetic operations","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9279,"byte_end":9307,"line_start":204,"line_end":204,"column_start":1,"column_end":29}},{"value":"/ let dt1 = Utc.ymd(2014, 11, 14).and_hms(8, 9, 10);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9308,"byte_end":9362,"line_start":205,"line_end":205,"column_start":1,"column_end":55}},{"value":"/ let dt2 = Utc.ymd(2014, 11, 14).and_hms(10, 9, 8);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9363,"byte_end":9417,"line_start":206,"line_end":206,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(dt1.signed_duration_since(dt2), Duration::seconds(-2 * 3600 + 2));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9418,"byte_end":9499,"line_start":207,"line_end":207,"column_start":1,"column_end":82}},{"value":"/ assert_eq!(dt2.signed_duration_since(dt1), Duration::seconds(2 * 3600 - 2));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9500,"byte_end":9580,"line_start":208,"line_end":208,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) + Duration::seconds(1_000_000_000),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9581,"byte_end":9668,"line_start":209,"line_end":209,"column_start":1,"column_end":88}},{"value":"/            Utc.ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9669,"byte_end":9724,"line_start":210,"line_end":210,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) - Duration::seconds(1_000_000_000),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9725,"byte_end":9812,"line_start":211,"line_end":211,"column_start":1,"column_end":88}},{"value":"/            Utc.ymd(1938, 4, 24).and_hms(22, 13, 20));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9813,"byte_end":9870,"line_start":212,"line_end":212,"column_start":1,"column_end":58}},{"value":"/ # }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9871,"byte_end":9878,"line_start":213,"line_end":213,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9879,"byte_end":9886,"line_start":214,"line_end":214,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9887,"byte_end":9890,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ ### Formatting and Parsing","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9891,"byte_end":9921,"line_start":216,"line_end":216,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9922,"byte_end":9925,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ Formatting is done via the [`format`](./struct.DateTime.html#method.format) method,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":9926,"byte_end":10013,"line_start":218,"line_end":218,"column_start":1,"column_end":88}},{"value":"/ which format is equivalent to the familiar `strftime` format.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10014,"byte_end":10079,"line_start":219,"line_end":219,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10080,"byte_end":10083,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10084,"byte_end":10153,"line_start":221,"line_end":221,"column_start":1,"column_end":70}},{"value":"/ documentation for full syntax and list of specifiers.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10154,"byte_end":10211,"line_start":222,"line_end":222,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10212,"byte_end":10215,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ The default `to_string` method and `{:?}` specifier also give a reasonable representation.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10216,"byte_end":10310,"line_start":224,"line_end":224,"column_start":1,"column_end":95}},{"value":"/ Chrono also provides [`to_rfc2822`](./struct.DateTime.html#method.to_rfc2822) and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10311,"byte_end":10396,"line_start":225,"line_end":225,"column_start":1,"column_end":86}},{"value":"/ [`to_rfc3339`](./struct.DateTime.html#method.to_rfc3339) methods","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10397,"byte_end":10465,"line_start":226,"line_end":226,"column_start":1,"column_end":69}},{"value":"/ for well-known formats.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10466,"byte_end":10493,"line_start":227,"line_end":227,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10494,"byte_end":10497,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ Chrono now also provides date formatting in almost any language without the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10498,"byte_end":10577,"line_start":229,"line_end":229,"column_start":1,"column_end":80}},{"value":"/ help of an additional C library. This functionality is under the feature","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10578,"byte_end":10654,"line_start":230,"line_end":230,"column_start":1,"column_end":77}},{"value":"/ `unstable-locales`:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10655,"byte_end":10678,"line_start":231,"line_end":231,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10679,"byte_end":10682,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10683,"byte_end":10694,"line_start":233,"line_end":233,"column_start":1,"column_end":12}},{"value":"/ chrono { version = \"0.4\", features = [\"unstable-locales\"]","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10695,"byte_end":10756,"line_start":234,"line_end":234,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10757,"byte_end":10764,"line_start":235,"line_end":235,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10765,"byte_end":10768,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ The `unstable-locales` feature requires and implies at least the `alloc` feature.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10769,"byte_end":10854,"line_start":237,"line_end":237,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10855,"byte_end":10858,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10859,"byte_end":10870,"line_start":239,"line_end":239,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10871,"byte_end":10898,"line_start":240,"line_end":240,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10899,"byte_end":10902,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10903,"byte_end":10956,"line_start":242,"line_end":242,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2014-11-28 12:00:09\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":10957,"byte_end":11039,"line_start":243,"line_end":243,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), \"Fri Nov 28 12:00:09 2014\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11040,"byte_end":11124,"line_start":244,"line_end":244,"column_start":1,"column_end":85}},{"value":"/ assert_eq!(dt.format_localized(\"%A %e %B %Y, %T\", Locale::fr_BE).to_string(), \"vendredi 28 novembre 2014, 12:00:09\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11125,"byte_end":11246,"line_start":245,"line_end":245,"column_start":1,"column_end":122}},{"value":"/ assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), dt.format(\"%c\").to_string());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11247,"byte_end":11332,"line_start":246,"line_end":246,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11333,"byte_end":11336,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.to_string(), \"2014-11-28 12:00:09 UTC\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11337,"byte_end":11395,"line_start":248,"line_end":248,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(dt.to_rfc2822(), \"Fri, 28 Nov 2014 12:00:09 +0000\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11396,"byte_end":11463,"line_start":249,"line_end":249,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(dt.to_rfc3339(), \"2014-11-28T12:00:09+00:00\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11464,"byte_end":11525,"line_start":250,"line_end":250,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2014-11-28T12:00:09Z\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11526,"byte_end":11586,"line_start":251,"line_end":251,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11587,"byte_end":11590,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ // Note that milli/nanoseconds are only printed if they are non-zero","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11591,"byte_end":11663,"line_start":253,"line_end":253,"column_start":1,"column_end":73}},{"value":"/ let dt_nano = Utc.ymd(2014, 11, 28).and_hms_nano(12, 0, 9, 1);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11664,"byte_end":11730,"line_start":254,"line_end":254,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt_nano), \"2014-11-28T12:00:09.000000001Z\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11731,"byte_end":11806,"line_start":255,"line_end":255,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11807,"byte_end":11814,"line_start":256,"line_end":256,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11815,"byte_end":11818,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ Parsing can be done with three methods:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11819,"byte_end":11862,"line_start":258,"line_end":258,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11863,"byte_end":11866,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ 1. The standard [`FromStr`](https://doc.rust-lang.org/std/str/trait.FromStr.html) trait","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11867,"byte_end":11958,"line_start":260,"line_end":260,"column_start":1,"column_end":92}},{"value":"/    (and [`parse`](https://doc.rust-lang.org/std/primitive.str.html#method.parse) method","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":11959,"byte_end":12050,"line_start":261,"line_end":261,"column_start":1,"column_end":92}},{"value":"/    on a string) can be used for parsing `DateTime<FixedOffset>`, `DateTime<Utc>` and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":12051,"byte_end":12139,"line_start":262,"line_end":262,"column_start":1,"column_end":89}},{"value":"/    `DateTime<Local>` values. This parses what the `{:?}`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":12140,"byte_end":12200,"line_start":263,"line_end":263,"column_start":1,"column_end":61}},{"value":"/    ([`std::fmt::Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html))","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":12201,"byte_end":12281,"line_start":264,"line_end":264,"column_start":1,"column_end":81}},{"value":"/    format specifier prints, and requires the offset to be present.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":12282,"byte_end":12352,"line_start":265,"line_end":265,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":12353,"byte_end":12356,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ 2. [`DateTime::parse_from_str`](./struct.DateTime.html#method.parse_from_str) parses","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":12357,"byte_end":12445,"line_start":267,"line_end":267,"column_start":1,"column_end":89}},{"value":"/    a date and time with offsets and returns `DateTime<FixedOffset>`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":12446,"byte_end":12518,"line_start":268,"line_end":268,"column_start":1,"column_end":73}},{"value":"/    This should be used when the offset is a part of input and the caller cannot guess that.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":12519,"byte_end":12614,"line_start":269,"line_end":269,"column_start":1,"column_end":96}},{"value":"/    It *cannot* be used when the offset can be missing.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":12615,"byte_end":12673,"line_start":270,"line_end":270,"column_start":1,"column_end":59}},{"value":"/    [`DateTime::parse_from_rfc2822`](./struct.DateTime.html#method.parse_from_rfc2822)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":12674,"byte_end":12763,"line_start":271,"line_end":271,"column_start":1,"column_end":90}},{"value":"/    and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":12764,"byte_end":12774,"line_start":272,"line_end":272,"column_start":1,"column_end":11}},{"value":"/    [`DateTime::parse_from_rfc3339`](./struct.DateTime.html#method.parse_from_rfc3339)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":12775,"byte_end":12864,"line_start":273,"line_end":273,"column_start":1,"column_end":90}},{"value":"/    are similar but for well-known formats.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":12865,"byte_end":12911,"line_start":274,"line_end":274,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":12912,"byte_end":12915,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ 3. [`Offset::datetime_from_str`](./offset/trait.TimeZone.html#method.datetime_from_str) is","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":12916,"byte_end":13010,"line_start":276,"line_end":276,"column_start":1,"column_end":95}},{"value":"/    similar but returns `DateTime` of given offset.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13011,"byte_end":13065,"line_start":277,"line_end":277,"column_start":1,"column_end":55}},{"value":"/    When the explicit offset is missing from the input, it simply uses given offset.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13066,"byte_end":13153,"line_start":278,"line_end":278,"column_start":1,"column_end":88}},{"value":"/    It issues an error when the input contains an explicit offset different","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13154,"byte_end":13232,"line_start":279,"line_end":279,"column_start":1,"column_end":79}},{"value":"/    from the current offset.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13233,"byte_end":13264,"line_start":280,"line_end":280,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13265,"byte_end":13268,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ More detailed control over the parsing process is available via","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13269,"byte_end":13336,"line_start":282,"line_end":282,"column_start":1,"column_end":68}},{"value":"/ [`format`](./format/index.html) module.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13337,"byte_end":13380,"line_start":283,"line_end":283,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13381,"byte_end":13384,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13385,"byte_end":13396,"line_start":285,"line_end":285,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13397,"byte_end":13424,"line_start":286,"line_end":286,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13425,"byte_end":13428,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13429,"byte_end":13482,"line_start":288,"line_end":288,"column_start":1,"column_end":54}},{"value":"/ let fixed_dt = dt.with_timezone(&FixedOffset::east(9*3600));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13483,"byte_end":13547,"line_start":289,"line_end":289,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13548,"byte_end":13551,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ // method 1","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13552,"byte_end":13567,"line_start":291,"line_end":291,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(\"2014-11-28T12:00:09Z\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13568,"byte_end":13648,"line_start":292,"line_end":292,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13649,"byte_end":13734,"line_start":293,"line_end":293,"column_start":1,"column_end":86}},{"value":"/ assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<FixedOffset>>(), Ok(fixed_dt.clone()));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13735,"byte_end":13834,"line_start":294,"line_end":294,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13835,"byte_end":13838,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ // method 2","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13839,"byte_end":13854,"line_start":296,"line_end":296,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(DateTime::parse_from_str(\"2014-11-28 21:00:09 +09:00\", \"%Y-%m-%d %H:%M:%S %z\"),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13855,"byte_end":13949,"line_start":297,"line_end":297,"column_start":1,"column_end":95}},{"value":"/            Ok(fixed_dt.clone()));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13950,"byte_end":13987,"line_start":298,"line_end":298,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(DateTime::parse_from_rfc2822(\"Fri, 28 Nov 2014 21:00:09 +0900\"),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":13988,"byte_end":14067,"line_start":299,"line_end":299,"column_start":1,"column_end":80}},{"value":"/            Ok(fixed_dt.clone()));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14068,"byte_end":14105,"line_start":300,"line_end":300,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2014-11-28T21:00:09+09:00\"), Ok(fixed_dt.clone()));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14106,"byte_end":14202,"line_start":301,"line_end":301,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14203,"byte_end":14206,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ // method 3","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14207,"byte_end":14222,"line_start":303,"line_end":303,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(Utc.datetime_from_str(\"2014-11-28 12:00:09\", \"%Y-%m-%d %H:%M:%S\"), Ok(dt.clone()));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14223,"byte_end":14321,"line_start":304,"line_end":304,"column_start":1,"column_end":99}},{"value":"/ assert_eq!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\"), Ok(dt.clone()));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14322,"byte_end":14422,"line_start":305,"line_end":305,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14423,"byte_end":14426,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ // oops, the year is missing!","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14427,"byte_end":14460,"line_start":307,"line_end":307,"column_start":1,"column_end":34}},{"value":"/ assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14461,"byte_end":14546,"line_start":308,"line_end":308,"column_start":1,"column_end":86}},{"value":"/ // oops, the format string does not include the year at all!","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14547,"byte_end":14611,"line_start":309,"line_end":309,"column_start":1,"column_end":65}},{"value":"/ assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T\").is_err());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14612,"byte_end":14694,"line_start":310,"line_end":310,"column_start":1,"column_end":83}},{"value":"/ // oops, the weekday is incorrect!","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14695,"byte_end":14733,"line_start":311,"line_end":311,"column_start":1,"column_end":39}},{"value":"/ assert!(Utc.datetime_from_str(\"Sat Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14734,"byte_end":14824,"line_start":312,"line_end":312,"column_start":1,"column_end":91}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14825,"byte_end":14832,"line_start":313,"line_end":313,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14833,"byte_end":14836,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ Again : See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14837,"byte_end":14914,"line_start":315,"line_end":315,"column_start":1,"column_end":78}},{"value":"/ documentation for full syntax and list of specifiers.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14915,"byte_end":14972,"line_start":316,"line_end":316,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14973,"byte_end":14976,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ ### Conversion from and to EPOCH timestamps","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":14977,"byte_end":15024,"line_start":318,"line_end":318,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15025,"byte_end":15028,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ Use [`Utc.timestamp(seconds, nanoseconds)`](./offset/trait.TimeZone.html#method.timestamp)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15029,"byte_end":15123,"line_start":320,"line_end":320,"column_start":1,"column_end":95}},{"value":"/ to construct a [`DateTime<Utc>`](./struct.DateTime.html) from a UNIX timestamp","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15124,"byte_end":15206,"line_start":321,"line_end":321,"column_start":1,"column_end":83}},{"value":"/ (seconds, nanoseconds that passed since January 1st 1970).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15207,"byte_end":15269,"line_start":322,"line_end":322,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15270,"byte_end":15273,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ Use [`DateTime.timestamp`](./struct.DateTime.html#method.timestamp) to get the timestamp (in seconds)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15274,"byte_end":15379,"line_start":324,"line_end":324,"column_start":1,"column_end":106}},{"value":"/ from a [`DateTime`](./struct.DateTime.html). Additionally, you can use","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15380,"byte_end":15454,"line_start":325,"line_end":325,"column_start":1,"column_end":75}},{"value":"/ [`DateTime.timestamp_subsec_nanos`](./struct.DateTime.html#method.timestamp_subsec_nanos)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15455,"byte_end":15548,"line_start":326,"line_end":326,"column_start":1,"column_end":94}},{"value":"/ to get the number of additional number of nanoseconds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15549,"byte_end":15607,"line_start":327,"line_end":327,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15608,"byte_end":15611,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15612,"byte_end":15623,"line_start":329,"line_end":329,"column_start":1,"column_end":12}},{"value":"/ // We need the trait in scope to use Utc::timestamp().","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15624,"byte_end":15682,"line_start":330,"line_end":330,"column_start":1,"column_end":59}},{"value":"/ use chrono::{DateTime, TimeZone, Utc};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15683,"byte_end":15725,"line_start":331,"line_end":331,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15726,"byte_end":15729,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ // Construct a datetime from epoch:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15730,"byte_end":15769,"line_start":333,"line_end":333,"column_start":1,"column_end":40}},{"value":"/ let dt = Utc.timestamp(1_500_000_000, 0);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15770,"byte_end":15815,"line_start":334,"line_end":334,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(dt.to_rfc2822(), \"Fri, 14 Jul 2017 02:40:00 +0000\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15816,"byte_end":15883,"line_start":335,"line_end":335,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15884,"byte_end":15887,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ // Get epoch value from a datetime:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15888,"byte_end":15927,"line_start":337,"line_end":337,"column_start":1,"column_end":40}},{"value":"/ let dt = DateTime::parse_from_rfc2822(\"Fri, 14 Jul 2017 02:40:00 +0000\").unwrap();","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":15928,"byte_end":16014,"line_start":338,"line_end":338,"column_start":1,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp(), 1_500_000_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16015,"byte_end":16061,"line_start":339,"line_end":339,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16062,"byte_end":16069,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16070,"byte_end":16073,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ ### Individual date","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16074,"byte_end":16097,"line_start":342,"line_end":342,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16098,"byte_end":16101,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ Chrono also provides an individual date type ([**`Date`**](./struct.Date.html)).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16102,"byte_end":16186,"line_start":344,"line_end":344,"column_start":1,"column_end":85}},{"value":"/ It also has time zones attached, and have to be constructed via time zones.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16187,"byte_end":16266,"line_start":345,"line_end":345,"column_start":1,"column_end":80}},{"value":"/ Most operations available to `DateTime` are also available to `Date` whenever appropriate.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16267,"byte_end":16361,"line_start":346,"line_end":346,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16362,"byte_end":16365,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16366,"byte_end":16377,"line_start":348,"line_end":348,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16378,"byte_end":16405,"line_start":349,"line_end":349,"column_start":1,"column_end":28}},{"value":"/ use chrono::offset::LocalResult;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16406,"byte_end":16442,"line_start":350,"line_end":350,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16443,"byte_end":16446,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ # // these *may* fail, but only very rarely. just rerun the test if you were that unfortunate ;)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16447,"byte_end":16547,"line_start":352,"line_end":352,"column_start":1,"column_end":101}},{"value":"/ assert_eq!(Utc::today(), Utc::now().date());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16548,"byte_end":16596,"line_start":353,"line_end":353,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(Local::today(), Local::now().date());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16597,"byte_end":16649,"line_start":354,"line_end":354,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16650,"byte_end":16653,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.ymd(2014, 11, 28).weekday(), Weekday::Fri);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16654,"byte_end":16716,"line_start":356,"line_end":356,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 11, 31), LocalResult::None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16717,"byte_end":16778,"line_start":357,"line_end":357,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(Utc.ymd(2014, 11, 28).and_hms_milli(7, 8, 9, 10).format(\"%H%M%S\").to_string(),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16779,"byte_end":16872,"line_start":358,"line_end":358,"column_start":1,"column_end":94}},{"value":"/            \"070809\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16873,"byte_end":16898,"line_start":359,"line_end":359,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16899,"byte_end":16906,"line_start":360,"line_end":360,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16907,"byte_end":16910,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ There is no timezone-aware `Time` due to the lack of usefulness and also the complexity.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":16911,"byte_end":17003,"line_start":362,"line_end":362,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17004,"byte_end":17007,"line_start":363,"line_end":363,"column_start":1,"column_end":4}},{"value":"/ `DateTime` has [`date`](./struct.DateTime.html#method.date) method","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17008,"byte_end":17078,"line_start":364,"line_end":364,"column_start":1,"column_end":71}},{"value":"/ which returns a `Date` which represents its date component.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17079,"byte_end":17142,"line_start":365,"line_end":365,"column_start":1,"column_end":64}},{"value":"/ There is also a [`time`](./struct.DateTime.html#method.time) method,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17143,"byte_end":17215,"line_start":366,"line_end":366,"column_start":1,"column_end":73}},{"value":"/ which simply returns a naive local time described below.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17216,"byte_end":17276,"line_start":367,"line_end":367,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17277,"byte_end":17280,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ ### Naive date and time","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17281,"byte_end":17308,"line_start":369,"line_end":369,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17309,"byte_end":17312,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ Chrono provides naive counterparts to `Date`, (non-existent) `Time` and `DateTime`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17313,"byte_end":17399,"line_start":371,"line_end":371,"column_start":1,"column_end":87}},{"value":"/ as [**`NaiveDate`**](./naive/struct.NaiveDate.html),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17400,"byte_end":17456,"line_start":372,"line_end":372,"column_start":1,"column_end":57}},{"value":"/ [**`NaiveTime`**](./naive/struct.NaiveTime.html) and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17457,"byte_end":17513,"line_start":373,"line_end":373,"column_start":1,"column_end":57}},{"value":"/ [**`NaiveDateTime`**](./naive/struct.NaiveDateTime.html) respectively.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17514,"byte_end":17588,"line_start":374,"line_end":374,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17589,"byte_end":17592,"line_start":375,"line_end":375,"column_start":1,"column_end":4}},{"value":"/ They have almost equivalent interfaces as their timezone-aware twins,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17593,"byte_end":17666,"line_start":376,"line_end":376,"column_start":1,"column_end":74}},{"value":"/ but are not associated to time zones obviously and can be quite low-level.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17667,"byte_end":17745,"line_start":377,"line_end":377,"column_start":1,"column_end":79}},{"value":"/ They are mostly useful for building blocks for higher-level types.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17746,"byte_end":17816,"line_start":378,"line_end":378,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17817,"byte_end":17820,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"/ Timezone-aware `DateTime` and `Date` types have two methods returning naive versions:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17821,"byte_end":17910,"line_start":380,"line_end":380,"column_start":1,"column_end":90}},{"value":"/ [`naive_local`](./struct.DateTime.html#method.naive_local) returns","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17911,"byte_end":17981,"line_start":381,"line_end":381,"column_start":1,"column_end":71}},{"value":"/ a view to the naive local time,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":17982,"byte_end":18017,"line_start":382,"line_end":382,"column_start":1,"column_end":36}},{"value":"/ and [`naive_utc`](./struct.DateTime.html#method.naive_utc) returns","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18018,"byte_end":18088,"line_start":383,"line_end":383,"column_start":1,"column_end":71}},{"value":"/ a view to the naive UTC time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18089,"byte_end":18122,"line_start":384,"line_end":384,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18123,"byte_end":18126,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ ## Limitations","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18127,"byte_end":18145,"line_start":386,"line_end":386,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18146,"byte_end":18149,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ Only proleptic Gregorian calendar (i.e. extended to support older dates) is supported.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18150,"byte_end":18240,"line_start":388,"line_end":388,"column_start":1,"column_end":91}},{"value":"/ Be very careful if you really have to deal with pre-20C dates, they can be in Julian or others.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18241,"byte_end":18340,"line_start":389,"line_end":389,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18341,"byte_end":18344,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ Date types are limited in about +/- 262,000 years from the common epoch.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18345,"byte_end":18421,"line_start":391,"line_end":391,"column_start":1,"column_end":77}},{"value":"/ Time types are limited in the nanosecond accuracy.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18422,"byte_end":18476,"line_start":392,"line_end":392,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18477,"byte_end":18480,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ [Leap seconds are supported in the representation but","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18481,"byte_end":18538,"line_start":394,"line_end":394,"column_start":1,"column_end":58}},{"value":"/ Chrono doesn't try to make use of them](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18539,"byte_end":18635,"line_start":395,"line_end":395,"column_start":1,"column_end":97}},{"value":"/ (The main reason is that leap seconds are not really predictable.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18636,"byte_end":18706,"line_start":396,"line_end":396,"column_start":1,"column_end":71}},{"value":"/ Almost *every* operation over the possible leap seconds will ignore them.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18707,"byte_end":18784,"line_start":397,"line_end":397,"column_start":1,"column_end":78}},{"value":"/ Consider using `NaiveDateTime` with the implicit TAI (International Atomic Time) scale","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18785,"byte_end":18875,"line_start":398,"line_end":398,"column_start":1,"column_end":91}},{"value":"/ if you want.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18876,"byte_end":18892,"line_start":399,"line_end":399,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18893,"byte_end":18896,"line_start":400,"line_end":400,"column_start":1,"column_end":4}},{"value":"/ Chrono inherently does not support an inaccurate or partial date and time representation.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18897,"byte_end":18990,"line_start":401,"line_end":401,"column_start":1,"column_end":94}},{"value":"/ Any operation that can be ambiguous will return `None` in such cases.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":18991,"byte_end":19064,"line_start":402,"line_end":402,"column_start":1,"column_end":74}},{"value":"/ For example, \"a month later\" of 2014-01-30 is not well-defined","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":19065,"byte_end":19131,"line_start":403,"line_end":403,"column_start":1,"column_end":67}},{"value":"/ and consequently `Utc.ymd(2014, 1, 30).with_month(2)` returns `None`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":19132,"byte_end":19205,"line_start":404,"line_end":404,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":19206,"byte_end":19209,"line_start":405,"line_end":405,"column_start":1,"column_end":4}},{"value":"/ Non ISO week handling is not yet supported.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":19210,"byte_end":19257,"line_start":406,"line_end":406,"column_start":1,"column_end":48}},{"value":"/ For now you can use the [chrono_ext](https://crates.io/crates/chrono_ext)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":19258,"byte_end":19335,"line_start":407,"line_end":407,"column_start":1,"column_end":78}},{"value":"/ crate ([sources](https://github.com/bcourtine/chrono-ext/)).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":19336,"byte_end":19400,"line_start":408,"line_end":408,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":19401,"byte_end":19404,"line_start":409,"line_end":409,"column_start":1,"column_end":4}},{"value":"/ Advanced time zone handling is not yet supported.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":19405,"byte_end":19458,"line_start":410,"line_end":410,"column_start":1,"column_end":54}},{"value":"/ For now you can try the [Chrono-tz](https://github.com/chronotope/chrono-tz/) crate instead.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":19459,"byte_end":19555,"line_start":411,"line_end":411,"column_start":1,"column_end":97}},{"value":"deny(missing_docs)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":19704,"byte_end":19726,"line_start":415,"line_end":415,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":19727,"byte_end":19766,"line_start":416,"line_end":416,"column_start":1,"column_end":40}},{"value":"deny(dead_code)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":19767,"byte_end":19786,"line_start":417,"line_end":417,"column_start":1,"column_end":20}},{"value":"allow(unknown_lints)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":19836,"byte_end":19860,"line_start":419,"line_end":419,"column_start":1,"column_end":25}},{"value":"no_std","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":19906,"byte_end":19912,"line_start":420,"line_end":420,"column_start":46,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":1339},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":57645,"byte_end":57653,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"Duration","qualname":"::oldtime::Duration","value":"Duration {  }","parent":null,"children":[{"krate":0,"index":1340},{"krate":0,"index":1341}],"decl_id":null,"docs":" ISO 8601 time duration with nanosecond precision.\n This also allows for the negative duration; see individual methods for details.\n","sig":null,"attributes":[{"value":"/ ISO 8601 time duration with nanosecond precision.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":57434,"byte_end":57487,"line_start":47,"line_end":47,"column_start":1,"column_end":54}},{"value":"/ This also allows for the negative duration; see individual methods for details.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":57488,"byte_end":57571,"line_start":48,"line_end":48,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":58398,"byte_end":58403,"line_start":72,"line_end":72,"column_start":12,"column_end":17},"name":"weeks","qualname":"<Duration>::weeks","value":"pub fn weeks(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of weeks.\n Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\n Panics when the duration is out of bounds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of weeks.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":58177,"byte_end":58231,"line_start":68,"line_end":68,"column_start":5,"column_end":59}},{"value":"/ Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":58236,"byte_end":58321,"line_start":69,"line_end":69,"column_start":5,"column_end":90}},{"value":"/ Panics when the duration is out of bounds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":58326,"byte_end":58372,"line_start":70,"line_end":70,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":58377,"byte_end":58386,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":58781,"byte_end":58785,"line_start":81,"line_end":81,"column_start":12,"column_end":16},"name":"days","qualname":"<Duration>::days","value":"pub fn days(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of days.\n Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\n Panics when the duration is out of bounds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of days.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":58566,"byte_end":58619,"line_start":77,"line_end":77,"column_start":5,"column_end":58}},{"value":"/ Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":58624,"byte_end":58704,"line_start":78,"line_end":78,"column_start":5,"column_end":85}},{"value":"/ Panics when the duration is out of bounds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":58709,"byte_end":58755,"line_start":79,"line_end":79,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":58760,"byte_end":58769,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":59156,"byte_end":59161,"line_start":90,"line_end":90,"column_start":12,"column_end":17},"name":"hours","qualname":"<Duration>::hours","value":"pub fn hours(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of hours.\n Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\n Panics when the duration is out of bounds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of hours.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":58944,"byte_end":58998,"line_start":86,"line_end":86,"column_start":5,"column_end":59}},{"value":"/ Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":59003,"byte_end":59079,"line_start":87,"line_end":87,"column_start":5,"column_end":81}},{"value":"/ Panics when the duration is out of bounds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":59084,"byte_end":59130,"line_start":88,"line_end":88,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":59135,"byte_end":59144,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":59535,"byte_end":59542,"line_start":99,"line_end":99,"column_start":12,"column_end":19},"name":"minutes","qualname":"<Duration>::minutes","value":"pub fn minutes(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of minutes.\n Equivalent to `Duration::seconds(minutes * 60)` with overflow checks.\n Panics when the duration is out of bounds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of minutes.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":59324,"byte_end":59380,"line_start":95,"line_end":95,"column_start":5,"column_end":61}},{"value":"/ Equivalent to `Duration::seconds(minutes * 60)` with overflow checks.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":59385,"byte_end":59458,"line_start":96,"line_end":96,"column_start":5,"column_end":78}},{"value":"/ Panics when the duration is out of bounds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":59463,"byte_end":59509,"line_start":97,"line_end":97,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":59514,"byte_end":59523,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":59901,"byte_end":59908,"line_start":108,"line_end":108,"column_start":12,"column_end":19},"name":"seconds","qualname":"<Duration>::seconds","value":"pub fn seconds(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of seconds.\n Panics when the duration is more than `i64::MAX` seconds\n or less than `i64::MIN` seconds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of seconds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":59713,"byte_end":59769,"line_start":104,"line_end":104,"column_start":5,"column_end":61}},{"value":"/ Panics when the duration is more than `i64::MAX` seconds","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":59774,"byte_end":59834,"line_start":105,"line_end":105,"column_start":5,"column_end":65}},{"value":"/ or less than `i64::MIN` seconds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":59839,"byte_end":59875,"line_start":106,"line_end":106,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":59880,"byte_end":59889,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":60196,"byte_end":60208,"line_start":118,"line_end":118,"column_start":12,"column_end":24},"name":"milliseconds","qualname":"<Duration>::milliseconds","value":"pub fn milliseconds(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of milliseconds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of milliseconds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":60109,"byte_end":60170,"line_start":116,"line_end":116,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":60175,"byte_end":60184,"line_start":117,"line_end":117,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":60516,"byte_end":60528,"line_start":126,"line_end":126,"column_start":12,"column_end":24},"name":"microseconds","qualname":"<Duration>::microseconds","value":"pub fn microseconds(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of microseconds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of microseconds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":60429,"byte_end":60490,"line_start":124,"line_end":124,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":60495,"byte_end":60504,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":60835,"byte_end":60846,"line_start":134,"line_end":134,"column_start":12,"column_end":23},"name":"nanoseconds","qualname":"<Duration>::nanoseconds","value":"pub fn nanoseconds(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of nanoseconds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of nanoseconds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":60749,"byte_end":60809,"line_start":132,"line_end":132,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":60814,"byte_end":60823,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":61098,"byte_end":61107,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"num_weeks","qualname":"<Duration>::num_weeks","value":"pub fn num_weeks(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole weeks in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole weeks in the duration.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":61012,"byte_end":61072,"line_start":139,"line_end":139,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":61077,"byte_end":61086,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":61234,"byte_end":61242,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"num_days","qualname":"<Duration>::num_days","value":"pub fn num_days(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole days in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole days in the duration.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":61163,"byte_end":61222,"line_start":145,"line_end":145,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":61398,"byte_end":61407,"line_start":152,"line_end":152,"column_start":12,"column_end":21},"name":"num_hours","qualname":"<Duration>::num_hours","value":"pub fn num_hours(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole hours in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole hours in the duration.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":61312,"byte_end":61372,"line_start":150,"line_end":150,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":61377,"byte_end":61386,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":61566,"byte_end":61577,"line_start":158,"line_end":158,"column_start":12,"column_end":23},"name":"num_minutes","qualname":"<Duration>::num_minutes","value":"pub fn num_minutes(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole minutes in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole minutes in the duration.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":61478,"byte_end":61540,"line_start":156,"line_end":156,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":61545,"byte_end":61554,"line_start":157,"line_end":157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":61724,"byte_end":61735,"line_start":163,"line_end":163,"column_start":12,"column_end":23},"name":"num_seconds","qualname":"<Duration>::num_seconds","value":"pub fn num_seconds(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole seconds in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole seconds in the duration.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":61650,"byte_end":61712,"line_start":162,"line_end":162,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":62388,"byte_end":62404,"line_start":184,"line_end":184,"column_start":12,"column_end":28},"name":"num_milliseconds","qualname":"<Duration>::num_milliseconds","value":"pub fn num_milliseconds(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole milliseconds in the duration,\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole milliseconds in the duration,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":62309,"byte_end":62376,"line_start":183,"line_end":183,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":62896,"byte_end":62912,"line_start":194,"line_end":194,"column_start":12,"column_end":28},"name":"num_microseconds","qualname":"<Duration>::num_microseconds","value":"pub fn num_microseconds(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole microseconds in the duration,\n or `None` on overflow (exceeding 2^63 microseconds in either direction).\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole microseconds in the duration,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":62736,"byte_end":62803,"line_start":192,"line_end":192,"column_start":5,"column_end":72}},{"value":"/ or `None` on overflow (exceeding 2^63 microseconds in either direction).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":62808,"byte_end":62884,"line_start":193,"line_end":193,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":63302,"byte_end":63317,"line_start":202,"line_end":202,"column_start":12,"column_end":27},"name":"num_nanoseconds","qualname":"<Duration>::num_nanoseconds","value":"pub fn num_nanoseconds(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole nanoseconds in the duration,\n or `None` on overflow (exceeding 2^63 nanoseconds in either direction).\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole nanoseconds in the duration,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":63144,"byte_end":63210,"line_start":200,"line_end":200,"column_start":5,"column_end":71}},{"value":"/ or `None` on overflow (exceeding 2^63 nanoseconds in either direction).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":63215,"byte_end":63290,"line_start":201,"line_end":201,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":63610,"byte_end":63621,"line_start":209,"line_end":209,"column_start":12,"column_end":23},"name":"checked_add","qualname":"<Duration>::checked_add","value":"pub fn checked_add(&Self, &Duration) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":" Add two durations, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"/ Add two durations, returning `None` if overflow occurred.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":63537,"byte_end":63598,"line_start":208,"line_end":208,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":64264,"byte_end":64275,"line_start":227,"line_end":227,"column_start":12,"column_end":23},"name":"checked_sub","qualname":"<Duration>::checked_sub","value":"pub fn checked_sub(&Self, &Duration) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":" Subtract two durations, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"/ Subtract two durations, returning `None` if overflow occurred.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":64186,"byte_end":64252,"line_start":226,"line_end":226,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":64914,"byte_end":64917,"line_start":246,"line_end":246,"column_start":12,"column_end":15},"name":"abs","qualname":"<Duration>::abs","value":"pub fn abs(&Self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the duration as an absolute (non-negative) value.\n","sig":null,"attributes":[{"value":"/ Returns the duration as an absolute (non-negative) value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":64827,"byte_end":64888,"line_start":244,"line_end":244,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":64893,"byte_end":64902,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65099,"byte_end":65108,"line_start":252,"line_end":252,"column_start":12,"column_end":21},"name":"min_value","qualname":"<Duration>::min_value","value":"pub fn min_value() -> Duration","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Duration`: `i64::MIN` milliseconds.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Duration`: `i64::MIN` milliseconds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65012,"byte_end":65073,"line_start":250,"line_end":250,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65078,"byte_end":65087,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65235,"byte_end":65244,"line_start":258,"line_end":258,"column_start":12,"column_end":21},"name":"max_value","qualname":"<Duration>::max_value","value":"pub fn max_value() -> Duration","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Duration`: `i64::MAX` milliseconds.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Duration`: `i64::MAX` milliseconds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65148,"byte_end":65209,"line_start":256,"line_end":256,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65214,"byte_end":65223,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65384,"byte_end":65388,"line_start":264,"line_end":264,"column_start":12,"column_end":16},"name":"zero","qualname":"<Duration>::zero","value":"pub fn zero() -> Duration","parent":null,"children":[],"decl_id":null,"docs":" A duration where the stored seconds and nanoseconds are equal to zero.\n","sig":null,"attributes":[{"value":"/ A duration where the stored seconds and nanoseconds are equal to zero.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65284,"byte_end":65358,"line_start":262,"line_end":262,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65363,"byte_end":65372,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65542,"byte_end":65549,"line_start":270,"line_end":270,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<Duration>::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the duration equals `Duration::zero()`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the duration equals `Duration::zero()`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65455,"byte_end":65516,"line_start":268,"line_end":268,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65521,"byte_end":65530,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65822,"byte_end":65830,"line_start":278,"line_end":278,"column_start":12,"column_end":20},"name":"from_std","qualname":"<Duration>::from_std","value":"pub fn from_std(StdDuration) -> Result<Duration, OutOfRangeError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `time::Duration` object from `std::time::Duration`","sig":null,"attributes":[{"value":"/ Creates a `time::Duration` object from `std::time::Duration`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65620,"byte_end":65684,"line_start":274,"line_end":274,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65689,"byte_end":65692,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ This function errors when original duration is larger than the maximum","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65697,"byte_end":65771,"line_start":276,"line_end":276,"column_start":5,"column_end":79}},{"value":"/ value supported for this type.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":65776,"byte_end":65810,"line_start":277,"line_end":277,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":66487,"byte_end":66493,"line_start":294,"line_end":294,"column_start":12,"column_end":18},"name":"to_std","qualname":"<Duration>::to_std","value":"pub fn to_std(&Self) -> Result<StdDuration, OutOfRangeError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `std::time::Duration` object from `time::Duration`","sig":null,"attributes":[{"value":"/ Creates a `std::time::Duration` object from `time::Duration`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":66263,"byte_end":66327,"line_start":290,"line_end":290,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":66332,"byte_end":66335,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ This function errors when duration is less than zero. As standard","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":66340,"byte_end":66409,"line_start":292,"line_end":292,"column_start":5,"column_end":74}},{"value":"/ library implementation is limited to non-negative values.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":66414,"byte_end":66475,"line_start":293,"line_end":293,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1366},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":70110,"byte_end":70125,"line_start":413,"line_end":413,"column_start":12,"column_end":27},"name":"OutOfRangeError","qualname":"::oldtime::OutOfRangeError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Represents error when converting `Duration` to/from a standard library\n implementation","sig":null,"attributes":[{"value":"/ Represents error when converting `Duration` to/from a standard library","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":69787,"byte_end":69861,"line_start":406,"line_end":406,"column_start":1,"column_end":75}},{"value":"/ implementation","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":69862,"byte_end":69880,"line_start":407,"line_end":407,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":69881,"byte_end":69884,"line_start":408,"line_end":408,"column_start":1,"column_end":4}},{"value":"/ The `std::time::Duration` supports a range from zero to `u64::MAX`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":69885,"byte_end":69955,"line_start":409,"line_end":409,"column_start":1,"column_end":71}},{"value":"/ *seconds*, while this module supports signed range of up to","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":69956,"byte_end":70019,"line_start":410,"line_end":410,"column_start":1,"column_end":64}},{"value":"/ `i64::MAX` of *milliseconds*.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":70020,"byte_end":70053,"line_start":411,"line_end":411,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":107},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22850,"byte_end":22857,"line_start":506,"line_end":506,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":2158},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use chrono::prelude::*;`).\n","sig":null,"attributes":[{"value":"/ A convenience module appropriate for glob imports (`use chrono::prelude::*;`).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":22759,"byte_end":22841,"line_start":505,"line_end":505,"column_start":1,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":135},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offset","qualname":"::offset","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":1381},{"krate":0,"index":1412},{"krate":0,"index":1406},{"krate":0,"index":1408},{"krate":0,"index":1403},{"krate":0,"index":1401},{"krate":0,"index":1396},{"krate":0,"index":1398},{"krate":0,"index":1392},{"krate":0,"index":150},{"krate":0,"index":158},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":195},{"krate":0,"index":254},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":2242}],"decl_id":null,"docs":" The time zone, which calculates offsets from the local time to UTC.","sig":null,"attributes":[{"value":"/ The time zone, which calculates offsets from the local time to UTC.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":83765,"byte_end":83836,"line_start":4,"line_end":4,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":83837,"byte_end":83840,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ There are four operations provided by the `TimeZone` trait:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":83841,"byte_end":83904,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":83905,"byte_end":83908,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ 1. Converting the local `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":83909,"byte_end":83970,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ 2. Converting the UTC `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":83971,"byte_end":84030,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/ 3. Converting `DateTime<Tz>` to the local `NaiveDateTime`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":84031,"byte_end":84092,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"/ 4. Constructing `DateTime<Tz>` objects from various offsets","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":84093,"byte_end":84156,"line_start":11,"line_end":11,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":84157,"byte_end":84160,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ 1 is used for constructors. 2 is used for the `with_timezone` method of date and time types.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":84161,"byte_end":84257,"line_start":13,"line_end":13,"column_start":1,"column_end":97}},{"value":"/ 3 is used for other methods, e.g. `year()` or `format()`, and provided by an associated type","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":84258,"byte_end":84354,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ which implements `Offset` (which then passed to `TimeZone` for actual implementations).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":84355,"byte_end":84446,"line_start":15,"line_end":15,"column_start":1,"column_end":92}},{"value":"/ Technically speaking `TimeZone` has a total knowledge about given timescale,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":84447,"byte_end":84527,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ but `Offset` is used as a cache to avoid the repeated conversion","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":84528,"byte_end":84596,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ and provides implementations for 1 and 3.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":84597,"byte_end":84642,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"/ An `TimeZone` instance can be reconstructed from the corresponding `Offset` instance.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":84643,"byte_end":84732,"line_start":19,"line_end":19,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1383},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":85186,"byte_end":85190,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"None","qualname":"::offset::LocalResult::None","value":"LocalResult::None","parent":{"krate":0,"index":1381},"children":[],"decl_id":null,"docs":" Given local time representation is invalid.\n This can occur when, for example, the positive timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation is invalid.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":85058,"byte_end":85105,"line_start":31,"line_end":31,"column_start":5,"column_end":52}},{"value":"/ This can occur when, for example, the positive timezone transition.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":85110,"byte_end":85181,"line_start":32,"line_end":32,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1385},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":85264,"byte_end":85270,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Single","qualname":"::offset::LocalResult::Single","value":"LocalResult::Single(T)","parent":{"krate":0,"index":1381},"children":[],"decl_id":null,"docs":" Given local time representation has a single unique result.\n","sig":null,"attributes":[{"value":"/ Given local time representation has a single unique result.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":85196,"byte_end":85259,"line_start":34,"line_end":34,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1388},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":85436,"byte_end":85445,"line_start":38,"line_end":38,"column_start":5,"column_end":14},"name":"Ambiguous","qualname":"::offset::LocalResult::Ambiguous","value":"LocalResult::Ambiguous(T, T)","parent":{"krate":0,"index":1381},"children":[],"decl_id":null,"docs":" Given local time representation has multiple results and thus ambiguous.\n This can occur when, for example, the negative timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation has multiple results and thus ambiguous.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":85279,"byte_end":85355,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ This can occur when, for example, the negative timezone transition.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":85360,"byte_end":85431,"line_start":37,"line_end":37,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1381},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":85037,"byte_end":85048,"line_start":30,"line_end":30,"column_start":10,"column_end":21},"name":"LocalResult","qualname":"::offset::LocalResult","value":"pub enum LocalResult<T> {\n\n    /// Given local time representation is invalid.\n    /// This can occur when, for example, the positive timezone transition.\n    None,\n\n    /// Given local time representation has a single unique result.\n    Single(T),\n\n    /// Given local time representation has multiple results and thus ambiguous.\n    /// This can occur when, for example, the negative timezone transition.\n    Ambiguous(T, T),\n}","parent":null,"children":[{"krate":0,"index":1383},{"krate":0,"index":1385},{"krate":0,"index":1388}],"decl_id":null,"docs":" The conversion result from the local time to the timezone-aware datetime types.\n","sig":null,"attributes":[{"value":"/ The conversion result from the local time to the timezone-aware datetime types.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":84893,"byte_end":84976,"line_start":28,"line_end":28,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":85595,"byte_end":85601,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"single","qualname":"<LocalResult<T>>::single","value":"pub fn single(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` only when the conversion result is unique, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `Some` only when the conversion result is unique, or `None` otherwise.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":85501,"byte_end":85583,"line_start":42,"line_end":42,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":85829,"byte_end":85837,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"earliest","qualname":"<LocalResult<T>>::earliest","value":"pub fn earliest(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the earliest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the earliest possible conversion result, or `None` if none.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":85735,"byte_end":85817,"line_start":50,"line_end":50,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":86094,"byte_end":86100,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"latest","qualname":"<LocalResult<T>>::latest","value":"pub fn latest(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the latest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the latest possible conversion result, or `None` if none.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":86002,"byte_end":86082,"line_start":58,"line_end":58,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":86347,"byte_end":86350,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"map","qualname":"<LocalResult<T>>::map","value":"pub fn map<U, F: FnMut(T) -> U>(Self, F) -> LocalResult<U>","parent":null,"children":[],"decl_id":null,"docs":" Maps a `LocalResult<T>` into `LocalResult<U>` with given function.\n","sig":null,"attributes":[{"value":"/ Maps a `LocalResult<T>` into `LocalResult<U>` with given function.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":86265,"byte_end":86335,"line_start":66,"line_end":66,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":86925,"byte_end":86933,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"and_time","qualname":"<LocalResult<Date<Tz>>>::and_time","value":"pub fn and_time(Self, NaiveTime) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":86700,"byte_end":86771,"line_start":77,"line_end":77,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":86776,"byte_end":86824,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":86829,"byte_end":86832,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":86837,"byte_end":86899,"line_start":80,"line_end":80,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":86904,"byte_end":86913,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":87428,"byte_end":87439,"line_start":96,"line_end":96,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_opt","value":"pub fn and_hms_opt(Self, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":87200,"byte_end":87274,"line_start":91,"line_end":91,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":87279,"byte_end":87327,"line_start":92,"line_end":92,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":87332,"byte_end":87335,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":87340,"byte_end":87402,"line_start":94,"line_end":94,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":87407,"byte_end":87416,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":88059,"byte_end":88076,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(Self, u32, u32, u32, u32)\n-> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":87733,"byte_end":87820,"line_start":105,"line_end":105,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":87825,"byte_end":87905,"line_start":106,"line_end":106,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":87910,"byte_end":87958,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":87963,"byte_end":87966,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":87971,"byte_end":88033,"line_start":109,"line_end":109,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":88038,"byte_end":88047,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":88775,"byte_end":88792,"line_start":132,"line_end":132,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(Self, u32, u32, u32, u32)\n-> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":88445,"byte_end":88532,"line_start":126,"line_end":126,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":88537,"byte_end":88621,"line_start":127,"line_end":127,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":88626,"byte_end":88674,"line_start":128,"line_end":128,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":88679,"byte_end":88682,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":88687,"byte_end":88749,"line_start":130,"line_end":130,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":88754,"byte_end":88763,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":89493,"byte_end":89509,"line_start":153,"line_end":153,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(Self, u32, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":89161,"byte_end":89247,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":89252,"byte_end":89339,"line_start":148,"line_end":148,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":89344,"byte_end":89392,"line_start":149,"line_end":149,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":89397,"byte_end":89400,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":89405,"byte_end":89467,"line_start":151,"line_end":151,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":89472,"byte_end":89481,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":89997,"byte_end":90003,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<LocalResult<T>>::unwrap","value":"pub fn unwrap(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the single unique conversion result, or panics accordingly.\n","sig":null,"attributes":[{"value":"/ Returns the single unique conversion result, or panics accordingly.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":89914,"byte_end":89985,"line_start":170,"line_end":170,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":168},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90358,"byte_end":90364,"line_start":183,"line_end":183,"column_start":11,"column_end":17},"name":"Offset","qualname":"::offset::Offset","value":"Offset: Sized + Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":169}],"decl_id":null,"docs":" The offset from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ The offset from the local time to UTC.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90305,"byte_end":90347,"line_start":182,"line_end":182,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90470,"byte_end":90473,"line_start":185,"line_end":185,"column_start":8,"column_end":11},"name":"fix","qualname":"::offset::Offset::fix","value":"pub fn fix(&Self) -> FixedOffset","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Returns the fixed offset from UTC to the local time stored.\n","sig":null,"attributes":[{"value":"/ Returns the fixed offset from UTC to the local time stored.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90399,"byte_end":90462,"line_start":184,"line_end":184,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":170},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90672,"byte_end":90680,"line_start":192,"line_end":192,"column_start":11,"column_end":19},"name":"TimeZone","qualname":"::offset::TimeZone","value":"TimeZone: Sized + Clone","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194}],"decl_id":null,"docs":" The time zone.","sig":null,"attributes":[{"value":"/ The time zone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90500,"byte_end":90518,"line_start":188,"line_end":188,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90519,"byte_end":90522,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ The methods here are the primarily constructors for [`Date`](../struct.Date.html) and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90523,"byte_end":90612,"line_start":190,"line_end":190,"column_start":1,"column_end":90}},{"value":"/ [`DateTime`](../struct.DateTime.html) types.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90613,"byte_end":90661,"line_start":191,"line_end":191,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":171},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90903,"byte_end":90909,"line_start":196,"line_end":196,"column_start":10,"column_end":16},"name":"Offset","qualname":"::offset::TimeZone::Offset","value":"type Offset: Offset;","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" An associated offset type.\n This type is used to store the actual offset in date and time types.\n The original `TimeZone` value can be recovered via `TimeZone::from_offset`.\n","sig":null,"attributes":[{"value":"/ An associated offset type.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90702,"byte_end":90732,"line_start":193,"line_end":193,"column_start":5,"column_end":35}},{"value":"/ This type is used to store the actual offset in date and time types.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90737,"byte_end":90809,"line_start":194,"line_end":194,"column_start":5,"column_end":77}},{"value":"/ The original `TimeZone` value can be recovered via `TimeZone::from_offset`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90814,"byte_end":90893,"line_start":195,"line_end":195,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91526,"byte_end":91529,"line_start":213,"line_end":213,"column_start":8,"column_end":11},"name":"ymd","qualname":"::offset::TimeZone::ymd","value":"pub fn ymd(&Self, i32, u32, u32) -> Date<Self>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90924,"byte_end":90995,"line_start":198,"line_end":198,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91000,"byte_end":91079,"line_start":199,"line_end":199,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91084,"byte_end":91087,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91092,"byte_end":91185,"line_start":201,"line_end":201,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91190,"byte_end":91267,"line_start":202,"line_end":202,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91272,"byte_end":91275,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91280,"byte_end":91342,"line_start":204,"line_end":204,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91347,"byte_end":91350,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91355,"byte_end":91368,"line_start":206,"line_end":206,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91373,"byte_end":91376,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91381,"byte_end":91389,"line_start":208,"line_end":208,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91394,"byte_end":91426,"line_start":209,"line_end":209,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91431,"byte_end":91434,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd(2015, 5, 15).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91439,"byte_end":91505,"line_start":211,"line_end":211,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91510,"byte_end":91518,"line_start":212,"line_end":212,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92345,"byte_end":92352,"line_start":233,"line_end":233,"column_start":8,"column_end":15},"name":"ymd_opt","qualname":"::offset::TimeZone::ymd_opt","value":"pub fn ymd_opt(&Self, i32, u32, u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91645,"byte_end":91716,"line_start":217,"line_end":217,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91721,"byte_end":91800,"line_start":218,"line_end":218,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91805,"byte_end":91808,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91813,"byte_end":91906,"line_start":220,"line_end":220,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91911,"byte_end":91988,"line_start":221,"line_end":221,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":91993,"byte_end":91996,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92001,"byte_end":92071,"line_start":223,"line_end":223,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92076,"byte_end":92079,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92084,"byte_end":92097,"line_start":225,"line_end":225,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92102,"byte_end":92105,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92110,"byte_end":92118,"line_start":227,"line_end":227,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, LocalResult, TimeZone};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92123,"byte_end":92168,"line_start":228,"line_end":228,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92173,"byte_end":92176,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd_opt(2015, 5, 15).unwrap().to_string(), \"2015-05-15UTC\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92181,"byte_end":92260,"line_start":230,"line_end":230,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2000, 0, 0), LocalResult::None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92265,"byte_end":92324,"line_start":231,"line_end":231,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92329,"byte_end":92337,"line_start":232,"line_end":232,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93201,"byte_end":93203,"line_start":255,"line_end":255,"column_start":8,"column_end":10},"name":"yo","qualname":"::offset::TimeZone::yo","value":"pub fn yo(&Self, i32, u32) -> Date<Self>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92589,"byte_end":92680,"line_start":240,"line_end":240,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92685,"byte_end":92764,"line_start":241,"line_end":241,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92769,"byte_end":92772,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92777,"byte_end":92870,"line_start":243,"line_end":243,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92875,"byte_end":92952,"line_start":244,"line_end":244,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92957,"byte_end":92960,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid DOY.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":92965,"byte_end":93020,"line_start":246,"line_end":246,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93025,"byte_end":93028,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93033,"byte_end":93046,"line_start":248,"line_end":248,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93051,"byte_end":93054,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93059,"byte_end":93067,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93072,"byte_end":93104,"line_start":251,"line_end":251,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93109,"byte_end":93112,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.yo(2015, 135).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93117,"byte_end":93180,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93185,"byte_end":93193,"line_start":254,"line_end":254,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93754,"byte_end":93760,"line_start":266,"line_end":266,"column_start":8,"column_end":14},"name":"yo_opt","qualname":"::offset::TimeZone::yo_opt","value":"pub fn yo_opt(&Self, i32, u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93307,"byte_end":93398,"line_start":259,"line_end":259,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93403,"byte_end":93482,"line_start":260,"line_end":260,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93487,"byte_end":93490,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93495,"byte_end":93588,"line_start":262,"line_end":262,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93593,"byte_end":93670,"line_start":263,"line_end":263,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93675,"byte_end":93678,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid DOY.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93683,"byte_end":93746,"line_start":265,"line_end":265,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94738,"byte_end":94744,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"isoywd","qualname":"::offset::TimeZone::isoywd","value":"pub fn isoywd(&Self, i32, u32, Weekday) -> Date<Self>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":93985,"byte_end":94076,"line_start":273,"line_end":273,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94081,"byte_end":94107,"line_start":274,"line_end":274,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94112,"byte_end":94191,"line_start":275,"line_end":275,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94196,"byte_end":94267,"line_start":276,"line_end":276,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94272,"byte_end":94275,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94280,"byte_end":94373,"line_start":278,"line_end":278,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94378,"byte_end":94455,"line_start":279,"line_end":279,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94460,"byte_end":94463,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94468,"byte_end":94531,"line_start":281,"line_end":281,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94536,"byte_end":94539,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94544,"byte_end":94557,"line_start":283,"line_end":283,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94562,"byte_end":94565,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94570,"byte_end":94578,"line_start":285,"line_end":285,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, Weekday, TimeZone};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94583,"byte_end":94624,"line_start":286,"line_end":286,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94629,"byte_end":94632,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.isoywd(2015, 20, Weekday::Fri).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94637,"byte_end":94717,"line_start":288,"line_end":288,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94722,"byte_end":94730,"line_start":289,"line_end":289,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":95435,"byte_end":95445,"line_start":303,"line_end":303,"column_start":8,"column_end":18},"name":"isoywd_opt","qualname":"::offset::TimeZone::isoywd_opt","value":"pub fn isoywd_opt(&Self, i32, u32, Weekday) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94873,"byte_end":94964,"line_start":294,"line_end":294,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":94969,"byte_end":94995,"line_start":295,"line_end":295,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":95000,"byte_end":95079,"line_start":296,"line_end":296,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":95084,"byte_end":95155,"line_start":297,"line_end":297,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":95160,"byte_end":95163,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":95168,"byte_end":95261,"line_start":299,"line_end":299,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":95266,"byte_end":95343,"line_start":300,"line_end":300,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":95348,"byte_end":95351,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":95356,"byte_end":95427,"line_start":302,"line_end":302,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":96270,"byte_end":96279,"line_start":324,"line_end":324,"column_start":8,"column_end":17},"name":"timestamp","qualname":"::offset::TimeZone::timestamp","value":"pub fn timestamp(&Self, i64, u32) -> DateTime<Self>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":95695,"byte_end":95757,"line_start":310,"line_end":310,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":95762,"byte_end":95822,"line_start":311,"line_end":311,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":95827,"byte_end":95898,"line_start":312,"line_end":312,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":95903,"byte_end":95906,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":95911,"byte_end":95986,"line_start":314,"line_end":314,"column_start":5,"column_end":80}},{"value":"/ for a non-panicking version see [`timestamp_opt`](#method.timestamp_opt).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":95991,"byte_end":96068,"line_start":315,"line_end":315,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":96073,"byte_end":96076,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":96081,"byte_end":96094,"line_start":317,"line_end":317,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":96099,"byte_end":96102,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":96107,"byte_end":96115,"line_start":319,"line_end":319,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":96120,"byte_end":96152,"line_start":320,"line_end":320,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":96157,"byte_end":96160,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp(1431648000, 0).to_string(), \"2015-05-15 00:00:00 UTC\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":96165,"byte_end":96249,"line_start":322,"line_end":322,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":96254,"byte_end":96262,"line_start":323,"line_end":323,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":96762,"byte_end":96775,"line_start":334,"line_end":334,"column_start":8,"column_end":21},"name":"timestamp_opt","qualname":"::offset::TimeZone::timestamp_opt","value":"pub fn timestamp_opt(&Self, i64, u32) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":96390,"byte_end":96452,"line_start":328,"line_end":328,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":96457,"byte_end":96517,"line_start":329,"line_end":329,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":96522,"byte_end":96593,"line_start":330,"line_end":330,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":96598,"byte_end":96601,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of seconds and/or","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":96606,"byte_end":96678,"line_start":332,"line_end":332,"column_start":5,"column_end":77}},{"value":"/ invalid nanosecond, otherwise always returns `LocalResult::Single`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":96683,"byte_end":96754,"line_start":333,"line_end":333,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97515,"byte_end":97531,"line_start":354,"line_end":354,"column_start":8,"column_end":24},"name":"timestamp_millis","qualname":"::offset::TimeZone::timestamp_millis","value":"pub fn timestamp_millis(&Self, i64) -> DateTime<Self>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97036,"byte_end":97103,"line_start":341,"line_end":341,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97108,"byte_end":97169,"line_start":342,"line_end":342,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97174,"byte_end":97177,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ Panics on out-of-range number of milliseconds for a non-panicking","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97182,"byte_end":97251,"line_start":344,"line_end":344,"column_start":5,"column_end":74}},{"value":"/ version see [`timestamp_millis_opt`](#method.timestamp_millis_opt).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97256,"byte_end":97327,"line_start":345,"line_end":345,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97332,"byte_end":97335,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97340,"byte_end":97353,"line_start":347,"line_end":347,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97358,"byte_end":97361,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97366,"byte_end":97374,"line_start":349,"line_end":349,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97379,"byte_end":97411,"line_start":350,"line_end":350,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97416,"byte_end":97419,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_millis(1431648000).timestamp(), 1431648);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97424,"byte_end":97494,"line_start":352,"line_end":352,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97499,"byte_end":97507,"line_start":353,"line_end":353,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98262,"byte_end":98282,"line_start":375,"line_end":375,"column_start":8,"column_end":28},"name":"timestamp_millis_opt","qualname":"::offset::TimeZone::timestamp_millis_opt","value":"pub fn timestamp_millis_opt(&Self, i64) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97634,"byte_end":97701,"line_start":358,"line_end":358,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97706,"byte_end":97767,"line_start":359,"line_end":359,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97772,"byte_end":97775,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97780,"byte_end":97783,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of milliseconds","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97788,"byte_end":97858,"line_start":362,"line_end":362,"column_start":5,"column_end":75}},{"value":"/ and/or invalid nanosecond, otherwise always returns","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97863,"byte_end":97918,"line_start":363,"line_end":363,"column_start":5,"column_end":60}},{"value":"/ `LocalResult::Single`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97923,"byte_end":97949,"line_start":364,"line_end":364,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97954,"byte_end":97957,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97962,"byte_end":97975,"line_start":366,"line_end":366,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97980,"byte_end":97983,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":97988,"byte_end":97996,"line_start":368,"line_end":368,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone, LocalResult};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98001,"byte_end":98046,"line_start":369,"line_end":369,"column_start":5,"column_end":50}},{"value":"/ match Utc.timestamp_millis_opt(1431648000) {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98051,"byte_end":98099,"line_start":370,"line_end":370,"column_start":5,"column_end":53}},{"value":"/     LocalResult::Single(dt) => assert_eq!(dt.timestamp(), 1431648),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98104,"byte_end":98175,"line_start":371,"line_end":371,"column_start":5,"column_end":76}},{"value":"/     _ => panic!(\"Incorrect timestamp_millis\"),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98180,"byte_end":98230,"line_start":372,"line_end":372,"column_start":5,"column_end":55}},{"value":"/ };","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98235,"byte_end":98241,"line_start":373,"line_end":373,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98246,"byte_end":98254,"line_start":374,"line_end":374,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98984,"byte_end":98999,"line_start":397,"line_end":397,"column_start":8,"column_end":23},"name":"timestamp_nanos","qualname":"::offset::TimeZone::timestamp_nanos","value":"pub fn timestamp_nanos(&Self, i64) -> DateTime<Self>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap nanoseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap nanoseconds","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98561,"byte_end":98627,"line_start":384,"line_end":384,"column_start":5,"column_end":71}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98632,"byte_end":98693,"line_start":385,"line_end":385,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98698,"byte_end":98701,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Unlike [`timestamp_millis`](#method.timestamp_millis), this never","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98706,"byte_end":98775,"line_start":387,"line_end":387,"column_start":5,"column_end":74}},{"value":"/ panics.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98780,"byte_end":98791,"line_start":388,"line_end":388,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98796,"byte_end":98799,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98804,"byte_end":98817,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98822,"byte_end":98825,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98830,"byte_end":98838,"line_start":392,"line_end":392,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98843,"byte_end":98875,"line_start":393,"line_end":393,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98880,"byte_end":98883,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_nanos(1431648000000000).timestamp(), 1431648);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98888,"byte_end":98963,"line_start":395,"line_end":395,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":98968,"byte_end":98976,"line_start":396,"line_end":396,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":99786,"byte_end":99803,"line_start":416,"line_end":416,"column_start":8,"column_end":25},"name":"datetime_from_str","qualname":"::offset::TimeZone::datetime_from_str","value":"pub fn datetime_from_str(&Self, &str, &str) -> ParseResult<DateTime<Self>>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a `DateTime` with the current offset.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":99282,"byte_end":99338,"line_start":406,"line_end":406,"column_start":5,"column_end":61}},{"value":"/ returns a `DateTime` with the current offset.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":99343,"byte_end":99392,"line_start":407,"line_end":407,"column_start":5,"column_end":54}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":99397,"byte_end":99467,"line_start":408,"line_end":408,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":99472,"byte_end":99510,"line_start":409,"line_end":409,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":99515,"byte_end":99518,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ If the format does not include offsets, the current offset is assumed;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":99523,"byte_end":99597,"line_start":411,"line_end":411,"column_start":5,"column_end":79}},{"value":"/ otherwise the input should have a matching UTC offset.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":99602,"byte_end":99660,"line_start":412,"line_end":412,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":99665,"byte_end":99668,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ See also `DateTime::parse_from_str` which gives a local `DateTime`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":99673,"byte_end":99743,"line_start":414,"line_end":414,"column_start":5,"column_end":75}},{"value":"/ with parsed `FixedOffset`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":99748,"byte_end":99778,"line_start":415,"line_end":415,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":100074,"byte_end":100085,"line_start":423,"line_end":423,"column_start":8,"column_end":19},"name":"from_offset","qualname":"::offset::TimeZone::from_offset","value":"pub fn from_offset(&Self::Offset) -> Self","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Reconstructs the time zone from the offset.\n","sig":null,"attributes":[{"value":"/ Reconstructs the time zone from the offset.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":100019,"byte_end":100066,"line_start":422,"line_end":422,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":100197,"byte_end":100219,"line_start":426,"line_end":426,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"::offset::TimeZone::offset_from_local_date","value":"pub fn offset_from_local_date(&Self, &NaiveDate) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDate` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDate` if possible.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":100123,"byte_end":100189,"line_start":425,"line_end":425,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":100359,"byte_end":100385,"line_start":429,"line_end":429,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"::offset::TimeZone::offset_from_local_datetime","value":"pub fn offset_from_local_datetime(&Self, &NaiveDateTime)\n-> LocalResult<Self::Offset>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDateTime` if possible.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":100281,"byte_end":100351,"line_start":428,"line_end":428,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":100535,"byte_end":100550,"line_start":432,"line_end":432,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"::offset::TimeZone::from_local_date","value":"pub fn from_local_date(&Self, &NaiveDate) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDate` to the timezone-aware `Date` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDate` to the timezone-aware `Date` if possible.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":100451,"byte_end":100527,"line_start":431,"line_end":431,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":100902,"byte_end":100921,"line_start":440,"line_end":440,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"::offset::TimeZone::from_local_datetime","value":"pub fn from_local_datetime(&Self, &NaiveDateTime)\n-> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":100810,"byte_end":100894,"line_start":439,"line_end":439,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":101195,"byte_end":101215,"line_start":446,"line_end":446,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"::offset::TimeZone::offset_from_utc_date","value":"pub fn offset_from_utc_date(&Self, &NaiveDate) -> Self::Offset","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDate`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDate`. This cannot fail.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":101120,"byte_end":101187,"line_start":445,"line_end":445,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":101341,"byte_end":101365,"line_start":449,"line_end":449,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"::offset::TimeZone::offset_from_utc_datetime","value":"pub fn offset_from_utc_datetime(&Self, &NaiveDateTime) -> Self::Offset","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDateTime`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDateTime`. This cannot fail.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":101262,"byte_end":101333,"line_start":448,"line_end":448,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":101572,"byte_end":101585,"line_start":453,"line_end":453,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"::offset::TimeZone::from_utc_date","value":"pub fn from_utc_date(&Self, &NaiveDate) -> Date<Self>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDate` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDate` to the local time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":101416,"byte_end":101467,"line_start":451,"line_end":451,"column_start":5,"column_end":56}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":101472,"byte_end":101564,"line_start":452,"line_end":452,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":101858,"byte_end":101875,"line_start":459,"line_end":459,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"::offset::TimeZone::from_utc_datetime","value":"pub fn from_utc_datetime(&Self, &NaiveDateTime) -> DateTime<Self>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDateTime` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDateTime` to the local time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":101698,"byte_end":101753,"line_start":457,"line_end":457,"column_start":5,"column_end":60}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":101758,"byte_end":101850,"line_start":458,"line_end":458,"column_start":5,"column_end":97}}]},{"kind":"Struct","id":{"krate":0,"index":1415},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105203,"byte_end":105214,"line_start":23,"line_end":23,"column_start":12,"column_end":23},"name":"FixedOffset","qualname":"::offset::fixed::FixedOffset","value":"FixedOffset {  }","parent":null,"children":[{"krate":0,"index":1416}],"decl_id":null,"docs":" The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","sig":null,"attributes":[{"value":"/ The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":104827,"byte_end":104898,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":104899,"byte_end":104902,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":104903,"byte_end":104960,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"/ on a `FixedOffset` struct is the preferred way to construct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":104961,"byte_end":105024,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/ `DateTime<FixedOffset>` instances. See the [`east`](#method.east) and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105025,"byte_end":105098,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ [`west`](#method.west) methods for examples.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105099,"byte_end":105147,"line_start":21,"line_end":21,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105818,"byte_end":105822,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"east","qualname":"<FixedOffset>::east","value":"pub fn east(i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105269,"byte_end":105357,"line_start":28,"line_end":28,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105362,"byte_end":105415,"line_start":29,"line_end":29,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105420,"byte_end":105423,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105428,"byte_end":105466,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105471,"byte_end":105474,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105479,"byte_end":105492,"line_start":33,"line_end":33,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105497,"byte_end":105500,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105505,"byte_end":105513,"line_start":35,"line_end":35,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105518,"byte_end":105558,"line_start":36,"line_end":36,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105563,"byte_end":105583,"line_start":37,"line_end":37,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::east(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105588,"byte_end":105652,"line_start":38,"line_end":38,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105657,"byte_end":105721,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00+05:00\")","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105726,"byte_end":105793,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105798,"byte_end":105806,"line_start":41,"line_end":41,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106157,"byte_end":106165,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"east_opt","qualname":"<FixedOffset>::east_opt","value":"pub fn east_opt(i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105940,"byte_end":106028,"line_start":46,"line_end":46,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106033,"byte_end":106086,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106091,"byte_end":106094,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106099,"byte_end":106145,"line_start":49,"line_end":49,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106907,"byte_end":106911,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"west","qualname":"<FixedOffset>::west","value":"pub fn west(i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106358,"byte_end":106446,"line_start":58,"line_end":58,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106451,"byte_end":106504,"line_start":59,"line_end":59,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106509,"byte_end":106512,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106517,"byte_end":106555,"line_start":61,"line_end":61,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106560,"byte_end":106563,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106568,"byte_end":106581,"line_start":63,"line_end":63,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106586,"byte_end":106589,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106594,"byte_end":106602,"line_start":65,"line_end":65,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106607,"byte_end":106647,"line_start":66,"line_end":66,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106652,"byte_end":106672,"line_start":67,"line_end":67,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::west(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106677,"byte_end":106741,"line_start":68,"line_end":68,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106746,"byte_end":106810,"line_start":69,"line_end":69,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00-05:00\")","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106815,"byte_end":106882,"line_start":70,"line_end":70,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":106887,"byte_end":106895,"line_start":71,"line_end":71,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":107246,"byte_end":107254,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"west_opt","qualname":"<FixedOffset>::west_opt","value":"pub fn west_opt(i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":107029,"byte_end":107117,"line_start":76,"line_end":76,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":107122,"byte_end":107175,"line_start":77,"line_end":77,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":107180,"byte_end":107183,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":107188,"byte_end":107234,"line_start":79,"line_end":79,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":107553,"byte_end":107568,"line_start":90,"line_end":90,"column_start":12,"column_end":27},"name":"local_minus_utc","qualname":"<FixedOffset>::local_minus_utc","value":"pub fn local_minus_utc(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from UTC to the local time.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from UTC to the local time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":107448,"byte_end":107527,"line_start":88,"line_end":88,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":107532,"byte_end":107541,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":107730,"byte_end":107745,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"utc_minus_local","qualname":"<FixedOffset>::utc_minus_local","value":"pub fn utc_minus_local(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from the local time to UTC.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":107625,"byte_end":107704,"line_start":94,"line_end":94,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":107709,"byte_end":107718,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1430},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":113022,"byte_end":113025,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"Utc","qualname":"::offset::utc::Utc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The UTC time zone. This is the most efficient time zone when you don't need the local time.\n It is also used as an offset (which is also a dummy type).","sig":null,"attributes":[{"value":"/ The UTC time zone. This is the most efficient time zone when you don't need the local time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112376,"byte_end":112471,"line_start":18,"line_end":18,"column_start":1,"column_end":96}},{"value":"/ It is also used as an offset (which is also a dummy type).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112472,"byte_end":112534,"line_start":19,"line_end":19,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112535,"byte_end":112538,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112539,"byte_end":112596,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ on the UTC struct is the preferred way to construct `DateTime<Utc>`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112597,"byte_end":112668,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/ instances.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112669,"byte_end":112683,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112684,"byte_end":112687,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112688,"byte_end":112701,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112702,"byte_end":112705,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112706,"byte_end":112714,"line_start":27,"line_end":27,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112715,"byte_end":112772,"line_start":28,"line_end":28,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112773,"byte_end":112776,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112777,"byte_end":112859,"line_start":30,"line_end":30,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112860,"byte_end":112863,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112864,"byte_end":112905,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 1, 1), dt);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112906,"byte_end":112963,"line_start":33,"line_end":33,"column_start":1,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":112964,"byte_end":112972,"line_start":34,"line_end":34,"column_start":1,"column_end":9}}]},{"kind":"Mod","id":{"krate":0,"index":279},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23625,"byte_end":23630,"line_start":541,"line_end":541,"column_start":9,"column_end":14},"name":"naive","qualname":"::naive","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":410},{"krate":0,"index":530},{"krate":0,"index":610},{"krate":0,"index":623},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711}],"decl_id":null,"docs":" Date and time types unconcerned with timezones.","sig":null,"attributes":[{"value":"/ Date and time types unconcerned with timezones.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23637,"byte_end":23688,"line_start":542,"line_end":542,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23693,"byte_end":23696,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ They are primarily building blocks for other types","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23701,"byte_end":23755,"line_start":544,"line_end":544,"column_start":5,"column_end":59}},{"value":"/ (e.g. [`TimeZone`](../offset/trait.TimeZone.html)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23760,"byte_end":23815,"line_start":545,"line_end":545,"column_start":5,"column_end":60}},{"value":"/ but can be also used for the simpler date and time handling.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23820,"byte_end":23884,"line_start":546,"line_end":546,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1441},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":119139,"byte_end":119148,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"name":"NaiveDate","qualname":"::naive::date::NaiveDate","value":"NaiveDate {  }","parent":null,"children":[{"krate":0,"index":1442}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.\n Allows for every [proleptic Gregorian date](#calendar-date)\n from Jan 1, 262145 BCE to Dec 31, 262143 CE.\n Also supports the conversion from ISO 8601 ordinal and week date.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date without timezone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":116561,"byte_end":116605,"line_start":50,"line_end":50,"column_start":1,"column_end":45}},{"value":"/ Allows for every [proleptic Gregorian date](#calendar-date)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":116606,"byte_end":116669,"line_start":51,"line_end":51,"column_start":1,"column_end":64}},{"value":"/ from Jan 1, 262145 BCE to Dec 31, 262143 CE.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":116670,"byte_end":116718,"line_start":52,"line_end":52,"column_start":1,"column_end":49}},{"value":"/ Also supports the conversion from ISO 8601 ordinal and week date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":116719,"byte_end":116788,"line_start":53,"line_end":53,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":116789,"byte_end":116792,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Calendar Date","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":116793,"byte_end":116812,"line_start":55,"line_end":55,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":116813,"byte_end":116816,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **calendar date** follows the proleptic Gregorian calendar.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":116817,"byte_end":116893,"line_start":57,"line_end":57,"column_start":1,"column_end":77}},{"value":"/ It is like a normal civil calendar but note some slight differences:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":116894,"byte_end":116966,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":116967,"byte_end":116970,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ * Dates before the Gregorian calendar's inception in 1582 are defined via the extrapolation.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":116971,"byte_end":117067,"line_start":60,"line_end":60,"column_start":1,"column_end":97}},{"value":"/   Be careful, as historical dates are often noted in the Julian calendar and others","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117068,"byte_end":117155,"line_start":61,"line_end":61,"column_start":1,"column_end":88}},{"value":"/   and the transition to Gregorian may differ across countries (as late as early 20C).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117156,"byte_end":117245,"line_start":62,"line_end":62,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117246,"byte_end":117249,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/   (Some example: Both Shakespeare from Britain and Cervantes from Spain seemingly died","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117250,"byte_end":117340,"line_start":64,"line_end":64,"column_start":1,"column_end":91}},{"value":"/   on the same calendar date---April 23, 1616---but in the different calendar.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117341,"byte_end":117422,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/   Britain used the Julian calendar at that time, so Shakespeare's death is later.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117423,"byte_end":117509,"line_start":66,"line_end":66,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117510,"byte_end":117513,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ * ISO 8601 calendars has the year 0, which is 1 BCE (a year before 1 CE).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117514,"byte_end":117591,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/   If you need a typical BCE/BC and CE/AD notation for year numbers,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117592,"byte_end":117663,"line_start":69,"line_end":69,"column_start":1,"column_end":72}},{"value":"/   use the [`Datelike::year_ce`](../trait.Datelike.html#method.year_ce) method.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117664,"byte_end":117746,"line_start":70,"line_end":70,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117747,"byte_end":117750,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Week Date","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117751,"byte_end":117766,"line_start":72,"line_end":72,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117767,"byte_end":117770,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **week date** is a triple of year number, week number","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117771,"byte_end":117841,"line_start":74,"line_end":74,"column_start":1,"column_end":71}},{"value":"/ and [day of the week](../enum.Weekday.html) with the following rules:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117842,"byte_end":117915,"line_start":75,"line_end":75,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117916,"byte_end":117919,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ * A week consists of Monday through Sunday, and is always numbered within some year.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":117920,"byte_end":118008,"line_start":77,"line_end":77,"column_start":1,"column_end":89}},{"value":"/   The week number ranges from 1 to 52 or 53 depending on the year.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118009,"byte_end":118079,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118080,"byte_end":118083,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ * The week 1 of given year is defined as the first week containing January 4 of that year,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118084,"byte_end":118178,"line_start":80,"line_end":80,"column_start":1,"column_end":95}},{"value":"/   or equivalently, the first week containing four or more days in that year.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118179,"byte_end":118259,"line_start":81,"line_end":81,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118260,"byte_end":118263,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ * The year number in the week date may *not* correspond to the actual Gregorian year.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118264,"byte_end":118353,"line_start":83,"line_end":83,"column_start":1,"column_end":90}},{"value":"/   For example, January 3, 2016 (Sunday) was on the last (53rd) week of 2015.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118354,"byte_end":118434,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118435,"byte_end":118438,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ Chrono's date types default to the ISO 8601 [calendar date](#calendar-date),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118439,"byte_end":118519,"line_start":86,"line_end":86,"column_start":1,"column_end":81}},{"value":"/ but [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118520,"byte_end":118596,"line_start":87,"line_end":87,"column_start":1,"column_end":77}},{"value":"/ [`Datelike::weekday`](../trait.Datelike.html#tymethod.weekday) methods","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118597,"byte_end":118671,"line_start":88,"line_end":88,"column_start":1,"column_end":75}},{"value":"/ can be used to get the corresponding week date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118672,"byte_end":118723,"line_start":89,"line_end":89,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118724,"byte_end":118727,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ # Ordinal Date","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118728,"byte_end":118746,"line_start":91,"line_end":91,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118747,"byte_end":118750,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **ordinal date** is a pair of year number and day of the year (\"ordinal\").","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118751,"byte_end":118842,"line_start":93,"line_end":93,"column_start":1,"column_end":92}},{"value":"/ The ordinal number ranges from 1 to 365 or 366 depending on the year.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118843,"byte_end":118916,"line_start":94,"line_end":94,"column_start":1,"column_end":74}},{"value":"/ The year number is the same as that of the [calendar date](#calendar-date).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118917,"byte_end":118996,"line_start":95,"line_end":95,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":118997,"byte_end":119000,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ This is currently the internal format of Chrono's date types.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":119001,"byte_end":119066,"line_start":97,"line_end":97,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":318},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":119267,"byte_end":119275,"line_start":104,"line_end":104,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::naive::date::MIN_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDate` (January 1, 262145 BCE).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":119195,"byte_end":119256,"line_start":103,"line_end":103,"column_start":1,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":319},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":119425,"byte_end":119433,"line_start":106,"line_end":106,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::naive::date::MAX_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDate` (December 31, 262143 CE).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":119352,"byte_end":119414,"line_start":105,"line_end":105,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121797,"byte_end":121805,"line_start":172,"line_end":172,"column_start":12,"column_end":20},"name":"from_ymd","qualname":"<NaiveDate>::from_ymd","value":"pub fn from_ymd(i32, u32, u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121067,"byte_end":121135,"line_start":152,"line_end":152,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121140,"byte_end":121166,"line_start":153,"line_end":153,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121171,"byte_end":121174,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121179,"byte_end":121241,"line_start":155,"line_end":155,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121246,"byte_end":121249,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121254,"byte_end":121267,"line_start":157,"line_end":157,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121272,"byte_end":121275,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121280,"byte_end":121288,"line_start":159,"line_end":159,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121293,"byte_end":121340,"line_start":160,"line_end":160,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121345,"byte_end":121348,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 3, 14);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121353,"byte_end":121398,"line_start":162,"line_end":162,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121403,"byte_end":121434,"line_start":163,"line_end":163,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121439,"byte_end":121468,"line_start":164,"line_end":164,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121473,"byte_end":121501,"line_start":165,"line_end":165,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121506,"byte_end":121553,"line_start":166,"line_end":166,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121558,"byte_end":121600,"line_start":167,"line_end":167,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121605,"byte_end":121645,"line_start":168,"line_end":168,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121650,"byte_end":121692,"line_start":169,"line_end":169,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121697,"byte_end":121772,"line_start":170,"line_end":170,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121777,"byte_end":121785,"line_start":171,"line_end":171,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122656,"byte_end":122668,"line_start":195,"line_end":195,"column_start":12,"column_end":24},"name":"from_ymd_opt","qualname":"<NaiveDate>::from_ymd_opt","value":"pub fn from_ymd_opt(i32, u32, u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":121954,"byte_end":122022,"line_start":176,"line_end":176,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122027,"byte_end":122053,"line_start":177,"line_end":177,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122058,"byte_end":122061,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122066,"byte_end":122136,"line_start":179,"line_end":179,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122141,"byte_end":122144,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122149,"byte_end":122162,"line_start":181,"line_end":181,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122167,"byte_end":122170,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122175,"byte_end":122183,"line_start":183,"line_end":183,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122188,"byte_end":122214,"line_start":184,"line_end":184,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122219,"byte_end":122222,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ let from_ymd_opt = NaiveDate::from_ymd_opt;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122227,"byte_end":122274,"line_start":186,"line_end":186,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122279,"byte_end":122282,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ assert!(from_ymd_opt(2015, 3, 14).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122287,"byte_end":122336,"line_start":188,"line_end":188,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 0, 14).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122341,"byte_end":122390,"line_start":189,"line_end":189,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 2, 29).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122395,"byte_end":122444,"line_start":190,"line_end":190,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(-4, 2, 29).is_some()); // 5 BCE is a leap year","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122449,"byte_end":122520,"line_start":191,"line_end":191,"column_start":5,"column_end":76}},{"value":"/ assert!(from_ymd_opt(400000, 1, 1).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122525,"byte_end":122575,"line_start":192,"line_end":192,"column_start":5,"column_end":55}},{"value":"/ assert!(from_ymd_opt(-400000, 1, 1).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122580,"byte_end":122631,"line_start":193,"line_end":193,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122636,"byte_end":122644,"line_start":194,"line_end":194,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123562,"byte_end":123569,"line_start":220,"line_end":220,"column_start":12,"column_end":19},"name":"from_yo","qualname":"<NaiveDate>::from_yo","value":"pub fn from_yo(i32, u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122847,"byte_end":122913,"line_start":200,"line_end":200,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122918,"byte_end":122949,"line_start":201,"line_end":201,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122954,"byte_end":122957,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid day of year.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":122962,"byte_end":123025,"line_start":203,"line_end":203,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123030,"byte_end":123033,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123038,"byte_end":123051,"line_start":205,"line_end":205,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123056,"byte_end":123059,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123064,"byte_end":123072,"line_start":207,"line_end":207,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123077,"byte_end":123124,"line_start":208,"line_end":208,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123129,"byte_end":123132,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_yo(2015, 73);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123137,"byte_end":123178,"line_start":210,"line_end":210,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(d.ordinal(), 73);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123183,"byte_end":123215,"line_start":211,"line_end":211,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123220,"byte_end":123251,"line_start":212,"line_end":212,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123256,"byte_end":123285,"line_start":213,"line_end":213,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123290,"byte_end":123318,"line_start":214,"line_end":214,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123323,"byte_end":123365,"line_start":215,"line_end":215,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123370,"byte_end":123410,"line_start":216,"line_end":216,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123415,"byte_end":123457,"line_start":217,"line_end":217,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123462,"byte_end":123537,"line_start":218,"line_end":218,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123542,"byte_end":123550,"line_start":219,"line_end":219,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124439,"byte_end":124450,"line_start":244,"line_end":244,"column_start":12,"column_end":23},"name":"from_yo_opt","qualname":"<NaiveDate>::from_yo_opt","value":"pub fn from_yo_opt(i32, u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123706,"byte_end":123772,"line_start":224,"line_end":224,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123777,"byte_end":123808,"line_start":225,"line_end":225,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123813,"byte_end":123816,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid day of year.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123821,"byte_end":123892,"line_start":227,"line_end":227,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123897,"byte_end":123900,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123905,"byte_end":123918,"line_start":229,"line_end":229,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123923,"byte_end":123926,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123931,"byte_end":123939,"line_start":231,"line_end":231,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123944,"byte_end":123970,"line_start":232,"line_end":232,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123975,"byte_end":123978,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ let from_yo_opt = NaiveDate::from_yo_opt;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":123983,"byte_end":124028,"line_start":234,"line_end":234,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124033,"byte_end":124036,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ assert!(from_yo_opt(2015, 100).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124041,"byte_end":124087,"line_start":236,"line_end":236,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 0).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124092,"byte_end":124136,"line_start":237,"line_end":237,"column_start":5,"column_end":49}},{"value":"/ assert!(from_yo_opt(2015, 365).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124141,"byte_end":124187,"line_start":238,"line_end":238,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 366).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124192,"byte_end":124238,"line_start":239,"line_end":239,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-4, 366).is_some()); // 5 BCE is a leap year","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124243,"byte_end":124311,"line_start":240,"line_end":240,"column_start":5,"column_end":73}},{"value":"/ assert!(from_yo_opt(400000, 1).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124316,"byte_end":124362,"line_start":241,"line_end":241,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-400000, 1).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124367,"byte_end":124414,"line_start":242,"line_end":242,"column_start":5,"column_end":52}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124419,"byte_end":124427,"line_start":243,"line_end":243,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125456,"byte_end":125467,"line_start":270,"line_end":270,"column_start":12,"column_end":23},"name":"from_isoywd","qualname":"<NaiveDate>::from_isoywd","value":"pub fn from_isoywd(i32, u32, Weekday) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124616,"byte_end":124680,"line_start":249,"line_end":249,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124685,"byte_end":124729,"line_start":250,"line_end":250,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124734,"byte_end":124810,"line_start":251,"line_end":251,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124815,"byte_end":124818,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124823,"byte_end":124886,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124891,"byte_end":124894,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124899,"byte_end":124912,"line_start":255,"line_end":255,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124917,"byte_end":124920,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124925,"byte_end":124933,"line_start":257,"line_end":257,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124938,"byte_end":124985,"line_start":258,"line_end":258,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124990,"byte_end":124993,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 11, Weekday::Sat);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":124998,"byte_end":125057,"line_start":260,"line_end":260,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125062,"byte_end":125104,"line_start":261,"line_end":261,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125109,"byte_end":125149,"line_start":262,"line_end":262,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125154,"byte_end":125196,"line_start":263,"line_end":263,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125201,"byte_end":125232,"line_start":264,"line_end":264,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125237,"byte_end":125266,"line_start":265,"line_end":265,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125271,"byte_end":125299,"line_start":266,"line_end":266,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125304,"byte_end":125351,"line_start":267,"line_end":267,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125356,"byte_end":125431,"line_start":268,"line_end":268,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125436,"byte_end":125444,"line_start":269,"line_end":269,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":127830,"byte_end":127845,"line_start":318,"line_end":318,"column_start":12,"column_end":27},"name":"from_isoywd_opt","qualname":"<NaiveDate>::from_isoywd_opt","value":"pub fn from_isoywd_opt(i32, u32, Weekday) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125629,"byte_end":125693,"line_start":274,"line_end":274,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125698,"byte_end":125742,"line_start":275,"line_end":275,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125747,"byte_end":125823,"line_start":276,"line_end":276,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125828,"byte_end":125831,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125836,"byte_end":125907,"line_start":278,"line_end":278,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125912,"byte_end":125915,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125920,"byte_end":125933,"line_start":280,"line_end":280,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125938,"byte_end":125941,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125946,"byte_end":125954,"line_start":282,"line_end":282,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":125959,"byte_end":125996,"line_start":283,"line_end":283,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126001,"byte_end":126004,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126009,"byte_end":126048,"line_start":285,"line_end":285,"column_start":5,"column_end":44}},{"value":"/ let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126053,"byte_end":126106,"line_start":286,"line_end":286,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126111,"byte_end":126114,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 0, Weekday::Sun), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126119,"byte_end":126180,"line_start":288,"line_end":288,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 10, Weekday::Sun), Some(from_ymd(2015, 3, 8)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126185,"byte_end":126269,"line_start":289,"line_end":289,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 30, Weekday::Mon), Some(from_ymd(2015, 7, 20)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126274,"byte_end":126359,"line_start":290,"line_end":290,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 60, Weekday::Mon), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126364,"byte_end":126426,"line_start":291,"line_end":291,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126431,"byte_end":126434,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(400000, 10, Weekday::Fri), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126439,"byte_end":126503,"line_start":293,"line_end":293,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(from_isoywd_opt(-400000, 10, Weekday::Sat), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126508,"byte_end":126573,"line_start":294,"line_end":294,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126578,"byte_end":126586,"line_start":295,"line_end":295,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126591,"byte_end":126594,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ The year number of ISO week date may differ from that of the calendar date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126599,"byte_end":126678,"line_start":297,"line_end":297,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126683,"byte_end":126686,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126691,"byte_end":126699,"line_start":299,"line_end":299,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126704,"byte_end":126743,"line_start":300,"line_end":300,"column_start":5,"column_end":44}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126748,"byte_end":126789,"line_start":301,"line_end":301,"column_start":5,"column_end":46}},{"value":"/ # let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126794,"byte_end":126849,"line_start":302,"line_end":302,"column_start":5,"column_end":60}},{"value":"/ //           Mo Tu We Th Fr Sa Su","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126854,"byte_end":126891,"line_start":303,"line_end":303,"column_start":5,"column_end":42}},{"value":"/ // 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126896,"byte_end":126961,"line_start":304,"line_end":304,"column_start":5,"column_end":70}},{"value":"/ // 2015-W01  29 30 31  1  2  3  4 <- so this is the first week","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":126966,"byte_end":127032,"line_start":305,"line_end":305,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 52, Weekday::Sun), Some(from_ymd(2014, 12, 28)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":127037,"byte_end":127123,"line_start":306,"line_end":306,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 53, Weekday::Mon), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":127128,"byte_end":127190,"line_start":307,"line_end":307,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 1, Weekday::Mon), Some(from_ymd(2014, 12, 29)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":127195,"byte_end":127280,"line_start":308,"line_end":308,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":127285,"byte_end":127288,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ // 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":127293,"byte_end":127358,"line_start":310,"line_end":310,"column_start":5,"column_end":70}},{"value":"/ // 2015-W53  28 29 30 31  1  2  3 <- so this is the last week","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":127363,"byte_end":127428,"line_start":311,"line_end":311,"column_start":5,"column_end":70}},{"value":"/ // 2016-W01   4  5  6  7  8  9 10","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":127433,"byte_end":127470,"line_start":312,"line_end":312,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 52, Weekday::Sun), Some(from_ymd(2015, 12, 27)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":127475,"byte_end":127561,"line_start":313,"line_end":313,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 53, Weekday::Sun), Some(from_ymd(2016, 1, 3)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":127566,"byte_end":127650,"line_start":314,"line_end":314,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 54, Weekday::Mon), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":127655,"byte_end":127717,"line_start":315,"line_end":315,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2016, 1, Weekday::Mon), Some(from_ymd(2016, 1, 4)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":127722,"byte_end":127805,"line_start":316,"line_end":316,"column_start":5,"column_end":88}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":127810,"byte_end":127818,"line_start":317,"line_end":317,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130788,"byte_end":130809,"line_start":393,"line_end":393,"column_start":12,"column_end":33},"name":"from_num_days_from_ce","qualname":"<NaiveDate>::from_num_days_from_ce","value":"pub fn from_num_days_from_ce(i32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129057,"byte_end":129146,"line_start":349,"line_end":349,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129151,"byte_end":129180,"line_start":350,"line_end":350,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129185,"byte_end":129188,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ Panics if the date is out of range.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129193,"byte_end":129232,"line_start":352,"line_end":352,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129237,"byte_end":129240,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129245,"byte_end":129258,"line_start":354,"line_end":354,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129263,"byte_end":129266,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129271,"byte_end":129279,"line_start":356,"line_end":356,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129284,"byte_end":129331,"line_start":357,"line_end":357,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129336,"byte_end":129339,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_num_days_from_ce(735671);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129344,"byte_end":129397,"line_start":359,"line_end":359,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129402,"byte_end":129477,"line_start":360,"line_end":360,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129482,"byte_end":129513,"line_start":361,"line_end":361,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129518,"byte_end":129547,"line_start":362,"line_end":362,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129552,"byte_end":129580,"line_start":363,"line_end":363,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129585,"byte_end":129632,"line_start":364,"line_end":364,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129637,"byte_end":129679,"line_start":365,"line_end":365,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129684,"byte_end":129724,"line_start":366,"line_end":366,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129729,"byte_end":129771,"line_start":367,"line_end":367,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129776,"byte_end":129784,"line_start":368,"line_end":368,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129789,"byte_end":129792,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ While not directly supported by Chrono,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129797,"byte_end":129840,"line_start":370,"line_end":370,"column_start":5,"column_end":48}},{"value":"/ it is easy to convert from the Julian day number","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129845,"byte_end":129897,"line_start":371,"line_end":371,"column_start":5,"column_end":57}},{"value":"/ (January 1, 4713 BCE in the *Julian* calendar being Day 0)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129902,"byte_end":129964,"line_start":372,"line_end":372,"column_start":5,"column_end":67}},{"value":"/ to Gregorian with this method.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":129969,"byte_end":130003,"line_start":373,"line_end":373,"column_start":5,"column_end":39}},{"value":"/ (Note that this panics when `jd` is out of range.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130008,"byte_end":130062,"line_start":374,"line_end":374,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130067,"byte_end":130070,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130075,"byte_end":130083,"line_start":376,"line_end":376,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130088,"byte_end":130114,"line_start":377,"line_end":377,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130119,"byte_end":130122,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ fn jd_to_date(jd: i32) -> NaiveDate {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130127,"byte_end":130168,"line_start":379,"line_end":379,"column_start":5,"column_end":46}},{"value":"/     // keep in mind that the Julian day number is 0-based","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130173,"byte_end":130234,"line_start":380,"line_end":380,"column_start":5,"column_end":66}},{"value":"/     // while this method requires an 1-based number.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130239,"byte_end":130295,"line_start":381,"line_end":381,"column_start":5,"column_end":61}},{"value":"/     NaiveDate::from_num_days_from_ce(jd - 1721425)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130300,"byte_end":130354,"line_start":382,"line_end":382,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130359,"byte_end":130364,"line_start":383,"line_end":383,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130369,"byte_end":130372,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ // January 1, 4713 BCE in Julian = November 24, 4714 BCE in Gregorian","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130377,"byte_end":130450,"line_start":385,"line_end":385,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(jd_to_date(0), NaiveDate::from_ymd(-4713, 11, 24));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130455,"byte_end":130521,"line_start":386,"line_end":386,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130526,"byte_end":130529,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(jd_to_date(1721426), NaiveDate::from_ymd(1, 1, 1));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130534,"byte_end":130600,"line_start":388,"line_end":388,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(jd_to_date(2450000), NaiveDate::from_ymd(1995, 10, 9));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130605,"byte_end":130675,"line_start":389,"line_end":389,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(jd_to_date(2451545), NaiveDate::from_ymd(2000, 1, 1));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130680,"byte_end":130749,"line_start":390,"line_end":390,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130754,"byte_end":130762,"line_start":391,"line_end":391,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130767,"byte_end":130776,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131758,"byte_end":131783,"line_start":417,"line_end":417,"column_start":12,"column_end":37},"name":"from_num_days_from_ce_opt","qualname":"<NaiveDate>::from_num_days_from_ce_opt","value":"pub fn from_num_days_from_ce_opt(i32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":130926,"byte_end":131015,"line_start":397,"line_end":397,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131020,"byte_end":131049,"line_start":398,"line_end":398,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131054,"byte_end":131057,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the date is out of range.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131062,"byte_end":131109,"line_start":400,"line_end":400,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131114,"byte_end":131117,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131122,"byte_end":131135,"line_start":402,"line_end":402,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131140,"byte_end":131143,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131148,"byte_end":131156,"line_start":404,"line_end":404,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131161,"byte_end":131187,"line_start":405,"line_end":405,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131192,"byte_end":131195,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ let from_ndays_opt = NaiveDate::from_num_days_from_ce_opt;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131200,"byte_end":131262,"line_start":407,"line_end":407,"column_start":5,"column_end":67}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131267,"byte_end":131306,"line_start":408,"line_end":408,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131311,"byte_end":131314,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_ndays_opt(730_000),      Some(from_ymd(1999, 9, 3)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131319,"byte_end":131392,"line_start":410,"line_end":410,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(from_ndays_opt(1),            Some(from_ymd(1, 1, 1)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131397,"byte_end":131467,"line_start":411,"line_end":411,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ndays_opt(0),            Some(from_ymd(0, 12, 31)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131472,"byte_end":131544,"line_start":412,"line_end":412,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(-1),           Some(from_ymd(0, 12, 30)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131549,"byte_end":131621,"line_start":413,"line_end":413,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(100_000_000),  None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131626,"byte_end":131677,"line_start":414,"line_end":414,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(from_ndays_opt(-100_000_000), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131682,"byte_end":131733,"line_start":415,"line_end":415,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":131738,"byte_end":131746,"line_start":416,"line_end":416,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":133493,"byte_end":133514,"line_start":450,"line_end":450,"column_start":12,"column_end":33},"name":"from_weekday_of_month","qualname":"<NaiveDate>::from_weekday_of_month","value":"pub fn from_weekday_of_month(i32, u32, Weekday, u8) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132209,"byte_end":132302,"line_start":425,"line_end":425,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132307,"byte_end":132401,"line_start":426,"line_end":426,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132406,"byte_end":132491,"line_start":427,"line_end":427,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132496,"byte_end":132499,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132504,"byte_end":132516,"line_start":429,"line_end":429,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132521,"byte_end":132524,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ The resulting `NaiveDate` is guaranteed to be in `month`.  If `n` is larger than the number","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132529,"byte_end":132624,"line_start":431,"line_end":431,"column_start":5,"column_end":100}},{"value":"/ of `weekday` in `month` (eg. the 6th Friday of March 2017) then this function will panic.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132629,"byte_end":132722,"line_start":432,"line_end":432,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132727,"byte_end":132730,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ `n` is 1-indexed.  Passing `n=0` will cause a panic.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132735,"byte_end":132791,"line_start":434,"line_end":434,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132796,"byte_end":132799,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132804,"byte_end":132817,"line_start":436,"line_end":436,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132822,"byte_end":132825,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132830,"byte_end":132838,"line_start":438,"line_end":438,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132843,"byte_end":132880,"line_start":439,"line_end":439,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132885,"byte_end":132888,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ let from_weekday_of_month = NaiveDate::from_weekday_of_month;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132893,"byte_end":132958,"line_start":441,"line_end":441,"column_start":5,"column_end":70}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":132963,"byte_end":133002,"line_start":442,"line_end":442,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":133007,"byte_end":133010,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Wed, 1), from_ymd(2018, 8, 1));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":133015,"byte_end":133101,"line_start":444,"line_end":444,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 1), from_ymd(2018, 8, 3));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":133106,"byte_end":133192,"line_start":445,"line_end":445,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Tue, 2), from_ymd(2018, 8, 14));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":133197,"byte_end":133284,"line_start":446,"line_end":446,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 4), from_ymd(2018, 8, 24));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":133289,"byte_end":133376,"line_start":447,"line_end":447,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 5), from_ymd(2018, 8, 31));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":133381,"byte_end":133468,"line_start":448,"line_end":448,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":133473,"byte_end":133481,"line_start":449,"line_end":449,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":134389,"byte_end":134414,"line_start":466,"line_end":466,"column_start":12,"column_end":37},"name":"from_weekday_of_month_opt","qualname":"<NaiveDate>::from_weekday_of_month_opt","value":"pub fn from_weekday_of_month_opt(i32, u32, Weekday, u8) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":133687,"byte_end":133780,"line_start":454,"line_end":454,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":133785,"byte_end":133879,"line_start":455,"line_end":455,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":133884,"byte_end":133988,"line_start":456,"line_end":456,"column_start":5,"column_end":109}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":133993,"byte_end":133996,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":134001,"byte_end":134009,"line_start":458,"line_end":458,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":134014,"byte_end":134051,"line_start":459,"line_end":459,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(NaiveDate::from_weekday_of_month_opt(2017, 3, Weekday::Fri, 2),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":134056,"byte_end":134134,"line_start":460,"line_end":460,"column_start":5,"column_end":83}},{"value":"/            NaiveDate::from_ymd_opt(2017, 3, 10))","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":134139,"byte_end":134191,"line_start":461,"line_end":461,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":134196,"byte_end":134204,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":134209,"byte_end":134212,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if `n` out-of-range; ie. if `n` is larger than the number of `weekday` in","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":134217,"byte_end":134309,"line_start":464,"line_end":464,"column_start":5,"column_end":97}},{"value":"/ `month` (eg. the 6th Friday of March 2017), or if `n == 0`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":134314,"byte_end":134377,"line_start":465,"line_end":465,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136434,"byte_end":136448,"line_start":523,"line_end":523,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDate>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDate`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDate`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":134865,"byte_end":134948,"line_start":481,"line_end":481,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":134953,"byte_end":135023,"line_start":482,"line_end":482,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135028,"byte_end":135066,"line_start":483,"line_end":483,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135071,"byte_end":135074,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135079,"byte_end":135092,"line_start":485,"line_end":485,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135097,"byte_end":135100,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135105,"byte_end":135113,"line_start":487,"line_end":487,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135118,"byte_end":135144,"line_start":488,"line_end":488,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135149,"byte_end":135152,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135157,"byte_end":135208,"line_start":490,"line_end":490,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135213,"byte_end":135216,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05\", \"%Y-%m-%d\"),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135221,"byte_end":135277,"line_start":492,"line_end":492,"column_start":5,"column_end":61}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135282,"byte_end":135334,"line_start":493,"line_end":493,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015\", \"%d%b%Y\"),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135339,"byte_end":135391,"line_start":494,"line_end":494,"column_start":5,"column_end":57}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135396,"byte_end":135448,"line_start":495,"line_end":495,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135453,"byte_end":135461,"line_start":496,"line_end":496,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135466,"byte_end":135469,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ Time and offset is ignored for the purpose of parsing.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135474,"byte_end":135532,"line_start":498,"line_end":498,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135537,"byte_end":135540,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135545,"byte_end":135553,"line_start":500,"line_end":500,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135558,"byte_end":135586,"line_start":501,"line_end":501,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135591,"byte_end":135644,"line_start":502,"line_end":502,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135649,"byte_end":135730,"line_start":503,"line_end":503,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135735,"byte_end":135788,"line_start":504,"line_end":504,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135793,"byte_end":135801,"line_start":505,"line_end":505,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135806,"byte_end":135809,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ Out-of-bound dates or insufficient fields are errors.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135814,"byte_end":135871,"line_start":507,"line_end":507,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135876,"byte_end":135879,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135884,"byte_end":135892,"line_start":509,"line_end":509,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135897,"byte_end":135925,"line_start":510,"line_end":510,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135930,"byte_end":135983,"line_start":511,"line_end":511,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"2015/9\", \"%Y/%m\").is_err());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":135988,"byte_end":136044,"line_start":512,"line_end":512,"column_start":5,"column_end":61}},{"value":"/ assert!(parse_from_str(\"2015/9/31\", \"%Y/%m/%d\").is_err());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136049,"byte_end":136111,"line_start":513,"line_end":513,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136116,"byte_end":136124,"line_start":514,"line_end":514,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136129,"byte_end":136132,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136137,"byte_end":136219,"line_start":516,"line_end":516,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136224,"byte_end":136227,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136232,"byte_end":136240,"line_start":518,"line_end":518,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136245,"byte_end":136273,"line_start":519,"line_end":519,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136278,"byte_end":136331,"line_start":520,"line_end":520,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136336,"byte_end":136409,"line_start":521,"line_end":521,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136414,"byte_end":136422,"line_start":522,"line_end":522,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137097,"byte_end":137105,"line_start":544,"line_end":544,"column_start":12,"column_end":20},"name":"and_time","qualname":"<NaiveDate>::and_time","value":"pub fn and_time(&Self, NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136636,"byte_end":136712,"line_start":529,"line_end":529,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136717,"byte_end":136720,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136725,"byte_end":136738,"line_start":531,"line_end":531,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136743,"byte_end":136746,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136751,"byte_end":136759,"line_start":533,"line_end":533,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136764,"byte_end":136818,"line_start":534,"line_end":534,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136823,"byte_end":136826,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136831,"byte_end":136875,"line_start":536,"line_end":536,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136880,"byte_end":136935,"line_start":537,"line_end":537,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136940,"byte_end":136943,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_time(t);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136948,"byte_end":136990,"line_start":539,"line_end":539,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":136995,"byte_end":137024,"line_start":540,"line_end":540,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137029,"byte_end":137058,"line_start":541,"line_end":541,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137063,"byte_end":137071,"line_start":542,"line_end":542,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137076,"byte_end":137085,"line_start":543,"line_end":543,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137921,"byte_end":137928,"line_start":568,"line_end":568,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<NaiveDate>::and_hms","value":"pub fn and_hms(&Self, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137200,"byte_end":137279,"line_start":548,"line_end":548,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137284,"byte_end":137287,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137292,"byte_end":137375,"line_start":550,"line_end":550,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137380,"byte_end":137454,"line_start":551,"line_end":551,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137459,"byte_end":137462,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137467,"byte_end":137516,"line_start":553,"line_end":553,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137521,"byte_end":137524,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137529,"byte_end":137542,"line_start":555,"line_end":555,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137547,"byte_end":137550,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137555,"byte_end":137563,"line_start":557,"line_end":557,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137568,"byte_end":137640,"line_start":558,"line_end":558,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137645,"byte_end":137648,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137653,"byte_end":137697,"line_start":560,"line_end":560,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137702,"byte_end":137705,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms(12, 34, 56);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137710,"byte_end":137760,"line_start":562,"line_end":562,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137765,"byte_end":137797,"line_start":563,"line_end":563,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137802,"byte_end":137845,"line_start":564,"line_end":564,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137850,"byte_end":137882,"line_start":565,"line_end":565,"column_start":5,"column_end":37}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137887,"byte_end":137895,"line_start":566,"line_end":566,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":137900,"byte_end":137909,"line_start":567,"line_end":567,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138814,"byte_end":138825,"line_start":591,"line_end":591,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<NaiveDate>::and_hms_opt","value":"pub fn and_hms_opt(&Self, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138061,"byte_end":138140,"line_start":572,"line_end":572,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138145,"byte_end":138148,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138153,"byte_end":138236,"line_start":574,"line_end":574,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138241,"byte_end":138319,"line_start":575,"line_end":575,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138324,"byte_end":138327,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138332,"byte_end":138389,"line_start":577,"line_end":577,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138394,"byte_end":138397,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138402,"byte_end":138415,"line_start":579,"line_end":579,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138420,"byte_end":138423,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138428,"byte_end":138436,"line_start":581,"line_end":581,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138441,"byte_end":138467,"line_start":582,"line_end":582,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138472,"byte_end":138475,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138480,"byte_end":138524,"line_start":584,"line_end":584,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_opt(12, 34, 56).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138529,"byte_end":138578,"line_start":585,"line_end":585,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(12, 34, 60).is_none()); // use `and_hms_milli_opt` instead","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138583,"byte_end":138667,"line_start":586,"line_end":586,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_opt(12, 60, 56).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138672,"byte_end":138721,"line_start":587,"line_end":587,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(24, 34, 56).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138726,"byte_end":138775,"line_start":588,"line_end":588,"column_start":5,"column_end":54}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138780,"byte_end":138788,"line_start":589,"line_end":589,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138793,"byte_end":138802,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139764,"byte_end":139777,"line_start":616,"line_end":616,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<NaiveDate>::and_hms_milli","value":"pub fn and_hms_milli(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":138982,"byte_end":139074,"line_start":595,"line_end":595,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139079,"byte_end":139082,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139087,"byte_end":139128,"line_start":597,"line_end":597,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139133,"byte_end":139223,"line_start":598,"line_end":598,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139228,"byte_end":139231,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139236,"byte_end":139298,"line_start":600,"line_end":600,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139303,"byte_end":139306,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139311,"byte_end":139324,"line_start":602,"line_end":602,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139329,"byte_end":139332,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139337,"byte_end":139345,"line_start":604,"line_end":604,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139350,"byte_end":139422,"line_start":605,"line_end":605,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139427,"byte_end":139430,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139435,"byte_end":139479,"line_start":607,"line_end":607,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139484,"byte_end":139487,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_milli(12, 34, 56, 789);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139492,"byte_end":139553,"line_start":609,"line_end":609,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139558,"byte_end":139590,"line_start":610,"line_end":610,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139595,"byte_end":139638,"line_start":611,"line_end":611,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139643,"byte_end":139675,"line_start":612,"line_end":612,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_000_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139680,"byte_end":139725,"line_start":613,"line_end":613,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139730,"byte_end":139738,"line_start":614,"line_end":614,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139743,"byte_end":139752,"line_start":615,"line_end":615,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140850,"byte_end":140867,"line_start":641,"line_end":641,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<NaiveDate>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":139935,"byte_end":140027,"line_start":620,"line_end":620,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140032,"byte_end":140035,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140040,"byte_end":140081,"line_start":622,"line_end":622,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140086,"byte_end":140176,"line_start":623,"line_end":623,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140181,"byte_end":140184,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140189,"byte_end":140259,"line_start":625,"line_end":625,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140264,"byte_end":140267,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140272,"byte_end":140285,"line_start":627,"line_end":627,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140290,"byte_end":140293,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140298,"byte_end":140306,"line_start":629,"line_end":629,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140311,"byte_end":140337,"line_start":630,"line_end":630,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140342,"byte_end":140345,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140350,"byte_end":140394,"line_start":632,"line_end":632,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 56,   789).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140399,"byte_end":140461,"line_start":633,"line_end":633,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 1_789).is_some()); // leap second","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140466,"byte_end":140543,"line_start":634,"line_end":634,"column_start":5,"column_end":82}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 2_789).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140548,"byte_end":140610,"line_start":635,"line_end":635,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 60,   789).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140615,"byte_end":140677,"line_start":636,"line_end":636,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 60, 56,   789).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140682,"byte_end":140744,"line_start":637,"line_end":637,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(24, 34, 56,   789).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140749,"byte_end":140811,"line_start":638,"line_end":638,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140816,"byte_end":140824,"line_start":639,"line_end":639,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":140829,"byte_end":140838,"line_start":640,"line_end":640,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141886,"byte_end":141899,"line_start":672,"line_end":672,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<NaiveDate>::and_hms_micro","value":"pub fn and_hms_micro(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141096,"byte_end":141188,"line_start":651,"line_end":651,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141193,"byte_end":141196,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141201,"byte_end":141246,"line_start":653,"line_end":653,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141251,"byte_end":141341,"line_start":654,"line_end":654,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141346,"byte_end":141349,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141354,"byte_end":141416,"line_start":656,"line_end":656,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141421,"byte_end":141424,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141429,"byte_end":141442,"line_start":658,"line_end":658,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141447,"byte_end":141450,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141455,"byte_end":141463,"line_start":660,"line_end":660,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141468,"byte_end":141540,"line_start":661,"line_end":661,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141545,"byte_end":141548,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141553,"byte_end":141597,"line_start":663,"line_end":663,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141602,"byte_end":141605,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_micro(12, 34, 56, 789_012);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141610,"byte_end":141675,"line_start":665,"line_end":665,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141680,"byte_end":141712,"line_start":666,"line_end":666,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141717,"byte_end":141760,"line_start":667,"line_end":667,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141765,"byte_end":141797,"line_start":668,"line_end":668,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141802,"byte_end":141847,"line_start":669,"line_end":669,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141852,"byte_end":141860,"line_start":670,"line_end":670,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":141865,"byte_end":141874,"line_start":671,"line_end":671,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143000,"byte_end":143017,"line_start":697,"line_end":697,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<NaiveDate>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142057,"byte_end":142149,"line_start":676,"line_end":676,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142154,"byte_end":142157,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142162,"byte_end":142207,"line_start":678,"line_end":678,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142212,"byte_end":142302,"line_start":679,"line_end":679,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142307,"byte_end":142310,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142315,"byte_end":142385,"line_start":681,"line_end":681,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142390,"byte_end":142393,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142398,"byte_end":142411,"line_start":683,"line_end":683,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142416,"byte_end":142419,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142424,"byte_end":142432,"line_start":685,"line_end":685,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142437,"byte_end":142463,"line_start":686,"line_end":686,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142468,"byte_end":142471,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142476,"byte_end":142520,"line_start":688,"line_end":688,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 56,   789_012).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142525,"byte_end":142591,"line_start":689,"line_end":689,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 1_789_012).is_some()); // leap second","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142596,"byte_end":142677,"line_start":690,"line_end":690,"column_start":5,"column_end":86}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 2_789_012).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142682,"byte_end":142748,"line_start":691,"line_end":691,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 60,   789_012).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142753,"byte_end":142819,"line_start":692,"line_end":692,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 60, 56,   789_012).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142824,"byte_end":142890,"line_start":693,"line_end":693,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(24, 34, 56,   789_012).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142895,"byte_end":142961,"line_start":694,"line_end":694,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142966,"byte_end":142974,"line_start":695,"line_end":695,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":142979,"byte_end":142988,"line_start":696,"line_end":696,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144040,"byte_end":144052,"line_start":728,"line_end":728,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<NaiveDate>::and_hms_nano","value":"pub fn and_hms_nano(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143246,"byte_end":143337,"line_start":707,"line_end":707,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143342,"byte_end":143345,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143350,"byte_end":143398,"line_start":709,"line_end":709,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143403,"byte_end":143493,"line_start":710,"line_end":710,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143498,"byte_end":143501,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143506,"byte_end":143567,"line_start":712,"line_end":712,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143572,"byte_end":143575,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143580,"byte_end":143593,"line_start":714,"line_end":714,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143598,"byte_end":143601,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143606,"byte_end":143614,"line_start":716,"line_end":716,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143619,"byte_end":143691,"line_start":717,"line_end":717,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143696,"byte_end":143699,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143704,"byte_end":143748,"line_start":719,"line_end":719,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143753,"byte_end":143756,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_nano(12, 34, 56, 789_012_345);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143761,"byte_end":143829,"line_start":721,"line_end":721,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143834,"byte_end":143866,"line_start":722,"line_end":722,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143871,"byte_end":143914,"line_start":723,"line_end":723,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143919,"byte_end":143951,"line_start":724,"line_end":724,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_345);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":143956,"byte_end":144001,"line_start":725,"line_end":725,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144006,"byte_end":144014,"line_start":726,"line_end":726,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144019,"byte_end":144028,"line_start":727,"line_end":727,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":145169,"byte_end":145185,"line_start":753,"line_end":753,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<NaiveDate>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144207,"byte_end":144298,"line_start":732,"line_end":732,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144303,"byte_end":144306,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144311,"byte_end":144359,"line_start":734,"line_end":734,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144364,"byte_end":144454,"line_start":735,"line_end":735,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144459,"byte_end":144462,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144467,"byte_end":144536,"line_start":737,"line_end":737,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144541,"byte_end":144544,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144549,"byte_end":144562,"line_start":739,"line_end":739,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144567,"byte_end":144570,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144575,"byte_end":144583,"line_start":741,"line_end":741,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144588,"byte_end":144614,"line_start":742,"line_end":742,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144619,"byte_end":144622,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144627,"byte_end":144671,"line_start":744,"line_end":744,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 56,   789_012_345).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144676,"byte_end":144745,"line_start":745,"line_end":745,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 1_789_012_345).is_some()); // leap second","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144750,"byte_end":144834,"line_start":746,"line_end":746,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 2_789_012_345).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144839,"byte_end":144908,"line_start":747,"line_end":747,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 60,   789_012_345).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144913,"byte_end":144982,"line_start":748,"line_end":748,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 60, 56,   789_012_345).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":144987,"byte_end":145056,"line_start":749,"line_end":749,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(24, 34, 56,   789_012_345).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":145061,"byte_end":145130,"line_start":750,"line_end":750,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":145135,"byte_end":145143,"line_start":751,"line_end":751,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":145148,"byte_end":145157,"line_start":752,"line_end":752,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":146877,"byte_end":146881,"line_start":810,"line_end":810,"column_start":12,"column_end":16},"name":"succ","qualname":"<NaiveDate>::succ","value":"pub fn succ(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":146345,"byte_end":146400,"line_start":796,"line_end":796,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":146405,"byte_end":146408,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":146413,"byte_end":146467,"line_start":798,"line_end":798,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":146472,"byte_end":146475,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":146480,"byte_end":146493,"line_start":800,"line_end":800,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":146498,"byte_end":146501,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":146506,"byte_end":146514,"line_start":802,"line_end":802,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":146519,"byte_end":146545,"line_start":803,"line_end":803,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":146550,"byte_end":146553,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6,  3).succ(), NaiveDate::from_ymd(2015, 6, 4));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":146558,"byte_end":146648,"line_start":805,"line_end":805,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6, 30).succ(), NaiveDate::from_ymd(2015, 7, 1));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":146653,"byte_end":146743,"line_start":806,"line_end":806,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 12, 31).succ(), NaiveDate::from_ymd(2016, 1, 1));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":146748,"byte_end":146838,"line_start":807,"line_end":807,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":146843,"byte_end":146851,"line_start":808,"line_end":808,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":146856,"byte_end":146865,"line_start":809,"line_end":809,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147423,"byte_end":147431,"line_start":829,"line_end":829,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<NaiveDate>::succ_opt","value":"pub fn succ_opt(&Self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":146962,"byte_end":147017,"line_start":814,"line_end":814,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147022,"byte_end":147025,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147030,"byte_end":147092,"line_start":816,"line_end":816,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147097,"byte_end":147100,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147105,"byte_end":147118,"line_start":818,"line_end":818,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147123,"byte_end":147126,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147131,"byte_end":147139,"line_start":820,"line_end":820,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147144,"byte_end":147170,"line_start":821,"line_end":821,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147175,"byte_end":147207,"line_start":822,"line_end":822,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147212,"byte_end":147215,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).succ_opt(),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147220,"byte_end":147278,"line_start":824,"line_end":824,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 4)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147283,"byte_end":147337,"line_start":825,"line_end":825,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MAX_DATE.succ_opt(), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147342,"byte_end":147384,"line_start":826,"line_end":826,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147389,"byte_end":147397,"line_start":827,"line_end":827,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147402,"byte_end":147411,"line_start":828,"line_end":828,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148108,"byte_end":148112,"line_start":847,"line_end":847,"column_start":12,"column_end":16},"name":"pred","qualname":"<NaiveDate>::pred","value":"pub fn pred(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147571,"byte_end":147630,"line_start":833,"line_end":833,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147635,"byte_end":147638,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147643,"byte_end":147698,"line_start":835,"line_end":835,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147703,"byte_end":147706,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147711,"byte_end":147724,"line_start":837,"line_end":837,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147729,"byte_end":147732,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147737,"byte_end":147745,"line_start":839,"line_end":839,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147750,"byte_end":147776,"line_start":840,"line_end":840,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147781,"byte_end":147784,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred(), NaiveDate::from_ymd(2015,  6,  2));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147789,"byte_end":147879,"line_start":842,"line_end":842,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 1).pred(), NaiveDate::from_ymd(2015,  5, 31));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147884,"byte_end":147974,"line_start":843,"line_end":843,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).pred(), NaiveDate::from_ymd(2014, 12, 31));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":147979,"byte_end":148069,"line_start":844,"line_end":844,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148074,"byte_end":148082,"line_start":845,"line_end":845,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148087,"byte_end":148096,"line_start":846,"line_end":846,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148659,"byte_end":148667,"line_start":866,"line_end":866,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<NaiveDate>::pred_opt","value":"pub fn pred_opt(&Self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148193,"byte_end":148252,"line_start":851,"line_end":851,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148257,"byte_end":148260,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148265,"byte_end":148328,"line_start":853,"line_end":853,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148333,"byte_end":148336,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148341,"byte_end":148354,"line_start":855,"line_end":855,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148359,"byte_end":148362,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148367,"byte_end":148375,"line_start":857,"line_end":857,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148380,"byte_end":148406,"line_start":858,"line_end":858,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148411,"byte_end":148443,"line_start":859,"line_end":859,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148448,"byte_end":148451,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred_opt(),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148456,"byte_end":148514,"line_start":861,"line_end":861,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 2)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148519,"byte_end":148573,"line_start":862,"line_end":862,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MIN_DATE.pred_opt(), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148578,"byte_end":148620,"line_start":863,"line_end":863,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148625,"byte_end":148633,"line_start":864,"line_end":864,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148638,"byte_end":148647,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":149679,"byte_end":149697,"line_start":891,"line_end":891,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDate>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `days` part of given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds the `days` part of given `Duration` to the current date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148809,"byte_end":148874,"line_start":870,"line_end":870,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148879,"byte_end":148882,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148887,"byte_end":148938,"line_start":872,"line_end":872,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148943,"byte_end":148946,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148951,"byte_end":148964,"line_start":874,"line_end":874,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148969,"byte_end":148972,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148977,"byte_end":148985,"line_start":876,"line_end":876,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":148990,"byte_end":149028,"line_start":877,"line_end":877,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":149033,"byte_end":149071,"line_start":878,"line_end":878,"column_start":5,"column_end":43}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":149076,"byte_end":149108,"line_start":879,"line_end":879,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":149113,"byte_end":149116,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":149121,"byte_end":149165,"line_start":881,"line_end":881,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(40)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":149170,"byte_end":149226,"line_start":882,"line_end":882,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":149231,"byte_end":149287,"line_start":883,"line_end":883,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-40)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":149292,"byte_end":149349,"line_start":884,"line_end":884,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":149354,"byte_end":149409,"line_start":885,"line_end":885,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":149414,"byte_end":149488,"line_start":886,"line_end":886,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":149493,"byte_end":149568,"line_start":887,"line_end":887,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MAX_DATE.checked_add_signed(Duration::days(1)), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":149573,"byte_end":149642,"line_start":888,"line_end":888,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":149647,"byte_end":149654,"line_start":889,"line_end":889,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":149659,"byte_end":149667,"line_start":890,"line_end":890,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":151268,"byte_end":151286,"line_start":925,"line_end":925,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDate>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the `days` part of given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts the `days` part of given `Duration` from the current date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":150391,"byte_end":150463,"line_start":904,"line_end":904,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":150468,"byte_end":150471,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":150476,"byte_end":150527,"line_start":906,"line_end":906,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":150532,"byte_end":150535,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":150540,"byte_end":150553,"line_start":908,"line_end":908,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":150558,"byte_end":150561,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":150566,"byte_end":150574,"line_start":910,"line_end":910,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":150579,"byte_end":150617,"line_start":911,"line_end":911,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":150622,"byte_end":150660,"line_start":912,"line_end":912,"column_start":5,"column_end":43}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":150665,"byte_end":150697,"line_start":913,"line_end":913,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":150702,"byte_end":150705,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":150710,"byte_end":150754,"line_start":915,"line_end":915,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(40)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":150759,"byte_end":150815,"line_start":916,"line_end":916,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":150820,"byte_end":150875,"line_start":917,"line_end":917,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-40)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":150880,"byte_end":150937,"line_start":918,"line_end":918,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":150942,"byte_end":150998,"line_start":919,"line_end":919,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":151003,"byte_end":151077,"line_start":920,"line_end":920,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":151082,"byte_end":151157,"line_start":921,"line_end":921,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MIN_DATE.checked_sub_signed(Duration::days(1)), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":151162,"byte_end":151231,"line_start":922,"line_end":922,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":151236,"byte_end":151243,"line_start":923,"line_end":923,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":151248,"byte_end":151256,"line_start":924,"line_end":924,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":153150,"byte_end":153171,"line_start":962,"line_end":962,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDate>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveDate) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDate` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDate` from the current date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":151980,"byte_end":152036,"line_start":938,"line_end":938,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152041,"byte_end":152086,"line_start":939,"line_end":939,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152091,"byte_end":152094,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152099,"byte_end":152146,"line_start":941,"line_end":941,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152151,"byte_end":152210,"line_start":942,"line_end":942,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152215,"byte_end":152218,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152223,"byte_end":152236,"line_start":944,"line_end":944,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152241,"byte_end":152244,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152249,"byte_end":152257,"line_start":946,"line_end":946,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152262,"byte_end":152300,"line_start":947,"line_end":947,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152305,"byte_end":152343,"line_start":948,"line_end":948,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152348,"byte_end":152351,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152356,"byte_end":152395,"line_start":950,"line_end":950,"column_start":5,"column_end":44}},{"value":"/ let since = NaiveDate::signed_duration_since;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152400,"byte_end":152449,"line_start":951,"line_end":951,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152454,"byte_end":152457,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 1)), Duration::zero());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152462,"byte_end":152546,"line_start":953,"line_end":953,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 12, 31)), Duration::days(1));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152551,"byte_end":152638,"line_start":954,"line_end":954,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 2)), Duration::days(-1));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152643,"byte_end":152729,"line_start":955,"line_end":955,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 9, 23)), Duration::days(100));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152734,"byte_end":152822,"line_start":956,"line_end":956,"column_start":5,"column_end":93}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 1, 1)), Duration::days(365));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152827,"byte_end":152914,"line_start":957,"line_end":957,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2010, 1, 1)), Duration::days(365*4 + 1));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":152919,"byte_end":153012,"line_start":958,"line_end":958,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(1614, 1, 1)), Duration::days(365*400 + 97));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":153017,"byte_end":153113,"line_start":959,"line_end":959,"column_start":5,"column_end":101}},{"value":"/ # }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":153118,"byte_end":153125,"line_start":960,"line_end":960,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":153130,"byte_end":153138,"line_start":961,"line_end":961,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157424,"byte_end":157433,"line_start":1071,"line_end":1071,"column_start":12,"column_end":21},"name":"iter_days","qualname":"<NaiveDate>::iter_days","value":"pub fn iter_days(&Self) -> NaiveDateDaysIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that steps by days until the last representable date.","sig":null,"attributes":[{"value":"/ Returns an iterator that steps by days until the last representable date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":156773,"byte_end":156850,"line_start":1049,"line_end":1049,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":156855,"byte_end":156858,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":156863,"byte_end":156876,"line_start":1051,"line_end":1051,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":156881,"byte_end":156884,"line_start":1052,"line_end":1052,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":156889,"byte_end":156896,"line_start":1053,"line_end":1053,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":156901,"byte_end":156929,"line_start":1054,"line_end":1054,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":156934,"byte_end":156937,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ let expected = [","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":156942,"byte_end":156962,"line_start":1056,"line_end":1056,"column_start":5,"column_end":25}},{"value":"/     NaiveDate::from_ymd(2016, 2, 27),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":156967,"byte_end":157008,"line_start":1057,"line_end":1057,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 2, 28),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157013,"byte_end":157054,"line_start":1058,"line_end":1058,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 2, 29),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157059,"byte_end":157100,"line_start":1059,"line_end":1059,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 1),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157105,"byte_end":157145,"line_start":1060,"line_end":1060,"column_start":5,"column_end":45}},{"value":"/ ];","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157150,"byte_end":157156,"line_start":1061,"line_end":1061,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157161,"byte_end":157164,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ let mut count = 0;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157169,"byte_end":157191,"line_start":1063,"line_end":1063,"column_start":5,"column_end":27}},{"value":"/ for (idx, d) in NaiveDate::from_ymd(2016, 2, 27).iter_days().take(4).enumerate() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157196,"byte_end":157282,"line_start":1064,"line_end":1064,"column_start":5,"column_end":91}},{"value":"/    assert_eq!(d, expected[idx]);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157287,"byte_end":157323,"line_start":1065,"line_end":1065,"column_start":5,"column_end":41}},{"value":"/    count += 1;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157328,"byte_end":157346,"line_start":1066,"line_end":1066,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157351,"byte_end":157356,"line_start":1067,"line_end":1067,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(count, 4);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157361,"byte_end":157386,"line_start":1068,"line_end":1068,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157391,"byte_end":157398,"line_start":1069,"line_end":1069,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157403,"byte_end":157412,"line_start":1070,"line_end":1070,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":158179,"byte_end":158189,"line_start":1097,"line_end":1097,"column_start":12,"column_end":22},"name":"iter_weeks","qualname":"<NaiveDate>::iter_weeks","value":"pub fn iter_weeks(&Self) -> NaiveDateWeeksIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that steps by weeks until the last representable date.","sig":null,"attributes":[{"value":"/ Returns an iterator that steps by weeks until the last representable date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157526,"byte_end":157604,"line_start":1075,"line_end":1075,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157609,"byte_end":157612,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157617,"byte_end":157630,"line_start":1077,"line_end":1077,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157635,"byte_end":157638,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157643,"byte_end":157650,"line_start":1079,"line_end":1079,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157655,"byte_end":157683,"line_start":1080,"line_end":1080,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157688,"byte_end":157691,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ let expected = [","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157696,"byte_end":157716,"line_start":1082,"line_end":1082,"column_start":5,"column_end":25}},{"value":"/     NaiveDate::from_ymd(2016, 2, 27),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157721,"byte_end":157762,"line_start":1083,"line_end":1083,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 5),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157767,"byte_end":157807,"line_start":1084,"line_end":1084,"column_start":5,"column_end":45}},{"value":"/     NaiveDate::from_ymd(2016, 3, 12),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157812,"byte_end":157853,"line_start":1085,"line_end":1085,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 19),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157858,"byte_end":157899,"line_start":1086,"line_end":1086,"column_start":5,"column_end":46}},{"value":"/ ];","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157904,"byte_end":157910,"line_start":1087,"line_end":1087,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157915,"byte_end":157918,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ let mut count = 0;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157923,"byte_end":157945,"line_start":1089,"line_end":1089,"column_start":5,"column_end":27}},{"value":"/ for (idx, d) in NaiveDate::from_ymd(2016, 2, 27).iter_weeks().take(4).enumerate() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":157950,"byte_end":158037,"line_start":1090,"line_end":1090,"column_start":5,"column_end":92}},{"value":"/    assert_eq!(d, expected[idx]);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":158042,"byte_end":158078,"line_start":1091,"line_end":1091,"column_start":5,"column_end":41}},{"value":"/    count += 1;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":158083,"byte_end":158101,"line_start":1092,"line_end":1092,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":158106,"byte_end":158111,"line_start":1093,"line_end":1093,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(count, 4);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":158116,"byte_end":158141,"line_start":1094,"line_end":1094,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":158146,"byte_end":158153,"line_start":1095,"line_end":1095,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":158158,"byte_end":158167,"line_start":1096,"line_end":1096,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1464},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":173988,"byte_end":174009,"line_start":1562,"line_end":1562,"column_start":12,"column_end":33},"name":"NaiveDateDaysIterator","qualname":"::naive::date::NaiveDateDaysIterator","value":"NaiveDateDaysIterator {  }","parent":null,"children":[{"krate":0,"index":1465}],"decl_id":null,"docs":" Iterator over `NaiveDate` with a step size of one day.\n","sig":null,"attributes":[{"value":"/ Iterator over `NaiveDate` with a step size of one day.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":173850,"byte_end":173908,"line_start":1560,"line_end":1560,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":1489},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":174758,"byte_end":174780,"line_start":1589,"line_end":1589,"column_start":12,"column_end":34},"name":"NaiveDateWeeksIterator","qualname":"::naive::date::NaiveDateWeeksIterator","value":"NaiveDateWeeksIterator {  }","parent":null,"children":[{"krate":0,"index":1490}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":449},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":208488,"byte_end":208500,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"MIN_DATETIME","qualname":"::naive::datetime::MIN_DATETIME","value":"NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDateTime`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDateTime`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":208436,"byte_end":208477,"line_start":31,"line_end":31,"column_start":1,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":450},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":208620,"byte_end":208632,"line_start":34,"line_end":34,"column_start":11,"column_end":23},"name":"MAX_DATETIME","qualname":"::naive::datetime::MAX_DATETIME","value":"NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDateTime`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDateTime`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":208568,"byte_end":208609,"line_start":33,"line_end":33,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1514},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209565,"byte_end":209578,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"NaiveDateTime","qualname":"::naive::datetime::NaiveDateTime","value":"NaiveDateTime {  }","parent":null,"children":[{"krate":0,"index":1515},{"krate":0,"index":1516}],"decl_id":null,"docs":" ISO 8601 combined date and time without timezone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time without timezone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":208701,"byte_end":208754,"line_start":36,"line_end":36,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":208755,"byte_end":208758,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":208759,"byte_end":208772,"line_start":38,"line_end":38,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":208773,"byte_end":208776,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ `NaiveDateTime` is commonly created from [`NaiveDate`](./struct.NaiveDate.html).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":208777,"byte_end":208861,"line_start":40,"line_end":40,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":208862,"byte_end":208865,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":208866,"byte_end":208874,"line_start":42,"line_end":42,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":208875,"byte_end":208918,"line_start":43,"line_end":43,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":208919,"byte_end":208922,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":208923,"byte_end":209002,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ # let _ = dt;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209003,"byte_end":209020,"line_start":46,"line_end":46,"column_start":1,"column_end":18}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209021,"byte_end":209029,"line_start":47,"line_end":47,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209030,"byte_end":209033,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ You can use typical [date-like](../trait.Datelike.html) and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209034,"byte_end":209097,"line_start":49,"line_end":49,"column_start":1,"column_end":64}},{"value":"/ [time-like](../trait.Timelike.html) methods,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209098,"byte_end":209146,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"/ provided that relevant traits are in the scope.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209147,"byte_end":209198,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209199,"byte_end":209202,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209203,"byte_end":209211,"line_start":53,"line_end":53,"column_start":1,"column_end":9}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209212,"byte_end":209257,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"/ # let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209258,"byte_end":209339,"line_start":55,"line_end":55,"column_start":1,"column_end":82}},{"value":"/ use chrono::{Datelike, Timelike, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209340,"byte_end":209386,"line_start":56,"line_end":56,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209387,"byte_end":209390,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209391,"byte_end":209434,"line_start":58,"line_end":58,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.num_seconds_from_midnight(), 33011);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209435,"byte_end":209489,"line_start":59,"line_end":59,"column_start":1,"column_end":55}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209490,"byte_end":209498,"line_start":60,"line_end":60,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210240,"byte_end":210243,"line_start":85,"line_end":85,"column_start":12,"column_end":15},"name":"new","qualname":"<NaiveDateTime>::new","value":"pub fn new(NaiveDate, NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from date and time components.\n Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\n and many other helper constructors on `NaiveDate`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from date and time components.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209651,"byte_end":209713,"line_start":68,"line_end":68,"column_start":5,"column_end":67}},{"value":"/ Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209718,"byte_end":209800,"line_start":69,"line_end":69,"column_start":5,"column_end":87}},{"value":"/ and many other helper constructors on `NaiveDate`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209805,"byte_end":209859,"line_start":70,"line_end":70,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209864,"byte_end":209867,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209872,"byte_end":209885,"line_start":72,"line_end":72,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209890,"byte_end":209893,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209898,"byte_end":209906,"line_start":74,"line_end":74,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209911,"byte_end":209965,"line_start":75,"line_end":75,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209970,"byte_end":209973,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209978,"byte_end":210022,"line_start":77,"line_end":77,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210027,"byte_end":210082,"line_start":78,"line_end":78,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210087,"byte_end":210090,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::new(d, t);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210095,"byte_end":210133,"line_start":80,"line_end":80,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210138,"byte_end":210167,"line_start":81,"line_end":81,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210172,"byte_end":210201,"line_start":82,"line_end":82,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210206,"byte_end":210214,"line_start":83,"line_end":83,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210219,"byte_end":210228,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211526,"byte_end":211540,"line_start":115,"line_end":115,"column_start":12,"column_end":26},"name":"from_timestamp","qualname":"<NaiveDateTime>::from_timestamp","value":"pub fn from_timestamp(i64, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210357,"byte_end":210426,"line_start":89,"line_end":89,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210431,"byte_end":210470,"line_start":90,"line_end":90,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210475,"byte_end":210543,"line_start":91,"line_end":91,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210548,"byte_end":210619,"line_start":92,"line_end":92,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210624,"byte_end":210627,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ For a non-naive version of this function see","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210632,"byte_end":210680,"line_start":94,"line_end":94,"column_start":5,"column_end":53}},{"value":"/ [`TimeZone::timestamp`](../offset/trait.TimeZone.html#method.timestamp).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210685,"byte_end":210761,"line_start":95,"line_end":95,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210766,"byte_end":210769,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210774,"byte_end":210848,"line_start":97,"line_end":97,"column_start":5,"column_end":79}},{"value":"/ [leap second](./struct.NaiveTime.html#leap-second-handling). (The true \"UNIX","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210853,"byte_end":210933,"line_start":98,"line_end":98,"column_start":5,"column_end":85}},{"value":"/ timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":210938,"byte_end":210999,"line_start":99,"line_end":99,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211004,"byte_end":211007,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211012,"byte_end":211087,"line_start":101,"line_end":101,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211092,"byte_end":211095,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211100,"byte_end":211113,"line_start":103,"line_end":103,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211118,"byte_end":211121,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211126,"byte_end":211134,"line_start":105,"line_end":105,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211139,"byte_end":211182,"line_start":106,"line_end":106,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211187,"byte_end":211190,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(0, 42_000_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211195,"byte_end":211253,"line_start":108,"line_end":108,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 0, 42));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211258,"byte_end":211337,"line_start":109,"line_end":109,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211342,"byte_end":211345,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(1_000_000_000, 0);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211350,"byte_end":211411,"line_start":111,"line_end":111,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211416,"byte_end":211487,"line_start":112,"line_end":112,"column_start":5,"column_end":76}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211492,"byte_end":211500,"line_start":113,"line_end":113,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211505,"byte_end":211514,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212882,"byte_end":212900,"line_start":146,"line_end":146,"column_start":12,"column_end":30},"name":"from_timestamp_opt","qualname":"<NaiveDateTime>::from_timestamp_opt","value":"pub fn from_timestamp_opt(i64, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211725,"byte_end":211794,"line_start":120,"line_end":120,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211799,"byte_end":211838,"line_start":121,"line_end":121,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211843,"byte_end":211911,"line_start":122,"line_end":122,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211916,"byte_end":211987,"line_start":123,"line_end":123,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":211992,"byte_end":211995,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212000,"byte_end":212048,"line_start":125,"line_end":125,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212053,"byte_end":212143,"line_start":126,"line_end":126,"column_start":5,"column_end":95}},{"value":"/ (The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212148,"byte_end":212225,"line_start":127,"line_end":127,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212230,"byte_end":212233,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212238,"byte_end":212321,"line_start":129,"line_end":129,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212326,"byte_end":212329,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212334,"byte_end":212347,"line_start":131,"line_end":131,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212352,"byte_end":212355,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212360,"byte_end":212368,"line_start":133,"line_end":133,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212373,"byte_end":212416,"line_start":134,"line_end":134,"column_start":5,"column_end":48}},{"value":"/ use std::i64;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212421,"byte_end":212438,"line_start":135,"line_end":135,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212443,"byte_end":212446,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ let from_timestamp_opt = NaiveDateTime::from_timestamp_opt;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212451,"byte_end":212514,"line_start":137,"line_end":137,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212519,"byte_end":212522,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ assert!(from_timestamp_opt(0, 0).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212527,"byte_end":212575,"line_start":139,"line_end":139,"column_start":5,"column_end":53}},{"value":"/ assert!(from_timestamp_opt(0, 999_999_999).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212580,"byte_end":212638,"line_start":140,"line_end":140,"column_start":5,"column_end":63}},{"value":"/ assert!(from_timestamp_opt(0, 1_500_000_000).is_some()); // leap second","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212643,"byte_end":212718,"line_start":141,"line_end":141,"column_start":5,"column_end":80}},{"value":"/ assert!(from_timestamp_opt(0, 2_000_000_000).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212723,"byte_end":212783,"line_start":142,"line_end":142,"column_start":5,"column_end":65}},{"value":"/ assert!(from_timestamp_opt(i64::MAX, 0).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212788,"byte_end":212843,"line_start":143,"line_end":143,"column_start":5,"column_end":60}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212848,"byte_end":212856,"line_start":144,"line_end":144,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":212861,"byte_end":212870,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216285,"byte_end":216299,"line_start":220,"line_end":220,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDateTime>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDateTime`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":213422,"byte_end":213509,"line_start":159,"line_end":159,"column_start":5,"column_end":92}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":213514,"byte_end":213584,"line_start":160,"line_end":160,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":213589,"byte_end":213627,"line_start":161,"line_end":161,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":213632,"byte_end":213635,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":213640,"byte_end":213653,"line_start":163,"line_end":163,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":213658,"byte_end":213661,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":213666,"byte_end":213674,"line_start":165,"line_end":165,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":213679,"byte_end":213722,"line_start":166,"line_end":166,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":213727,"byte_end":213730,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":213735,"byte_end":213790,"line_start":168,"line_end":168,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":213795,"byte_end":213798,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05 23:56:04\", \"%Y-%m-%d %H:%M:%S\"),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":213803,"byte_end":213877,"line_start":170,"line_end":170,"column_start":5,"column_end":79}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":213882,"byte_end":213953,"line_start":171,"line_end":171,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015pm012345.6789\", \"%d%b%Y%p%I%M%S%.f\"),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":213958,"byte_end":214034,"line_start":172,"line_end":172,"column_start":5,"column_end":81}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214039,"byte_end":214126,"line_start":173,"line_end":173,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214131,"byte_end":214139,"line_start":174,"line_end":174,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214144,"byte_end":214147,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Offset is ignored for the purpose of parsing.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214152,"byte_end":214201,"line_start":176,"line_end":176,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214206,"byte_end":214209,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214214,"byte_end":214222,"line_start":178,"line_end":178,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214227,"byte_end":214272,"line_start":179,"line_end":179,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214277,"byte_end":214334,"line_start":180,"line_end":180,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214339,"byte_end":214420,"line_start":181,"line_end":181,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17).and_hms(12, 34, 56)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214425,"byte_end":214498,"line_start":182,"line_end":182,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214503,"byte_end":214511,"line_start":183,"line_end":183,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214516,"byte_end":214519,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](./struct.NaiveTime.html#leap-second-handling) are correctly handled by","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214524,"byte_end":214613,"line_start":185,"line_end":185,"column_start":5,"column_end":94}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214618,"byte_end":214680,"line_start":186,"line_end":186,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214685,"byte_end":214761,"line_start":187,"line_end":187,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214766,"byte_end":214769,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214774,"byte_end":214782,"line_start":189,"line_end":189,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214787,"byte_end":214832,"line_start":190,"line_end":190,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214837,"byte_end":214894,"line_start":191,"line_end":191,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2015-07-01 08:59:60.123\", \"%Y-%m-%d %H:%M:%S%.f\"),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214899,"byte_end":214980,"line_start":192,"line_end":192,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 7, 1).and_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":214985,"byte_end":215069,"line_start":193,"line_end":193,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215074,"byte_end":215082,"line_start":194,"line_end":194,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215087,"byte_end":215090,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215095,"byte_end":215138,"line_start":196,"line_end":196,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215143,"byte_end":215214,"line_start":197,"line_end":197,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215219,"byte_end":215222,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215227,"byte_end":215235,"line_start":199,"line_end":199,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215240,"byte_end":215285,"line_start":200,"line_end":200,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215290,"byte_end":215347,"line_start":201,"line_end":201,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"94/9/4 7:15\", \"%y/%m/%d %H:%M\"),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215352,"byte_end":215415,"line_start":202,"line_end":202,"column_start":5,"column_end":68}},{"value":"/            Ok(NaiveDate::from_ymd(1994, 9, 4).and_hms(7, 15, 0)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215420,"byte_end":215490,"line_start":203,"line_end":203,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215495,"byte_end":215498,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215503,"byte_end":215560,"line_start":205,"line_end":205,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"94/9/4 12\", \"%y/%m/%d %H\").is_err());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215565,"byte_end":215630,"line_start":206,"line_end":206,"column_start":5,"column_end":70}},{"value":"/ assert!(parse_from_str(\"94/9/4 17:60\", \"%y/%m/%d %H:%M\").is_err());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215635,"byte_end":215706,"line_start":207,"line_end":207,"column_start":5,"column_end":76}},{"value":"/ assert!(parse_from_str(\"94/9/4 24:00:00\", \"%y/%m/%d %H:%M:%S\").is_err());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215711,"byte_end":215788,"line_start":208,"line_end":208,"column_start":5,"column_end":82}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215793,"byte_end":215801,"line_start":209,"line_end":209,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215806,"byte_end":215809,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215814,"byte_end":215896,"line_start":211,"line_end":211,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215901,"byte_end":215904,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215909,"byte_end":215917,"line_start":213,"line_end":213,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDateTime;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215922,"byte_end":215954,"line_start":214,"line_end":214,"column_start":5,"column_end":37}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":215959,"byte_end":216016,"line_start":215,"line_end":215,"column_start":5,"column_end":62}},{"value":"/ let fmt = \"%Y-%m-%d %H:%M:%S = UNIX timestamp %s\";","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216021,"byte_end":216075,"line_start":216,"line_end":216,"column_start":5,"column_end":59}},{"value":"/ assert!(parse_from_str(\"2001-09-09 01:46:39 = UNIX timestamp 999999999\", fmt).is_ok());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216080,"byte_end":216171,"line_start":217,"line_end":217,"column_start":5,"column_end":96}},{"value":"/ assert!(parse_from_str(\"1970-01-01 00:00:00 = UNIX timestamp 1\", fmt).is_err());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216176,"byte_end":216260,"line_start":218,"line_end":218,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216265,"byte_end":216273,"line_start":219,"line_end":219,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216821,"byte_end":216825,"line_start":237,"line_end":237,"column_start":12,"column_end":16},"name":"date","qualname":"<NaiveDateTime>::date","value":"pub fn date(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216532,"byte_end":216563,"line_start":226,"line_end":226,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216568,"byte_end":216571,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216576,"byte_end":216589,"line_start":228,"line_end":228,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216594,"byte_end":216597,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216602,"byte_end":216610,"line_start":230,"line_end":230,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216615,"byte_end":216641,"line_start":231,"line_end":231,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216646,"byte_end":216649,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216654,"byte_end":216718,"line_start":233,"line_end":233,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.date(), NaiveDate::from_ymd(2016, 7, 8));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216723,"byte_end":216782,"line_start":234,"line_end":234,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216787,"byte_end":216795,"line_start":235,"line_end":235,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216800,"byte_end":216809,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217178,"byte_end":217182,"line_start":252,"line_end":252,"column_start":12,"column_end":16},"name":"time","qualname":"<NaiveDateTime>::time","value":"pub fn time(&Self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216877,"byte_end":216908,"line_start":241,"line_end":241,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216913,"byte_end":216916,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216921,"byte_end":216934,"line_start":243,"line_end":243,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216939,"byte_end":216942,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216947,"byte_end":216955,"line_start":245,"line_end":245,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":216960,"byte_end":216999,"line_start":246,"line_end":246,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217004,"byte_end":217007,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217012,"byte_end":217076,"line_start":248,"line_end":248,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.time(), NaiveTime::from_hms(9, 10, 11));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217081,"byte_end":217139,"line_start":249,"line_end":249,"column_start":5,"column_end":63}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217144,"byte_end":217152,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217157,"byte_end":217166,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218089,"byte_end":218098,"line_start":279,"line_end":279,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<NaiveDateTime>::timestamp","value":"pub fn timestamp(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since the midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since the midnight on January 1, 1970.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217234,"byte_end":217315,"line_start":256,"line_end":256,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217320,"byte_end":217323,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217328,"byte_end":217383,"line_start":258,"line_end":258,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217388,"byte_end":217476,"line_start":259,"line_end":259,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217481,"byte_end":217484,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217489,"byte_end":217502,"line_start":261,"line_end":261,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217507,"byte_end":217510,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217515,"byte_end":217523,"line_start":263,"line_end":263,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217528,"byte_end":217554,"line_start":264,"line_end":264,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217559,"byte_end":217562,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 980);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217567,"byte_end":217640,"line_start":266,"line_end":266,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp(), 1);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217645,"byte_end":217679,"line_start":267,"line_end":267,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217684,"byte_end":217687,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217692,"byte_end":217756,"line_start":269,"line_end":269,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.timestamp(), 1_000_000_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217761,"byte_end":217807,"line_start":270,"line_end":270,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217812,"byte_end":217815,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms(23, 59, 59);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217820,"byte_end":217887,"line_start":272,"line_end":272,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(dt.timestamp(), -1);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217892,"byte_end":217927,"line_start":273,"line_end":273,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217932,"byte_end":217935,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(-1, 1, 1).and_hms(0, 0, 0);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":217940,"byte_end":218000,"line_start":275,"line_end":275,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp(), -62198755200);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218005,"byte_end":218050,"line_start":276,"line_end":276,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218055,"byte_end":218063,"line_start":277,"line_end":277,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218068,"byte_end":218077,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219476,"byte_end":219492,"line_start":311,"line_end":311,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<NaiveDateTime>::timestamp_millis","value":"pub fn timestamp_millis(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218400,"byte_end":218484,"line_start":286,"line_end":286,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218489,"byte_end":218492,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218497,"byte_end":218552,"line_start":288,"line_end":288,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218557,"byte_end":218645,"line_start":289,"line_end":289,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218650,"byte_end":218653,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218658,"byte_end":218725,"line_start":291,"line_end":291,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 Million. (If this is a problem,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218730,"byte_end":218803,"line_start":292,"line_end":292,"column_start":5,"column_end":78}},{"value":"/ please file an issue to let me know what domain needs millisecond","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218808,"byte_end":218877,"line_start":293,"line_end":293,"column_start":5,"column_end":74}},{"value":"/ precision over billions of years, I'm curious.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218882,"byte_end":218933,"line_start":294,"line_end":294,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218938,"byte_end":218941,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218946,"byte_end":218959,"line_start":296,"line_end":296,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218964,"byte_end":218967,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218972,"byte_end":218980,"line_start":298,"line_end":298,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":218985,"byte_end":219011,"line_start":299,"line_end":299,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219016,"byte_end":219019,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219024,"byte_end":219097,"line_start":301,"line_end":301,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219102,"byte_end":219147,"line_start":302,"line_end":302,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219152,"byte_end":219155,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219160,"byte_end":219235,"line_start":304,"line_end":304,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219240,"byte_end":219297,"line_start":305,"line_end":305,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219302,"byte_end":219305,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms_milli(23, 59, 59, 100);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219310,"byte_end":219388,"line_start":307,"line_end":307,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(dt.timestamp_millis(), -900);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219393,"byte_end":219437,"line_start":308,"line_end":308,"column_start":5,"column_end":49}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219442,"byte_end":219450,"line_start":309,"line_end":309,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219455,"byte_end":219464,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220960,"byte_end":220975,"line_start":350,"line_end":350,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<NaiveDateTime>::timestamp_nanos","value":"pub fn timestamp_nanos(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219623,"byte_end":219706,"line_start":316,"line_end":316,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219711,"byte_end":219714,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219719,"byte_end":219774,"line_start":318,"line_end":318,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219779,"byte_end":219867,"line_start":319,"line_end":319,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219872,"byte_end":219875,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219880,"byte_end":219892,"line_start":321,"line_end":321,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219897,"byte_end":219900,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219905,"byte_end":219972,"line_start":323,"line_end":323,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 years. The dates that can be","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":219977,"byte_end":220047,"line_start":324,"line_end":324,"column_start":5,"column_end":75}},{"value":"/ represented as nanoseconds are between 1677-09-21T00:12:44.0 and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220052,"byte_end":220120,"line_start":325,"line_end":325,"column_start":5,"column_end":73}},{"value":"/ 2262-04-11T23:47:16.854775804.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220125,"byte_end":220159,"line_start":326,"line_end":326,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220164,"byte_end":220167,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ (If this is a problem, please file an issue to let me know what domain","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220172,"byte_end":220246,"line_start":328,"line_end":328,"column_start":5,"column_end":79}},{"value":"/ needs nanosecond precision over millennia, I'm curious.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220251,"byte_end":220311,"line_start":329,"line_end":329,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220316,"byte_end":220319,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220324,"byte_end":220337,"line_start":331,"line_end":331,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220342,"byte_end":220345,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220350,"byte_end":220358,"line_start":333,"line_end":333,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220363,"byte_end":220406,"line_start":334,"line_end":334,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220411,"byte_end":220414,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220419,"byte_end":220491,"line_start":336,"line_end":336,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220496,"byte_end":220548,"line_start":337,"line_end":337,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220553,"byte_end":220556,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220561,"byte_end":220635,"line_start":339,"line_end":339,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220640,"byte_end":220643,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ const A_BILLION: i64 = 1_000_000_000;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220648,"byte_end":220689,"line_start":341,"line_end":341,"column_start":5,"column_end":46}},{"value":"/ let nanos = dt.timestamp_nanos();","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220694,"byte_end":220731,"line_start":342,"line_end":342,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(nanos, 1_000_000_000_000_000_555);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220736,"byte_end":220785,"line_start":343,"line_end":343,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220790,"byte_end":220805,"line_start":344,"line_end":344,"column_start":5,"column_end":20}},{"value":"/     dt,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220810,"byte_end":220821,"line_start":345,"line_end":345,"column_start":5,"column_end":16}},{"value":"/     NaiveDateTime::from_timestamp(nanos / A_BILLION, (nanos % A_BILLION) as u32)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220826,"byte_end":220910,"line_start":346,"line_end":346,"column_start":5,"column_end":89}},{"value":"/ );","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220915,"byte_end":220921,"line_start":347,"line_end":347,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220926,"byte_end":220934,"line_start":348,"line_end":348,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":220939,"byte_end":220948,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221753,"byte_end":221776,"line_start":372,"line_end":372,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<NaiveDateTime>::timestamp_subsec_millis","value":"pub fn timestamp_subsec_millis(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last whole non-leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221114,"byte_end":221190,"line_start":355,"line_end":355,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221195,"byte_end":221198,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221203,"byte_end":221245,"line_start":357,"line_end":357,"column_start":5,"column_end":47}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221250,"byte_end":221332,"line_start":358,"line_end":358,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221337,"byte_end":221340,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221345,"byte_end":221358,"line_start":360,"line_end":360,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221363,"byte_end":221366,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221371,"byte_end":221379,"line_start":362,"line_end":362,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221384,"byte_end":221410,"line_start":363,"line_end":363,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221415,"byte_end":221418,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221423,"byte_end":221505,"line_start":365,"line_end":365,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 123);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221510,"byte_end":221560,"line_start":366,"line_end":366,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221565,"byte_end":221568,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221573,"byte_end":221657,"line_start":368,"line_end":368,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 1_234);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221662,"byte_end":221714,"line_start":369,"line_end":369,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221719,"byte_end":221727,"line_start":370,"line_end":370,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221732,"byte_end":221741,"line_start":371,"line_end":371,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222509,"byte_end":222532,"line_start":393,"line_end":393,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<NaiveDateTime>::timestamp_subsec_micros","value":"pub fn timestamp_subsec_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last whole non-leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221854,"byte_end":221930,"line_start":376,"line_end":376,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221935,"byte_end":221938,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221943,"byte_end":221989,"line_start":378,"line_end":378,"column_start":5,"column_end":51}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":221994,"byte_end":222080,"line_start":379,"line_end":379,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222085,"byte_end":222088,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222093,"byte_end":222106,"line_start":381,"line_end":381,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222111,"byte_end":222114,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222119,"byte_end":222127,"line_start":383,"line_end":383,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222132,"byte_end":222158,"line_start":384,"line_end":384,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222163,"byte_end":222166,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222171,"byte_end":222253,"line_start":386,"line_end":386,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 123_456);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222258,"byte_end":222312,"line_start":387,"line_end":387,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222317,"byte_end":222320,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222325,"byte_end":222409,"line_start":389,"line_end":389,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 1_234_567);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222414,"byte_end":222470,"line_start":390,"line_end":390,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222475,"byte_end":222483,"line_start":391,"line_end":391,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222488,"byte_end":222497,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223274,"byte_end":223296,"line_start":414,"line_end":414,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<NaiveDateTime>::timestamp_subsec_nanos","value":"pub fn timestamp_subsec_nanos(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222606,"byte_end":222681,"line_start":397,"line_end":397,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222686,"byte_end":222689,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,999,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222694,"byte_end":222744,"line_start":399,"line_end":399,"column_start":5,"column_end":55}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999,999.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222749,"byte_end":222839,"line_start":400,"line_end":400,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222844,"byte_end":222847,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222852,"byte_end":222865,"line_start":402,"line_end":402,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222870,"byte_end":222873,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222878,"byte_end":222886,"line_start":404,"line_end":404,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222891,"byte_end":222917,"line_start":405,"line_end":405,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222922,"byte_end":222925,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":222930,"byte_end":223012,"line_start":407,"line_end":407,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 123_456_789);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223017,"byte_end":223074,"line_start":408,"line_end":408,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223079,"byte_end":223082,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223087,"byte_end":223171,"line_start":410,"line_end":410,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 1_234_567_890);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223176,"byte_end":223235,"line_start":411,"line_end":411,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223240,"byte_end":223248,"line_start":412,"line_end":412,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223253,"byte_end":223262,"line_start":413,"line_end":413,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":226566,"byte_end":226584,"line_start":489,"line_end":489,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDateTime>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223355,"byte_end":223410,"line_start":418,"line_end":418,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223415,"byte_end":223418,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223423,"byte_end":223518,"line_start":420,"line_end":420,"column_start":5,"column_end":100}},{"value":"/ the addition assumes that **there is no leap second ever**,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223523,"byte_end":223586,"line_start":421,"line_end":421,"column_start":5,"column_end":68}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223591,"byte_end":223658,"line_start":422,"line_end":422,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223663,"byte_end":223756,"line_start":423,"line_end":423,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223761,"byte_end":223764,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223769,"byte_end":223820,"line_start":425,"line_end":425,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223825,"byte_end":223828,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223833,"byte_end":223846,"line_start":427,"line_end":427,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223851,"byte_end":223854,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223859,"byte_end":223867,"line_start":429,"line_end":429,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223872,"byte_end":223910,"line_start":430,"line_end":430,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223915,"byte_end":223953,"line_start":431,"line_end":431,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223958,"byte_end":223961,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":223966,"byte_end":224005,"line_start":433,"line_end":433,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224010,"byte_end":224013,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224018,"byte_end":224051,"line_start":435,"line_end":435,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224056,"byte_end":224099,"line_start":436,"line_end":436,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::zero()),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224104,"byte_end":224169,"line_start":437,"line_end":437,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224174,"byte_end":224209,"line_start":438,"line_end":438,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(1)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224214,"byte_end":224283,"line_start":439,"line_end":439,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224288,"byte_end":224323,"line_start":440,"line_end":440,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(-1)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224328,"byte_end":224398,"line_start":441,"line_end":441,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224403,"byte_end":224438,"line_start":442,"line_end":442,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224443,"byte_end":224520,"line_start":443,"line_end":443,"column_start":5,"column_end":82}},{"value":"/            Some(hms(4, 6, 7)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224525,"byte_end":224560,"line_start":444,"line_end":444,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(86_400)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224565,"byte_end":224639,"line_start":445,"line_end":445,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms(3, 5, 7)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224644,"byte_end":224704,"line_start":446,"line_end":446,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224709,"byte_end":224712,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224717,"byte_end":224781,"line_start":448,"line_end":448,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 980).checked_add_signed(Duration::milliseconds(450)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224786,"byte_end":224868,"line_start":449,"line_end":449,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 8, 430)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224873,"byte_end":224914,"line_start":450,"line_end":450,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224919,"byte_end":224926,"line_start":451,"line_end":451,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224931,"byte_end":224939,"line_start":452,"line_end":452,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224944,"byte_end":224947,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224952,"byte_end":224980,"line_start":454,"line_end":454,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224985,"byte_end":224988,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":224993,"byte_end":225001,"line_start":456,"line_end":456,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225006,"byte_end":225044,"line_start":457,"line_end":457,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225049,"byte_end":225089,"line_start":458,"line_end":458,"column_start":5,"column_end":45}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225094,"byte_end":225169,"line_start":459,"line_end":459,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225174,"byte_end":225259,"line_start":460,"line_end":460,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225264,"byte_end":225271,"line_start":461,"line_end":461,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225276,"byte_end":225284,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225289,"byte_end":225292,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225297,"byte_end":225326,"line_start":464,"line_end":464,"column_start":5,"column_end":34}},{"value":"/ but the addition assumes that it is the only leap second happened.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225331,"byte_end":225401,"line_start":465,"line_end":465,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225406,"byte_end":225409,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225414,"byte_end":225422,"line_start":467,"line_end":467,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225427,"byte_end":225465,"line_start":468,"line_end":468,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225470,"byte_end":225510,"line_start":469,"line_end":469,"column_start":5,"column_end":45}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225515,"byte_end":225556,"line_start":470,"line_end":470,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225561,"byte_end":225646,"line_start":471,"line_end":471,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225651,"byte_end":225688,"line_start":472,"line_end":472,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::zero()),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225693,"byte_end":225750,"line_start":473,"line_end":473,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225755,"byte_end":225799,"line_start":474,"line_end":474,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(-500)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225804,"byte_end":225873,"line_start":475,"line_end":475,"column_start":5,"column_end":74}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225878,"byte_end":225920,"line_start":476,"line_end":476,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(500)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225925,"byte_end":225993,"line_start":477,"line_end":477,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_800)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":225998,"byte_end":226042,"line_start":478,"line_end":478,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(800)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":226047,"byte_end":226115,"line_start":479,"line_end":479,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 6, 0, 100)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":226120,"byte_end":226161,"line_start":480,"line_end":480,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(10)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":226166,"byte_end":226228,"line_start":481,"line_end":481,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 6, 9, 300)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":226233,"byte_end":226274,"line_start":482,"line_end":482,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(-10)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":226279,"byte_end":226342,"line_start":483,"line_end":483,"column_start":5,"column_end":68}},{"value":"/            Some(hmsm(3, 5, 50, 300)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":226347,"byte_end":226389,"line_start":484,"line_end":484,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::days(1)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":226394,"byte_end":226452,"line_start":485,"line_end":485,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms_milli(3, 5, 59, 300)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":226457,"byte_end":226529,"line_start":486,"line_end":486,"column_start":5,"column_end":77}},{"value":"/ # }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":226534,"byte_end":226541,"line_start":487,"line_end":487,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":226546,"byte_end":226554,"line_start":488,"line_end":488,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":230019,"byte_end":230037,"line_start":568,"line_end":568,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDateTime>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227031,"byte_end":227093,"line_start":501,"line_end":501,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227098,"byte_end":227101,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227106,"byte_end":227201,"line_start":503,"line_end":503,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227206,"byte_end":227272,"line_start":504,"line_end":504,"column_start":5,"column_end":71}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227277,"byte_end":227344,"line_start":505,"line_end":505,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227349,"byte_end":227442,"line_start":506,"line_end":506,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227447,"byte_end":227450,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227455,"byte_end":227506,"line_start":508,"line_end":508,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227511,"byte_end":227514,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227519,"byte_end":227532,"line_start":510,"line_end":510,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227537,"byte_end":227540,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227545,"byte_end":227553,"line_start":512,"line_end":512,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227558,"byte_end":227596,"line_start":513,"line_end":513,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227601,"byte_end":227639,"line_start":514,"line_end":514,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227644,"byte_end":227647,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227652,"byte_end":227691,"line_start":516,"line_end":516,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227696,"byte_end":227699,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227704,"byte_end":227737,"line_start":518,"line_end":518,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227742,"byte_end":227785,"line_start":519,"line_end":519,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::zero()),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227790,"byte_end":227855,"line_start":520,"line_end":520,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227860,"byte_end":227895,"line_start":521,"line_end":521,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(1)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227900,"byte_end":227969,"line_start":522,"line_end":522,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":227974,"byte_end":228009,"line_start":523,"line_end":523,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(-1)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228014,"byte_end":228084,"line_start":524,"line_end":524,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228089,"byte_end":228124,"line_start":525,"line_end":525,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228129,"byte_end":228206,"line_start":526,"line_end":526,"column_start":5,"column_end":82}},{"value":"/            Some(hms(2, 4, 7)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228211,"byte_end":228246,"line_start":527,"line_end":527,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(86_400)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228251,"byte_end":228325,"line_start":528,"line_end":528,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms(3, 5, 7)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228330,"byte_end":228390,"line_start":529,"line_end":529,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228395,"byte_end":228398,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228403,"byte_end":228467,"line_start":531,"line_end":531,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 450).checked_sub_signed(Duration::milliseconds(670)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228472,"byte_end":228554,"line_start":532,"line_end":532,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 6, 780)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228559,"byte_end":228600,"line_start":533,"line_end":533,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228605,"byte_end":228612,"line_start":534,"line_end":534,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228617,"byte_end":228625,"line_start":535,"line_end":535,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228630,"byte_end":228633,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228638,"byte_end":228666,"line_start":537,"line_end":537,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228671,"byte_end":228674,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228679,"byte_end":228687,"line_start":539,"line_end":539,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228692,"byte_end":228730,"line_start":540,"line_end":540,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228735,"byte_end":228775,"line_start":541,"line_end":541,"column_start":5,"column_end":45}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228780,"byte_end":228855,"line_start":542,"line_end":542,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228860,"byte_end":228945,"line_start":543,"line_end":543,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228950,"byte_end":228957,"line_start":544,"line_end":544,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228962,"byte_end":228970,"line_start":545,"line_end":545,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228975,"byte_end":228978,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":228983,"byte_end":229012,"line_start":547,"line_end":547,"column_start":5,"column_end":34}},{"value":"/ but the subtraction assumes that it is the only leap second happened.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229017,"byte_end":229090,"line_start":548,"line_end":548,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229095,"byte_end":229098,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229103,"byte_end":229111,"line_start":550,"line_end":550,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229116,"byte_end":229154,"line_start":551,"line_end":551,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229159,"byte_end":229199,"line_start":552,"line_end":552,"column_start":5,"column_end":45}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229204,"byte_end":229245,"line_start":553,"line_end":553,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229250,"byte_end":229335,"line_start":554,"line_end":554,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229340,"byte_end":229377,"line_start":555,"line_end":555,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::zero()),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229382,"byte_end":229439,"line_start":556,"line_end":556,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229444,"byte_end":229488,"line_start":557,"line_end":557,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(200)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229493,"byte_end":229561,"line_start":558,"line_end":558,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_100)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229566,"byte_end":229610,"line_start":559,"line_end":559,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(500)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229615,"byte_end":229683,"line_start":560,"line_end":560,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229688,"byte_end":229730,"line_start":561,"line_end":561,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::seconds(60)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229735,"byte_end":229797,"line_start":562,"line_end":562,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 5, 0, 300)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229802,"byte_end":229843,"line_start":563,"line_end":563,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::days(1)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229848,"byte_end":229906,"line_start":564,"line_end":564,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms_milli(3, 6, 0, 300)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229911,"byte_end":229982,"line_start":565,"line_end":565,"column_start":5,"column_end":76}},{"value":"/ # }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229987,"byte_end":229994,"line_start":566,"line_end":566,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":229999,"byte_end":230007,"line_start":567,"line_end":567,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":232374,"byte_end":232395,"line_start":622,"line_end":622,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDateTime>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveDateTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDateTime` from the current date and time.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDateTime` from the current date and time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":230484,"byte_end":230553,"line_start":580,"line_end":580,"column_start":5,"column_end":74}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":230558,"byte_end":230605,"line_start":581,"line_end":581,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":230610,"byte_end":230613,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":230618,"byte_end":230713,"line_start":583,"line_end":583,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":230718,"byte_end":230784,"line_start":584,"line_end":584,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveDateTime`s themselves represents a leap second","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":230789,"byte_end":230868,"line_start":585,"line_end":585,"column_start":5,"column_end":84}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":230873,"byte_end":230918,"line_start":586,"line_end":586,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":230923,"byte_end":230982,"line_start":587,"line_end":587,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":230987,"byte_end":230990,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":230995,"byte_end":231008,"line_start":589,"line_end":589,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231013,"byte_end":231016,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231021,"byte_end":231029,"line_start":591,"line_end":591,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231034,"byte_end":231072,"line_start":592,"line_end":592,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231077,"byte_end":231115,"line_start":593,"line_end":593,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231120,"byte_end":231123,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231128,"byte_end":231167,"line_start":595,"line_end":595,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231172,"byte_end":231175,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231180,"byte_end":231213,"line_start":597,"line_end":597,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(d.and_hms(3, 5, 7).signed_duration_since(d.and_hms(2, 4, 6)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231218,"byte_end":231294,"line_start":598,"line_end":598,"column_start":5,"column_end":81}},{"value":"/            Duration::seconds(3600 + 60 + 1));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231299,"byte_end":231348,"line_start":599,"line_end":599,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231353,"byte_end":231356,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ // July 8 is 190th day in the year 2016","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231361,"byte_end":231404,"line_start":601,"line_end":601,"column_start":5,"column_end":48}},{"value":"/ let d0 = from_ymd(2016, 1, 1);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231409,"byte_end":231443,"line_start":602,"line_end":602,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(d.and_hms_milli(0, 7, 6, 500).signed_duration_since(d0.and_hms(0, 0, 0)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231448,"byte_end":231536,"line_start":603,"line_end":603,"column_start":5,"column_end":93}},{"value":"/            Duration::seconds(189 * 86_400 + 7 * 60 + 6) + Duration::milliseconds(500));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231541,"byte_end":231632,"line_start":604,"line_end":604,"column_start":5,"column_end":96}},{"value":"/ # }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231637,"byte_end":231644,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231649,"byte_end":231657,"line_start":606,"line_end":606,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231662,"byte_end":231665,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231670,"byte_end":231732,"line_start":608,"line_end":608,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231737,"byte_end":231783,"line_start":609,"line_end":609,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231788,"byte_end":231791,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231796,"byte_end":231804,"line_start":611,"line_end":611,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231809,"byte_end":231847,"line_start":612,"line_end":612,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231852,"byte_end":231892,"line_start":613,"line_end":613,"column_start":5,"column_end":45}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231897,"byte_end":231938,"line_start":614,"line_end":614,"column_start":5,"column_end":46}},{"value":"/ let leap = from_ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_500);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":231943,"byte_end":232013,"line_start":615,"line_end":615,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(leap.signed_duration_since(from_ymd(2015, 6, 30).and_hms(23, 0, 0)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":232018,"byte_end":232101,"line_start":616,"line_end":616,"column_start":5,"column_end":88}},{"value":"/            Duration::seconds(3600) + Duration::milliseconds(500));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":232106,"byte_end":232176,"line_start":617,"line_end":617,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ymd(2015, 7, 1).and_hms(1, 0, 0).signed_duration_since(leap),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":232181,"byte_end":232262,"line_start":618,"line_end":618,"column_start":5,"column_end":86}},{"value":"/            Duration::seconds(3600) - Duration::milliseconds(500));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":232267,"byte_end":232337,"line_start":619,"line_end":619,"column_start":5,"column_end":75}},{"value":"/ # }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":232342,"byte_end":232349,"line_start":620,"line_end":620,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":232354,"byte_end":232362,"line_start":621,"line_end":621,"column_start":5,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":1584},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":334325,"byte_end":334332,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"IsoWeek","qualname":"::naive::isoweek::IsoWeek","value":"IsoWeek {  }","parent":null,"children":[{"krate":0,"index":1585}],"decl_id":null,"docs":" ISO 8601 week.","sig":null,"attributes":[{"value":"/ ISO 8601 week.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":333919,"byte_end":333937,"line_start":10,"line_end":10,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":333938,"byte_end":333941,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This type, combined with [`Weekday`](../enum.Weekday.html),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":333942,"byte_end":334005,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/ constitues the ISO 8601 [week date](./struct.NaiveDate.html#week-date).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":334006,"byte_end":334081,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ One can retrieve this type from the existing [`Datelike`](../trait.Datelike.html) types","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":334082,"byte_end":334173,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ via the [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) method.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":334174,"byte_end":334258,"line_start":15,"line_end":15,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336290,"byte_end":336294,"line_start":70,"line_end":70,"column_start":12,"column_end":16},"name":"year","qualname":"<IsoWeek>::year","value":"pub fn year(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the year number for this ISO week.","sig":null,"attributes":[{"value":"/ Returns the year number for this ISO week.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":335632,"byte_end":335678,"line_start":49,"line_end":49,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":335683,"byte_end":335686,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":335691,"byte_end":335704,"line_start":51,"line_end":51,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":335709,"byte_end":335712,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":335717,"byte_end":335725,"line_start":53,"line_end":53,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":335730,"byte_end":335777,"line_start":54,"line_end":54,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":335782,"byte_end":335785,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":335790,"byte_end":335848,"line_start":56,"line_end":56,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":335853,"byte_end":335895,"line_start":57,"line_end":57,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":335900,"byte_end":335908,"line_start":58,"line_end":58,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":335913,"byte_end":335916,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This year number might not match the calendar year number.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":335921,"byte_end":335983,"line_start":60,"line_end":60,"column_start":5,"column_end":67}},{"value":"/ Continuing the example...","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":335988,"byte_end":336017,"line_start":61,"line_end":61,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336022,"byte_end":336025,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336030,"byte_end":336038,"line_start":63,"line_end":63,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336043,"byte_end":336092,"line_start":64,"line_end":64,"column_start":5,"column_end":54}},{"value":"/ # let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336097,"byte_end":336157,"line_start":65,"line_end":65,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(d.year(), 2014);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336162,"byte_end":336193,"line_start":66,"line_end":66,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d, NaiveDate::from_ymd(2014, 12, 29));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336198,"byte_end":336251,"line_start":67,"line_end":67,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336256,"byte_end":336264,"line_start":68,"line_end":68,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336269,"byte_end":336278,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336744,"byte_end":336748,"line_start":87,"line_end":87,"column_start":12,"column_end":16},"name":"week","qualname":"<IsoWeek>::week","value":"pub fn week(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 1.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336345,"byte_end":336393,"line_start":74,"line_end":74,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336398,"byte_end":336401,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 53. (The last week of year differs by years.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336406,"byte_end":336489,"line_start":76,"line_end":76,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336494,"byte_end":336497,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336502,"byte_end":336515,"line_start":78,"line_end":78,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336520,"byte_end":336523,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336528,"byte_end":336536,"line_start":80,"line_end":80,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336541,"byte_end":336588,"line_start":81,"line_end":81,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336593,"byte_end":336596,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336601,"byte_end":336660,"line_start":83,"line_end":83,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week(), 15);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336665,"byte_end":336705,"line_start":84,"line_end":84,"column_start":5,"column_end":45}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336710,"byte_end":336718,"line_start":85,"line_end":85,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336723,"byte_end":336732,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":337216,"byte_end":337221,"line_start":104,"line_end":104,"column_start":12,"column_end":17},"name":"week0","qualname":"<IsoWeek>::week0","value":"pub fn week0(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 0.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336816,"byte_end":336864,"line_start":91,"line_end":91,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336869,"byte_end":336872,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 52. (The last week of year differs by years.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336877,"byte_end":336960,"line_start":93,"line_end":93,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336965,"byte_end":336968,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336973,"byte_end":336986,"line_start":95,"line_end":95,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336991,"byte_end":336994,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":336999,"byte_end":337007,"line_start":97,"line_end":97,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":337012,"byte_end":337059,"line_start":98,"line_end":98,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":337064,"byte_end":337067,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":337072,"byte_end":337131,"line_start":100,"line_end":100,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week0(), 14);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":337136,"byte_end":337177,"line_start":101,"line_end":101,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":337182,"byte_end":337190,"line_start":102,"line_end":102,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":337195,"byte_end":337204,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1604},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347147,"byte_end":347156,"line_start":182,"line_end":182,"column_start":12,"column_end":21},"name":"NaiveTime","qualname":"::naive::time::NaiveTime","value":"NaiveTime {  }","parent":null,"children":[{"krate":0,"index":1605},{"krate":0,"index":1606}],"decl_id":null,"docs":" ISO 8601 time without timezone.\n Allows for the nanosecond precision and optional leap second representation.","sig":null,"attributes":[{"value":"/ ISO 8601 time without timezone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":339936,"byte_end":339971,"line_start":22,"line_end":22,"column_start":1,"column_end":36}},{"value":"/ Allows for the nanosecond precision and optional leap second representation.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":339972,"byte_end":340052,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340053,"byte_end":340056,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Leap Second Handling","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340057,"byte_end":340083,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340084,"byte_end":340087,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Since 1960s, the manmade atomic clock has been so accurate that","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340088,"byte_end":340155,"line_start":27,"line_end":27,"column_start":1,"column_end":68}},{"value":"/ it is much more accurate than Earth's own motion.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340156,"byte_end":340209,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"/ It became desirable to define the civil time in terms of the atomic clock,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340210,"byte_end":340288,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/ but that risks the desynchronization of the civil time from Earth.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340289,"byte_end":340359,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/ To account for this, the designers of the Coordinated Universal Time (UTC)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340360,"byte_end":340438,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ made that the UTC should be kept within 0.9 seconds of the observed Earth-bound time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340439,"byte_end":340528,"line_start":32,"line_end":32,"column_start":1,"column_end":90}},{"value":"/ When the mean solar day is longer than the ideal (86,400 seconds),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340529,"byte_end":340599,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ the error slowly accumulates and it is necessary to add a **leap second**","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340600,"byte_end":340677,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ to slow the UTC down a bit.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340678,"byte_end":340709,"line_start":35,"line_end":35,"column_start":1,"column_end":32}},{"value":"/ (We may also remove a second to speed the UTC up a bit, but it never happened.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340710,"byte_end":340793,"line_start":36,"line_end":36,"column_start":1,"column_end":84}},{"value":"/ The leap second, if any, follows 23:59:59 of June 30 or December 31 in the UTC.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340794,"byte_end":340877,"line_start":37,"line_end":37,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340878,"byte_end":340881,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Fast forward to the 21st century,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340882,"byte_end":340919,"line_start":39,"line_end":39,"column_start":1,"column_end":38}},{"value":"/ we have seen 26 leap seconds from January 1972 to December 2015.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340920,"byte_end":340988,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/ Yes, 26 seconds. Probably you can read this paragraph within 26 seconds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":340989,"byte_end":341065,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ But those 26 seconds, and possibly more in the future, are never predictable,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":341066,"byte_end":341147,"line_start":42,"line_end":42,"column_start":1,"column_end":82}},{"value":"/ and whether to add a leap second or not is known only before 6 months.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":341148,"byte_end":341222,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ Internet-based clocks (via NTP) do account for known leap seconds,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":341223,"byte_end":341293,"line_start":44,"line_end":44,"column_start":1,"column_end":71}},{"value":"/ but the system API normally doesn't (and often can't, with no network connection)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":341294,"byte_end":341379,"line_start":45,"line_end":45,"column_start":1,"column_end":86}},{"value":"/ and there is no reliable way to retrieve leap second information.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":341380,"byte_end":341449,"line_start":46,"line_end":46,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":341450,"byte_end":341453,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Chrono does not try to accurately implement leap seconds; it is impossible.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":341454,"byte_end":341533,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ Rather, **it allows for leap seconds but behaves as if there are *no other* leap seconds.**","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":341534,"byte_end":341629,"line_start":49,"line_end":49,"column_start":1,"column_end":96}},{"value":"/ Various operations will ignore any possible leap second(s)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":341630,"byte_end":341692,"line_start":50,"line_end":50,"column_start":1,"column_end":63}},{"value":"/ except when any of the operands were actually leap seconds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":341693,"byte_end":341756,"line_start":51,"line_end":51,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":341757,"byte_end":341760,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ If you cannot tolerate this behavior,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":341761,"byte_end":341802,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"/ you must use a separate `TimeZone` for the International Atomic Time (TAI).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":341803,"byte_end":341882,"line_start":54,"line_end":54,"column_start":1,"column_end":80}},{"value":"/ TAI is like UTC but has no leap seconds, and thus slightly differs from UTC.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":341883,"byte_end":341963,"line_start":55,"line_end":55,"column_start":1,"column_end":81}},{"value":"/ Chrono does not yet provide such implementation, but it is planned.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":341964,"byte_end":342035,"line_start":56,"line_end":56,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342036,"byte_end":342039,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ ## Representing Leap Seconds","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342040,"byte_end":342072,"line_start":58,"line_end":58,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342073,"byte_end":342076,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ The leap second is indicated via fractional seconds more than 1 second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342077,"byte_end":342152,"line_start":60,"line_end":60,"column_start":1,"column_end":76}},{"value":"/ This makes possible to treat a leap second as the prior non-leap second","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342153,"byte_end":342228,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"/ if you don't care about sub-second accuracy.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342229,"byte_end":342277,"line_start":62,"line_end":62,"column_start":1,"column_end":49}},{"value":"/ You should use the proper formatting to get the raw leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342278,"byte_end":342346,"line_start":63,"line_end":63,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342347,"byte_end":342350,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ All methods accepting fractional seconds will accept such values.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342351,"byte_end":342420,"line_start":65,"line_end":65,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342421,"byte_end":342424,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342425,"byte_end":342433,"line_start":67,"line_end":67,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveTime, Utc, TimeZone};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342434,"byte_end":342488,"line_start":68,"line_end":68,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342489,"byte_end":342492,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ let t = NaiveTime::from_hms_milli(8, 59, 59, 1_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342493,"byte_end":342549,"line_start":70,"line_end":70,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342550,"byte_end":342553,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ let dt1 = NaiveDate::from_ymd(2015, 7, 1).and_hms_micro(8, 59, 59, 1_000_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342554,"byte_end":342636,"line_start":72,"line_end":72,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342637,"byte_end":342640,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ let dt2 = Utc.ymd(2015, 6, 30).and_hms_nano(23, 59, 59, 1_000_000_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342641,"byte_end":342716,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ # let _ = (t, dt1, dt2);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342717,"byte_end":342745,"line_start":75,"line_end":75,"column_start":1,"column_end":29}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342746,"byte_end":342754,"line_start":76,"line_end":76,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342755,"byte_end":342758,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Note that the leap second can happen anytime given an appropriate time zone;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342759,"byte_end":342839,"line_start":78,"line_end":78,"column_start":1,"column_end":81}},{"value":"/ 2015-07-01 01:23:60 would be a proper leap second if UTC+01:24 had existed.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342840,"byte_end":342919,"line_start":79,"line_end":79,"column_start":1,"column_end":80}},{"value":"/ Practically speaking, though, by the time of the first leap second on 1972-06-30,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":342920,"byte_end":343005,"line_start":80,"line_end":80,"column_start":1,"column_end":86}},{"value":"/ every time zone offset around the world has standardized to the 5-minute alignment.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343006,"byte_end":343093,"line_start":81,"line_end":81,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343094,"byte_end":343097,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ## Date And Time Arithmetics","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343098,"byte_end":343130,"line_start":83,"line_end":83,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343131,"byte_end":343134,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ As a concrete example, let's assume that `03:00:60` and `04:00:60` are leap seconds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343135,"byte_end":343223,"line_start":85,"line_end":85,"column_start":1,"column_end":89}},{"value":"/ In reality, of course, leap seconds are separated by at least 6 months.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343224,"byte_end":343299,"line_start":86,"line_end":86,"column_start":1,"column_end":76}},{"value":"/ We will also use some intuitive concise notations for the explanation.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343300,"byte_end":343374,"line_start":87,"line_end":87,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343375,"byte_end":343378,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ `Time + Duration`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343379,"byte_end":343400,"line_start":89,"line_end":89,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_add_signed`](#method.overflowing_add_signed)):","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343401,"byte_end":343487,"line_start":90,"line_end":90,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343488,"byte_end":343491,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 + 1s = 03:00:01`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343492,"byte_end":343525,"line_start":92,"line_end":92,"column_start":1,"column_end":34}},{"value":"/ - `03:00:59 + 60s = 03:02:00`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343526,"byte_end":343560,"line_start":93,"line_end":93,"column_start":1,"column_end":35}},{"value":"/ - `03:00:59 + 1s = 03:01:00`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343561,"byte_end":343594,"line_start":94,"line_end":94,"column_start":1,"column_end":34}},{"value":"/ - `03:00:60 + 1s = 03:01:00`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343595,"byte_end":343628,"line_start":95,"line_end":95,"column_start":1,"column_end":34}},{"value":"/   Note that the sum is identical to the previous.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343629,"byte_end":343682,"line_start":96,"line_end":96,"column_start":1,"column_end":54}},{"value":"/ - `03:00:60 + 60s = 03:01:59`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343683,"byte_end":343717,"line_start":97,"line_end":97,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 + 61s = 03:02:00`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343718,"byte_end":343752,"line_start":98,"line_end":98,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60.1 + 0.8s = 03:00:60.9`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343753,"byte_end":343792,"line_start":99,"line_end":99,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343793,"byte_end":343796,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ `Time - Duration`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343797,"byte_end":343818,"line_start":101,"line_end":101,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_sub_signed`](#method.overflowing_sub_signed)):","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343819,"byte_end":343905,"line_start":102,"line_end":102,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343906,"byte_end":343909,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 - 1s = 02:59:59`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343910,"byte_end":343943,"line_start":104,"line_end":104,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 1s = 03:00:59`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343944,"byte_end":343977,"line_start":105,"line_end":105,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 60s = 03:00:00`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":343978,"byte_end":344012,"line_start":106,"line_end":106,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 60s = 03:00:00`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344013,"byte_end":344047,"line_start":107,"line_end":107,"column_start":1,"column_end":35}},{"value":"/   Note that the result is identical to the previous.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344048,"byte_end":344104,"line_start":108,"line_end":108,"column_start":1,"column_end":57}},{"value":"/ - `03:00:60.7 - 0.4s = 03:00:60.3`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344105,"byte_end":344144,"line_start":109,"line_end":109,"column_start":1,"column_end":40}},{"value":"/ - `03:00:60.7 - 0.9s = 03:00:59.8`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344145,"byte_end":344184,"line_start":110,"line_end":110,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344185,"byte_end":344188,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ `Time - Time`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344189,"byte_end":344206,"line_start":112,"line_end":112,"column_start":1,"column_end":18}},{"value":"/ (short for [`NaiveTime::signed_duration_since`](#method.signed_duration_since)):","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344207,"byte_end":344291,"line_start":113,"line_end":113,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344292,"byte_end":344295,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ - `04:00:00 - 03:00:00 = 3600s`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344296,"byte_end":344332,"line_start":115,"line_end":115,"column_start":1,"column_end":37}},{"value":"/ - `03:01:00 - 03:00:00 = 60s`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344333,"byte_end":344367,"line_start":116,"line_end":116,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 03:00:00 = 60s`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344368,"byte_end":344402,"line_start":117,"line_end":117,"column_start":1,"column_end":35}},{"value":"/   Note that the difference is identical to the previous.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344403,"byte_end":344463,"line_start":118,"line_end":118,"column_start":1,"column_end":61}},{"value":"/ - `03:00:60.6 - 03:00:59.4 = 1.2s`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344464,"byte_end":344503,"line_start":119,"line_end":119,"column_start":1,"column_end":40}},{"value":"/ - `03:01:00 - 03:00:59.8 = 0.2s`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344504,"byte_end":344541,"line_start":120,"line_end":120,"column_start":1,"column_end":38}},{"value":"/ - `03:01:00 - 03:00:60.5 = 0.5s`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344542,"byte_end":344579,"line_start":121,"line_end":121,"column_start":1,"column_end":38}},{"value":"/   Note that the difference is larger than the previous,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344580,"byte_end":344639,"line_start":122,"line_end":122,"column_start":1,"column_end":60}},{"value":"/   even though the leap second clearly follows the previous whole second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344640,"byte_end":344716,"line_start":123,"line_end":123,"column_start":1,"column_end":77}},{"value":"/ - `04:00:60.9 - 03:00:60.1 =","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344717,"byte_end":344749,"line_start":124,"line_end":124,"column_start":1,"column_end":33}},{"value":"/   (04:00:60.9 - 04:00:00) + (04:00:00 - 03:01:00) + (03:01:00 - 03:00:60.1) =","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344750,"byte_end":344831,"line_start":125,"line_end":125,"column_start":1,"column_end":82}},{"value":"/   60.9s + 3540s + 0.9s = 3601.8s`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344832,"byte_end":344870,"line_start":126,"line_end":126,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344871,"byte_end":344874,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ In general,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344875,"byte_end":344890,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344891,"byte_end":344894,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ - `Time + Duration` unconditionally equals to `Duration + Time`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344895,"byte_end":344963,"line_start":130,"line_end":130,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344964,"byte_end":344967,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ - `Time - Duration` unconditionally equals to `Time + (-Duration)`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":344968,"byte_end":345039,"line_start":132,"line_end":132,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345040,"byte_end":345043,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ - `Time1 - Time2` unconditionally equals to `-(Time2 - Time1)`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345044,"byte_end":345111,"line_start":134,"line_end":134,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345112,"byte_end":345115,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ - Associativity does not generally hold, because","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345116,"byte_end":345168,"line_start":136,"line_end":136,"column_start":1,"column_end":53}},{"value":"/   `(Time + Duration1) - Duration2` no longer equals to `Time + (Duration1 - Duration2)`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345169,"byte_end":345260,"line_start":137,"line_end":137,"column_start":1,"column_end":92}},{"value":"/   for two positive durations.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345261,"byte_end":345294,"line_start":138,"line_end":138,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345295,"byte_end":345298,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/     - As a special case, `(Time + Duration) - Duration` also does not equal to `Time`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345299,"byte_end":345389,"line_start":140,"line_end":140,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345390,"byte_end":345393,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/     - If you can assume that all durations have the same sign, however,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345394,"byte_end":345469,"line_start":142,"line_end":142,"column_start":1,"column_end":76}},{"value":"/       then the associativity holds:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345470,"byte_end":345509,"line_start":143,"line_end":143,"column_start":1,"column_end":40}},{"value":"/       `(Time + Duration1) + Duration2` equals to `Time + (Duration1 + Duration2)`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345510,"byte_end":345595,"line_start":144,"line_end":144,"column_start":1,"column_end":86}},{"value":"/       for two positive durations.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345596,"byte_end":345633,"line_start":145,"line_end":145,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345634,"byte_end":345637,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ ## Reading And Writing Leap Seconds","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345638,"byte_end":345677,"line_start":147,"line_end":147,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345678,"byte_end":345681,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ The \"typical\" leap seconds on the minute boundary are","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345682,"byte_end":345739,"line_start":149,"line_end":149,"column_start":1,"column_end":58}},{"value":"/ correctly handled both in the formatting and parsing.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345740,"byte_end":345797,"line_start":150,"line_end":150,"column_start":1,"column_end":58}},{"value":"/ The leap second in the human-readable representation","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345798,"byte_end":345854,"line_start":151,"line_end":151,"column_start":1,"column_end":57}},{"value":"/ will be represented as the second part being 60, as required by ISO 8601.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345855,"byte_end":345932,"line_start":152,"line_end":152,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345933,"byte_end":345936,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345937,"byte_end":345945,"line_start":154,"line_end":154,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345946,"byte_end":345978,"line_start":155,"line_end":155,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345979,"byte_end":345982,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":345983,"byte_end":346050,"line_start":157,"line_end":157,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:59:60Z\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346051,"byte_end":346111,"line_start":158,"line_end":158,"column_start":1,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346112,"byte_end":346120,"line_start":159,"line_end":159,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346121,"byte_end":346124,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ There are hypothetical leap seconds not on the minute boundary","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346125,"byte_end":346191,"line_start":161,"line_end":161,"column_start":1,"column_end":67}},{"value":"/ nevertheless supported by Chrono.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346192,"byte_end":346229,"line_start":162,"line_end":162,"column_start":1,"column_end":38}},{"value":"/ They are allowed for the sake of completeness and consistency;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346230,"byte_end":346296,"line_start":163,"line_end":163,"column_start":1,"column_end":67}},{"value":"/ there were several \"exotic\" time zone offsets with fractional minutes prior to UTC after all.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346297,"byte_end":346394,"line_start":164,"line_end":164,"column_start":1,"column_end":98}},{"value":"/ For such cases the human-readable representation is ambiguous","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346395,"byte_end":346460,"line_start":165,"line_end":165,"column_start":1,"column_end":66}},{"value":"/ and would be read back to the next non-leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346461,"byte_end":346516,"line_start":166,"line_end":166,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346517,"byte_end":346520,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346521,"byte_end":346529,"line_start":168,"line_end":168,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, Utc, TimeZone};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346530,"byte_end":346572,"line_start":169,"line_end":169,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346573,"byte_end":346576,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 56, 4, 1_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346577,"byte_end":346643,"line_start":171,"line_end":171,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346644,"byte_end":346704,"line_start":172,"line_end":172,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346705,"byte_end":346708,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms(23, 56, 5);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346709,"byte_end":346762,"line_start":174,"line_end":174,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346763,"byte_end":346823,"line_start":175,"line_end":175,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2015-06-30T23:56:05Z\").unwrap(), dt);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346824,"byte_end":346906,"line_start":176,"line_end":176,"column_start":1,"column_end":83}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346907,"byte_end":346915,"line_start":177,"line_end":177,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346916,"byte_end":346919,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ Since Chrono alone cannot determine any existence of leap seconds,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346920,"byte_end":346990,"line_start":179,"line_end":179,"column_start":1,"column_end":71}},{"value":"/ **there is absolutely no guarantee that the leap second read has actually happened**.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":346991,"byte_end":347080,"line_start":180,"line_end":180,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347814,"byte_end":347822,"line_start":207,"line_end":207,"column_start":12,"column_end":20},"name":"from_hms","qualname":"<NaiveTime>::from_hms","value":"pub fn from_hms(u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347213,"byte_end":347270,"line_start":188,"line_end":188,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347275,"byte_end":347278,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347283,"byte_end":347343,"line_start":190,"line_end":190,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347348,"byte_end":347423,"line_start":191,"line_end":191,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347428,"byte_end":347431,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347436,"byte_end":347485,"line_start":193,"line_end":193,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347490,"byte_end":347493,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347498,"byte_end":347511,"line_start":195,"line_end":195,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347516,"byte_end":347519,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347524,"byte_end":347532,"line_start":197,"line_end":197,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347537,"byte_end":347575,"line_start":198,"line_end":198,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347580,"byte_end":347583,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347588,"byte_end":347631,"line_start":200,"line_end":200,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347636,"byte_end":347665,"line_start":201,"line_end":201,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347670,"byte_end":347701,"line_start":202,"line_end":202,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347706,"byte_end":347736,"line_start":203,"line_end":203,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 0);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347741,"byte_end":347775,"line_start":204,"line_end":204,"column_start":5,"column_end":39}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347780,"byte_end":347788,"line_start":205,"line_end":205,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347793,"byte_end":347802,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348679,"byte_end":348691,"line_start":232,"line_end":232,"column_start":12,"column_end":24},"name":"from_hms_opt","qualname":"<NaiveTime>::from_hms_opt","value":"pub fn from_hms_opt(u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347951,"byte_end":348008,"line_start":211,"line_end":211,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348013,"byte_end":348016,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348021,"byte_end":348081,"line_start":213,"line_end":213,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348086,"byte_end":348165,"line_start":214,"line_end":214,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348170,"byte_end":348173,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348178,"byte_end":348235,"line_start":216,"line_end":216,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348240,"byte_end":348243,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348248,"byte_end":348261,"line_start":218,"line_end":218,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348266,"byte_end":348269,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348274,"byte_end":348282,"line_start":220,"line_end":220,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348287,"byte_end":348313,"line_start":221,"line_end":221,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348318,"byte_end":348321,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ let from_hms_opt = NaiveTime::from_hms_opt;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348326,"byte_end":348373,"line_start":223,"line_end":223,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348378,"byte_end":348381,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hms_opt(0, 0, 0).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348386,"byte_end":348431,"line_start":225,"line_end":225,"column_start":5,"column_end":50}},{"value":"/ assert!(from_hms_opt(23, 59, 59).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348436,"byte_end":348484,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/ assert!(from_hms_opt(24, 0, 0).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348489,"byte_end":348535,"line_start":227,"line_end":227,"column_start":5,"column_end":51}},{"value":"/ assert!(from_hms_opt(23, 60, 0).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348540,"byte_end":348587,"line_start":228,"line_end":228,"column_start":5,"column_end":52}},{"value":"/ assert!(from_hms_opt(23, 59, 60).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348592,"byte_end":348640,"line_start":229,"line_end":229,"column_start":5,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348645,"byte_end":348653,"line_start":230,"line_end":230,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348658,"byte_end":348667,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349432,"byte_end":349446,"line_start":255,"line_end":255,"column_start":12,"column_end":26},"name":"from_hms_milli","qualname":"<NaiveTime>::from_hms_milli","value":"pub fn from_hms_milli(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348813,"byte_end":348883,"line_start":236,"line_end":236,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348888,"byte_end":348891,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348896,"byte_end":348937,"line_start":238,"line_end":238,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":348942,"byte_end":349009,"line_start":239,"line_end":239,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349014,"byte_end":349017,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349022,"byte_end":349084,"line_start":241,"line_end":241,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349089,"byte_end":349092,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349097,"byte_end":349110,"line_start":243,"line_end":243,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349115,"byte_end":349118,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349123,"byte_end":349131,"line_start":245,"line_end":245,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349136,"byte_end":349174,"line_start":246,"line_end":246,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349179,"byte_end":349182,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_milli(23, 56, 4, 12);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349187,"byte_end":349240,"line_start":248,"line_end":248,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349245,"byte_end":349274,"line_start":249,"line_end":249,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349279,"byte_end":349310,"line_start":250,"line_end":250,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349315,"byte_end":349345,"line_start":251,"line_end":251,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_000_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349350,"byte_end":349393,"line_start":252,"line_end":252,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349398,"byte_end":349406,"line_start":253,"line_end":253,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349411,"byte_end":349420,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350506,"byte_end":350524,"line_start":282,"line_end":282,"column_start":12,"column_end":30},"name":"from_hms_milli_opt","qualname":"<NaiveTime>::from_hms_milli_opt","value":"pub fn from_hms_milli_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349600,"byte_end":349670,"line_start":259,"line_end":259,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349675,"byte_end":349678,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349683,"byte_end":349724,"line_start":261,"line_end":261,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349729,"byte_end":349796,"line_start":262,"line_end":262,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349801,"byte_end":349804,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349809,"byte_end":349879,"line_start":264,"line_end":264,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349884,"byte_end":349887,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349892,"byte_end":349905,"line_start":266,"line_end":266,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349910,"byte_end":349913,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349918,"byte_end":349926,"line_start":268,"line_end":268,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349931,"byte_end":349957,"line_start":269,"line_end":269,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349962,"byte_end":349965,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm_opt = NaiveTime::from_hms_milli_opt;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":349970,"byte_end":350024,"line_start":271,"line_end":271,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350029,"byte_end":350032,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsm_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350037,"byte_end":350086,"line_start":273,"line_end":273,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 999).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350091,"byte_end":350145,"line_start":274,"line_end":274,"column_start":5,"column_end":59}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 1_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350150,"byte_end":350238,"line_start":275,"line_end":275,"column_start":5,"column_end":93}},{"value":"/ assert!(from_hmsm_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350243,"byte_end":350293,"line_start":276,"line_end":276,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsm_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350298,"byte_end":350349,"line_start":277,"line_end":277,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsm_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350354,"byte_end":350406,"line_start":278,"line_end":278,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 2_000).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350411,"byte_end":350467,"line_start":279,"line_end":279,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350472,"byte_end":350480,"line_start":280,"line_end":280,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350485,"byte_end":350494,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351360,"byte_end":351374,"line_start":307,"line_end":307,"column_start":12,"column_end":26},"name":"from_hms_micro","qualname":"<NaiveTime>::from_hms_micro","value":"pub fn from_hms_micro(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350733,"byte_end":350803,"line_start":288,"line_end":288,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350808,"byte_end":350811,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350816,"byte_end":350861,"line_start":290,"line_end":290,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350866,"byte_end":350933,"line_start":291,"line_end":291,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350938,"byte_end":350941,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":350946,"byte_end":351008,"line_start":293,"line_end":293,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351013,"byte_end":351016,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351021,"byte_end":351034,"line_start":295,"line_end":295,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351039,"byte_end":351042,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351047,"byte_end":351055,"line_start":297,"line_end":297,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351060,"byte_end":351098,"line_start":298,"line_end":298,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351103,"byte_end":351106,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_micro(23, 56, 4, 12_345);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351111,"byte_end":351168,"line_start":300,"line_end":300,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351173,"byte_end":351202,"line_start":301,"line_end":301,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351207,"byte_end":351238,"line_start":302,"line_end":302,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351243,"byte_end":351273,"line_start":303,"line_end":303,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351278,"byte_end":351321,"line_start":304,"line_end":304,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351326,"byte_end":351334,"line_start":305,"line_end":305,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351339,"byte_end":351348,"line_start":306,"line_end":306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352450,"byte_end":352468,"line_start":334,"line_end":334,"column_start":12,"column_end":30},"name":"from_hms_micro_opt","qualname":"<NaiveTime>::from_hms_micro_opt","value":"pub fn from_hms_micro_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351528,"byte_end":351598,"line_start":311,"line_end":311,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351603,"byte_end":351606,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351611,"byte_end":351656,"line_start":313,"line_end":313,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351661,"byte_end":351728,"line_start":314,"line_end":314,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351733,"byte_end":351736,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351741,"byte_end":351811,"line_start":316,"line_end":316,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351816,"byte_end":351819,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351824,"byte_end":351837,"line_start":318,"line_end":318,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351842,"byte_end":351845,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351850,"byte_end":351858,"line_start":320,"line_end":320,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351863,"byte_end":351889,"line_start":321,"line_end":321,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351894,"byte_end":351897,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ let from_hmsu_opt = NaiveTime::from_hms_micro_opt;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351902,"byte_end":351956,"line_start":323,"line_end":323,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351961,"byte_end":351964,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsu_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":351969,"byte_end":352018,"line_start":325,"line_end":325,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 999_999).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352023,"byte_end":352081,"line_start":326,"line_end":326,"column_start":5,"column_end":63}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 1_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352086,"byte_end":352178,"line_start":327,"line_end":327,"column_start":5,"column_end":97}},{"value":"/ assert!(from_hmsu_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352183,"byte_end":352233,"line_start":328,"line_end":328,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsu_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352238,"byte_end":352289,"line_start":329,"line_end":329,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsu_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352294,"byte_end":352346,"line_start":330,"line_end":330,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 2_000_000).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352351,"byte_end":352411,"line_start":331,"line_end":331,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352416,"byte_end":352424,"line_start":332,"line_end":332,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352429,"byte_end":352438,"line_start":333,"line_end":333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353278,"byte_end":353291,"line_start":357,"line_end":357,"column_start":12,"column_end":25},"name":"from_hms_nano","qualname":"<NaiveTime>::from_hms_nano","value":"pub fn from_hms_nano(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352647,"byte_end":352716,"line_start":338,"line_end":338,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352721,"byte_end":352724,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352729,"byte_end":352777,"line_start":340,"line_end":340,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352782,"byte_end":352849,"line_start":341,"line_end":341,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352854,"byte_end":352857,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352862,"byte_end":352923,"line_start":343,"line_end":343,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352928,"byte_end":352931,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352936,"byte_end":352949,"line_start":345,"line_end":345,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352954,"byte_end":352957,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352962,"byte_end":352970,"line_start":347,"line_end":347,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":352975,"byte_end":353013,"line_start":348,"line_end":348,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353018,"byte_end":353021,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353026,"byte_end":353086,"line_start":350,"line_end":350,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353091,"byte_end":353120,"line_start":351,"line_end":351,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353125,"byte_end":353156,"line_start":352,"line_end":352,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353161,"byte_end":353191,"line_start":353,"line_end":353,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353196,"byte_end":353239,"line_start":354,"line_end":354,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353244,"byte_end":353252,"line_start":355,"line_end":355,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353257,"byte_end":353266,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":354376,"byte_end":354393,"line_start":384,"line_end":384,"column_start":12,"column_end":29},"name":"from_hms_nano_opt","qualname":"<NaiveTime>::from_hms_nano_opt","value":"pub fn from_hms_nano_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353442,"byte_end":353511,"line_start":361,"line_end":361,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353516,"byte_end":353519,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353524,"byte_end":353572,"line_start":363,"line_end":363,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353577,"byte_end":353644,"line_start":364,"line_end":364,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353649,"byte_end":353652,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353657,"byte_end":353726,"line_start":366,"line_end":366,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353731,"byte_end":353734,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353739,"byte_end":353752,"line_start":368,"line_end":368,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353757,"byte_end":353760,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353765,"byte_end":353773,"line_start":370,"line_end":370,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353778,"byte_end":353804,"line_start":371,"line_end":371,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353809,"byte_end":353812,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ let from_hmsn_opt = NaiveTime::from_hms_nano_opt;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353817,"byte_end":353870,"line_start":373,"line_end":373,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353875,"byte_end":353878,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsn_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353883,"byte_end":353932,"line_start":375,"line_end":375,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 999_999_999).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":353937,"byte_end":353999,"line_start":376,"line_end":376,"column_start":5,"column_end":67}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":354004,"byte_end":354100,"line_start":377,"line_end":377,"column_start":5,"column_end":101}},{"value":"/ assert!(from_hmsn_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":354105,"byte_end":354155,"line_start":378,"line_end":378,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsn_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":354160,"byte_end":354211,"line_start":379,"line_end":379,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsn_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":354216,"byte_end":354268,"line_start":380,"line_end":380,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 2_000_000_000).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":354273,"byte_end":354337,"line_start":381,"line_end":381,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":354342,"byte_end":354350,"line_start":382,"line_end":382,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":354355,"byte_end":354364,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355337,"byte_end":355367,"line_start":411,"line_end":411,"column_start":12,"column_end":42},"name":"from_num_seconds_from_midnight","qualname":"<NaiveTime>::from_num_seconds_from_midnight","value":"pub fn from_num_seconds_from_midnight(u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":354680,"byte_end":354765,"line_start":392,"line_end":392,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":354770,"byte_end":354773,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":354778,"byte_end":354826,"line_start":394,"line_end":394,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":354831,"byte_end":354898,"line_start":395,"line_end":395,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":354903,"byte_end":354906,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid number of seconds and/or nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":354911,"byte_end":354969,"line_start":397,"line_end":397,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":354974,"byte_end":354977,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":354982,"byte_end":354995,"line_start":399,"line_end":399,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355000,"byte_end":355003,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355008,"byte_end":355016,"line_start":401,"line_end":401,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355021,"byte_end":355059,"line_start":402,"line_end":402,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355064,"byte_end":355067,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_num_seconds_from_midnight(86164, 12_345_678);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355072,"byte_end":355145,"line_start":404,"line_end":404,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355150,"byte_end":355179,"line_start":405,"line_end":405,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355184,"byte_end":355215,"line_start":406,"line_end":406,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355220,"byte_end":355250,"line_start":407,"line_end":407,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355255,"byte_end":355298,"line_start":408,"line_end":408,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355303,"byte_end":355311,"line_start":409,"line_end":409,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355316,"byte_end":355325,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356339,"byte_end":356373,"line_start":436,"line_end":436,"column_start":12,"column_end":46},"name":"from_num_seconds_from_midnight_opt","qualname":"<NaiveTime>::from_num_seconds_from_midnight_opt","value":"pub fn from_num_seconds_from_midnight_opt(u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355505,"byte_end":355590,"line_start":415,"line_end":415,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355595,"byte_end":355598,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355603,"byte_end":355651,"line_start":417,"line_end":417,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355656,"byte_end":355723,"line_start":418,"line_end":418,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355728,"byte_end":355731,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid number of seconds and/or nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355736,"byte_end":355802,"line_start":420,"line_end":420,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355807,"byte_end":355810,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355815,"byte_end":355828,"line_start":422,"line_end":422,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355833,"byte_end":355836,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355841,"byte_end":355849,"line_start":424,"line_end":424,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355854,"byte_end":355880,"line_start":425,"line_end":425,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355885,"byte_end":355888,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let from_nsecs_opt = NaiveTime::from_num_seconds_from_midnight_opt;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355893,"byte_end":355964,"line_start":427,"line_end":427,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355969,"byte_end":355972,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ assert!(from_nsecs_opt(0, 0).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":355977,"byte_end":356021,"line_start":429,"line_end":429,"column_start":5,"column_end":49}},{"value":"/ assert!(from_nsecs_opt(86399, 999_999_999).is_some());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356026,"byte_end":356084,"line_start":430,"line_end":430,"column_start":5,"column_end":63}},{"value":"/ assert!(from_nsecs_opt(86399, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356089,"byte_end":356181,"line_start":431,"line_end":431,"column_start":5,"column_end":97}},{"value":"/ assert!(from_nsecs_opt(86_400, 0).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356186,"byte_end":356235,"line_start":432,"line_end":432,"column_start":5,"column_end":54}},{"value":"/ assert!(from_nsecs_opt(86399, 2_000_000_000).is_none());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356240,"byte_end":356300,"line_start":433,"line_end":433,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356305,"byte_end":356313,"line_start":434,"line_end":434,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356318,"byte_end":356327,"line_start":435,"line_end":435,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359043,"byte_end":359057,"line_start":504,"line_end":504,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveTime>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveTime`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356569,"byte_end":356652,"line_start":443,"line_end":443,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356657,"byte_end":356727,"line_start":444,"line_end":444,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356732,"byte_end":356770,"line_start":445,"line_end":445,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356775,"byte_end":356778,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356783,"byte_end":356796,"line_start":447,"line_end":447,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356801,"byte_end":356804,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356809,"byte_end":356817,"line_start":449,"line_end":449,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356822,"byte_end":356848,"line_start":450,"line_end":450,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356853,"byte_end":356856,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356861,"byte_end":356912,"line_start":452,"line_end":452,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356917,"byte_end":356920,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"23:56:04\", \"%H:%M:%S\"),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356925,"byte_end":356979,"line_start":454,"line_end":454,"column_start":5,"column_end":59}},{"value":"/            Ok(NaiveTime::from_hms(23, 56, 4)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":356984,"byte_end":357035,"line_start":455,"line_end":455,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(parse_from_str(\"pm012345.6789\", \"%p%I%M%S%.f\"),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357040,"byte_end":357102,"line_start":456,"line_end":456,"column_start":5,"column_end":67}},{"value":"/            Ok(NaiveTime::from_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357107,"byte_end":357174,"line_start":457,"line_end":457,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357179,"byte_end":357187,"line_start":458,"line_end":458,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357192,"byte_end":357195,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ Date and offset is ignored for the purpose of parsing.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357200,"byte_end":357258,"line_start":460,"line_end":460,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357263,"byte_end":357266,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357271,"byte_end":357279,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357284,"byte_end":357312,"line_start":463,"line_end":463,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357317,"byte_end":357370,"line_start":464,"line_end":464,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357375,"byte_end":357456,"line_start":465,"line_end":465,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveTime::from_hms(12, 34, 56)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357461,"byte_end":357513,"line_start":466,"line_end":466,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357518,"byte_end":357526,"line_start":467,"line_end":467,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357531,"byte_end":357534,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](#leap-second-handling) are correctly handled by","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357539,"byte_end":357605,"line_start":469,"line_end":469,"column_start":5,"column_end":71}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357610,"byte_end":357672,"line_start":470,"line_end":470,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357677,"byte_end":357753,"line_start":471,"line_end":471,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357758,"byte_end":357761,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357766,"byte_end":357774,"line_start":473,"line_end":473,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357779,"byte_end":357807,"line_start":474,"line_end":474,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357812,"byte_end":357865,"line_start":475,"line_end":475,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"08:59:60.123\", \"%H:%M:%S%.f\"),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357870,"byte_end":357931,"line_start":476,"line_end":476,"column_start":5,"column_end":66}},{"value":"/            Ok(NaiveTime::from_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":357936,"byte_end":358000,"line_start":477,"line_end":477,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358005,"byte_end":358013,"line_start":478,"line_end":478,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358018,"byte_end":358021,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358026,"byte_end":358069,"line_start":480,"line_end":480,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358074,"byte_end":358145,"line_start":481,"line_end":481,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358150,"byte_end":358153,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358158,"byte_end":358166,"line_start":483,"line_end":483,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358171,"byte_end":358199,"line_start":484,"line_end":484,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358204,"byte_end":358257,"line_start":485,"line_end":485,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"7:15\", \"%H:%M\"),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358262,"byte_end":358309,"line_start":486,"line_end":486,"column_start":5,"column_end":52}},{"value":"/            Ok(NaiveTime::from_hms(7, 15, 0)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358314,"byte_end":358364,"line_start":487,"line_end":487,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358369,"byte_end":358372,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358377,"byte_end":358434,"line_start":489,"line_end":489,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"12\", \"%H\").is_err());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358439,"byte_end":358488,"line_start":490,"line_end":490,"column_start":5,"column_end":54}},{"value":"/ assert!(parse_from_str(\"17:60\", \"%H:%M\").is_err());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358493,"byte_end":358548,"line_start":491,"line_end":491,"column_start":5,"column_end":60}},{"value":"/ assert!(parse_from_str(\"24:00:00\", \"%H:%M:%S\").is_err());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358553,"byte_end":358614,"line_start":492,"line_end":492,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358619,"byte_end":358627,"line_start":493,"line_end":493,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358632,"byte_end":358635,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358640,"byte_end":358722,"line_start":495,"line_end":495,"column_start":5,"column_end":87}},{"value":"/ Here `%H` is for 24-hour clocks, unlike `%I`,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358727,"byte_end":358776,"line_start":496,"line_end":496,"column_start":5,"column_end":54}},{"value":"/ and thus can be independently determined without AM/PM.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358781,"byte_end":358840,"line_start":497,"line_end":497,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358845,"byte_end":358848,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358853,"byte_end":358861,"line_start":499,"line_end":499,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358866,"byte_end":358894,"line_start":500,"line_end":500,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358899,"byte_end":358952,"line_start":501,"line_end":501,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"13:07 AM\", \"%H:%M %p\").is_err());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":358957,"byte_end":359018,"line_start":502,"line_end":502,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359023,"byte_end":359031,"line_start":503,"line_end":503,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":360185,"byte_end":360207,"line_start":532,"line_end":532,"column_start":12,"column_end":34},"name":"overflowing_add_signed","qualname":"<NaiveTime>::overflowing_add_signed","value":"pub fn overflowing_add_signed(&Self, OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the addition.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current time,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359245,"byte_end":359291,"line_start":510,"line_end":510,"column_start":5,"column_end":51}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359296,"byte_end":359340,"line_start":511,"line_end":511,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the addition.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359345,"byte_end":359406,"line_start":512,"line_end":512,"column_start":5,"column_end":66}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359411,"byte_end":359492,"line_start":513,"line_end":513,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359497,"byte_end":359500,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359505,"byte_end":359518,"line_start":515,"line_end":515,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359523,"byte_end":359526,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359531,"byte_end":359539,"line_start":517,"line_end":517,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359544,"byte_end":359582,"line_start":518,"line_end":518,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveTime};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359587,"byte_end":359625,"line_start":519,"line_end":519,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359630,"byte_end":359633,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359638,"byte_end":359677,"line_start":521,"line_end":521,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359682,"byte_end":359685,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(11)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359690,"byte_end":359767,"line_start":523,"line_end":523,"column_start":5,"column_end":82}},{"value":"/            (from_hms(14, 4, 5), 0));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359772,"byte_end":359812,"line_start":524,"line_end":524,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(23)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359817,"byte_end":359894,"line_start":525,"line_end":525,"column_start":5,"column_end":82}},{"value":"/            (from_hms(2, 4, 5), 86_400));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359899,"byte_end":359943,"line_start":526,"line_end":526,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(-7)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":359948,"byte_end":360025,"line_start":527,"line_end":527,"column_start":5,"column_end":82}},{"value":"/            (from_hms(20, 4, 5), -86_400));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":360030,"byte_end":360076,"line_start":528,"line_end":528,"column_start":5,"column_end":51}},{"value":"/ # }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":360081,"byte_end":360088,"line_start":529,"line_end":529,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":360093,"byte_end":360101,"line_start":530,"line_end":530,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363681,"byte_end":363703,"line_start":617,"line_end":617,"column_start":12,"column_end":34},"name":"overflowing_sub_signed","qualname":"<NaiveTime>::overflowing_sub_signed","value":"pub fn overflowing_sub_signed(&Self, OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the subtraction.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current time,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":362790,"byte_end":362843,"line_start":595,"line_end":595,"column_start":5,"column_end":58}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":362848,"byte_end":362892,"line_start":596,"line_end":596,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the subtraction.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":362897,"byte_end":362961,"line_start":597,"line_end":597,"column_start":5,"column_end":69}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":362966,"byte_end":363047,"line_start":598,"line_end":598,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363052,"byte_end":363055,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363060,"byte_end":363073,"line_start":600,"line_end":600,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363078,"byte_end":363081,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363086,"byte_end":363094,"line_start":602,"line_end":602,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363099,"byte_end":363137,"line_start":603,"line_end":603,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveTime};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363142,"byte_end":363180,"line_start":604,"line_end":604,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363185,"byte_end":363188,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363193,"byte_end":363232,"line_start":606,"line_end":606,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363237,"byte_end":363240,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(2)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363245,"byte_end":363321,"line_start":608,"line_end":608,"column_start":5,"column_end":81}},{"value":"/            (from_hms(1, 4, 5), 0));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363326,"byte_end":363365,"line_start":609,"line_end":609,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(17)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363370,"byte_end":363447,"line_start":610,"line_end":610,"column_start":5,"column_end":82}},{"value":"/            (from_hms(10, 4, 5), 86_400));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363452,"byte_end":363497,"line_start":611,"line_end":611,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(-22)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363502,"byte_end":363580,"line_start":612,"line_end":612,"column_start":5,"column_end":83}},{"value":"/            (from_hms(1, 4, 5), -86_400));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363585,"byte_end":363630,"line_start":613,"line_end":613,"column_start":5,"column_end":50}},{"value":"/ # }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363635,"byte_end":363642,"line_start":614,"line_end":614,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363647,"byte_end":363655,"line_start":615,"line_end":615,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363660,"byte_end":363669,"line_start":616,"line_end":616,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":366685,"byte_end":366706,"line_start":680,"line_end":680,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveTime>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveTime` from the current time.\n Returns a `Duration` within +/- 1 day.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveTime` from the current time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363895,"byte_end":363951,"line_start":622,"line_end":622,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` within +/- 1 day.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":363956,"byte_end":363998,"line_start":623,"line_end":623,"column_start":5,"column_end":47}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364003,"byte_end":364050,"line_start":624,"line_end":624,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364055,"byte_end":364058,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](#leap-second-handling),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364063,"byte_end":364135,"line_start":626,"line_end":626,"column_start":5,"column_end":77}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364140,"byte_end":364206,"line_start":627,"line_end":627,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveTime`s themselves represents a leap second","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364211,"byte_end":364286,"line_start":628,"line_end":628,"column_start":5,"column_end":80}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364291,"byte_end":364336,"line_start":629,"line_end":629,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364341,"byte_end":364400,"line_start":630,"line_end":630,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364405,"byte_end":364408,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364413,"byte_end":364426,"line_start":632,"line_end":632,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364431,"byte_end":364434,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364439,"byte_end":364447,"line_start":634,"line_end":634,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364452,"byte_end":364490,"line_start":635,"line_end":635,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveTime};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364495,"byte_end":364533,"line_start":636,"line_end":636,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364538,"byte_end":364541,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364546,"byte_end":364592,"line_start":638,"line_end":638,"column_start":5,"column_end":51}},{"value":"/ let since = NaiveTime::signed_duration_since;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364597,"byte_end":364646,"line_start":639,"line_end":639,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364651,"byte_end":364654,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 900)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364659,"byte_end":364730,"line_start":641,"line_end":641,"column_start":5,"column_end":76}},{"value":"/            Duration::zero());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364735,"byte_end":364768,"line_start":642,"line_end":642,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 875)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364773,"byte_end":364844,"line_start":643,"line_end":643,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(25));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364849,"byte_end":364892,"line_start":644,"line_end":644,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 6, 925)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364897,"byte_end":364968,"line_start":645,"line_end":645,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(975));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":364973,"byte_end":365017,"line_start":646,"line_end":646,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 0, 900)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365022,"byte_end":365093,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(7));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365098,"byte_end":365135,"line_start":648,"line_end":648,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 0, 7, 900)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365140,"byte_end":365211,"line_start":649,"line_end":649,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(5 * 60));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365216,"byte_end":365258,"line_start":650,"line_end":650,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(0, 5, 7, 900)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365263,"byte_end":365334,"line_start":651,"line_end":651,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3 * 3600));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365339,"byte_end":365383,"line_start":652,"line_end":652,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(4, 5, 7, 900)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365388,"byte_end":365459,"line_start":653,"line_end":653,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(-3600));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365464,"byte_end":365505,"line_start":654,"line_end":654,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(2, 4, 6, 800)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365510,"byte_end":365581,"line_start":655,"line_end":655,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3600 + 60 + 1) + Duration::milliseconds(100));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365586,"byte_end":365665,"line_start":656,"line_end":656,"column_start":5,"column_end":84}},{"value":"/ # }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365670,"byte_end":365677,"line_start":657,"line_end":657,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365682,"byte_end":365690,"line_start":658,"line_end":658,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365695,"byte_end":365698,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365703,"byte_end":365765,"line_start":660,"line_end":660,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365770,"byte_end":365816,"line_start":661,"line_end":661,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365821,"byte_end":365824,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365829,"byte_end":365837,"line_start":663,"line_end":663,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365842,"byte_end":365880,"line_start":664,"line_end":664,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveTime};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365885,"byte_end":365925,"line_start":665,"line_end":665,"column_start":5,"column_end":45}},{"value":"/ # let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365930,"byte_end":365978,"line_start":666,"line_end":666,"column_start":5,"column_end":53}},{"value":"/ # let since = NaiveTime::signed_duration_since;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":365983,"byte_end":366034,"line_start":667,"line_end":667,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":366039,"byte_end":366112,"line_start":668,"line_end":668,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":366117,"byte_end":366154,"line_start":669,"line_end":669,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_500), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":366159,"byte_end":366232,"line_start":670,"line_end":670,"column_start":5,"column_end":78}},{"value":"/            Duration::milliseconds(1500));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":366237,"byte_end":366282,"line_start":671,"line_end":671,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 0, 0)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":366287,"byte_end":366359,"line_start":672,"line_end":672,"column_start":5,"column_end":77}},{"value":"/            Duration::seconds(60));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":366364,"byte_end":366402,"line_start":673,"line_end":673,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 0, 0), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":366407,"byte_end":366480,"line_start":674,"line_end":674,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":366485,"byte_end":366522,"line_start":675,"line_end":675,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":366527,"byte_end":366605,"line_start":676,"line_end":676,"column_start":5,"column_end":83}},{"value":"/            Duration::seconds(61));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":366610,"byte_end":366648,"line_start":677,"line_end":677,"column_start":5,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":366653,"byte_end":366660,"line_start":678,"line_end":678,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":366665,"byte_end":366673,"line_start":679,"line_end":679,"column_start":5,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":1629},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":412151,"byte_end":412155,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"Date","qualname":"::date::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":1631},{"krate":0,"index":1632}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date with time zone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":410778,"byte_end":410820,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":410821,"byte_end":410824,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This type should be considered ambiguous at best,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":410825,"byte_end":410878,"line_start":24,"line_end":24,"column_start":1,"column_end":54}},{"value":"/ due to the inherent lack of precision required for the time zone resolution.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":410879,"byte_end":410959,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ For serialization and deserialization uses, it is best to use `NaiveDate` instead.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":410960,"byte_end":411046,"line_start":26,"line_end":26,"column_start":1,"column_end":87}},{"value":"/ There are some guarantees on the usage of `Date<Tz>`:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411047,"byte_end":411104,"line_start":27,"line_end":27,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411105,"byte_end":411108,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ - If properly constructed via `TimeZone::ymd` and others without an error,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411109,"byte_end":411187,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/   the corresponding local date should exist for at least a moment.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411188,"byte_end":411258,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/   (It may still have a gap from the offset changes.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411259,"byte_end":411315,"line_start":31,"line_end":31,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411316,"byte_end":411319,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ - The `TimeZone` is free to assign *any* `Offset` to the local date,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411320,"byte_end":411392,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/   as long as that offset did occur in given day.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411393,"byte_end":411445,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/   For example, if `2015-03-08T01:59-08:00` is followed by `2015-03-08T03:00-07:00`,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411446,"byte_end":411533,"line_start":35,"line_end":35,"column_start":1,"column_end":88}},{"value":"/   it may produce either `2015-03-08-08:00` or `2015-03-08-07:00`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411534,"byte_end":411602,"line_start":36,"line_end":36,"column_start":1,"column_end":69}},{"value":"/   but *not* `2015-03-08+00:00` and others.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411603,"byte_end":411649,"line_start":37,"line_end":37,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411650,"byte_end":411653,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ - Once constructed as a full `DateTime`,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411654,"byte_end":411698,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/   `DateTime::date` and other associated methods should return those for the original `Date`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411699,"byte_end":411795,"line_start":40,"line_end":40,"column_start":1,"column_end":97}},{"value":"/   For example, if `dt = tz.ymd(y,m,d).hms(h,n,s)` were valid, `dt.date() == tz.ymd(y,m,d)`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411796,"byte_end":411891,"line_start":41,"line_end":41,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411892,"byte_end":411895,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ - The date is timezone-agnostic up to one day (i.e. practically always),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411896,"byte_end":411972,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/   so the local date and UTC date should be equal for most cases","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":411973,"byte_end":412040,"line_start":44,"line_end":44,"column_start":1,"column_end":68}},{"value":"/   even though the raw calculation between `NaiveDate` and `Duration` may not.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":412041,"byte_end":412122,"line_start":45,"line_end":45,"column_start":1,"column_end":82}}]},{"kind":"Const","id":{"krate":0,"index":733},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":412263,"byte_end":412271,"line_start":53,"line_end":53,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::date::MIN_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Date`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":412220,"byte_end":412252,"line_start":52,"line_end":52,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":734},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":412373,"byte_end":412381,"line_start":55,"line_end":55,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::date::MAX_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Date`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":412330,"byte_end":412362,"line_start":54,"line_end":54,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":412729,"byte_end":412737,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<Date<Tz>>::from_utc","value":"pub fn from_utc(NaiveDate, Tz::Offset) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` with given *UTC* date and offset.\n The local date should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"/ Makes a new `Date` with given *UTC* date and offset.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":412475,"byte_end":412531,"line_start":58,"line_end":58,"column_start":5,"column_end":61}},{"value":"/ The local date should be constructed via the `TimeZone` trait.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":412536,"byte_end":412602,"line_start":59,"line_end":59,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":412708,"byte_end":412717,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":413038,"byte_end":413046,"line_start":72,"line_end":72,"column_start":12,"column_end":20},"name":"and_time","qualname":"<Date<Tz>>::and_time","value":"pub fn and_time(&Self, NaiveTime) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":412844,"byte_end":412915,"line_start":67,"line_end":67,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":412920,"byte_end":412968,"line_start":68,"line_end":68,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":412973,"byte_end":412976,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid datetime.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":412981,"byte_end":413012,"line_start":70,"line_end":70,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":413017,"byte_end":413026,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":413443,"byte_end":413450,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<Date<Tz>>::and_hms","value":"pub fn and_hms(&Self, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":413228,"byte_end":413302,"line_start":77,"line_end":77,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":413307,"byte_end":413355,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":413360,"byte_end":413363,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":413368,"byte_end":413417,"line_start":80,"line_end":80,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":413422,"byte_end":413431,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":413805,"byte_end":413816,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<Date<Tz>>::and_hms_opt","value":"pub fn and_hms_opt(&Self, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":413582,"byte_end":413656,"line_start":86,"line_end":86,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":413661,"byte_end":413709,"line_start":87,"line_end":87,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":413714,"byte_end":413717,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":413722,"byte_end":413779,"line_start":89,"line_end":89,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":413784,"byte_end":413793,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":414303,"byte_end":414316,"line_start":101,"line_end":101,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<Date<Tz>>::and_hms_milli","value":"pub fn and_hms_milli(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":413977,"byte_end":414064,"line_start":95,"line_end":95,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":414069,"byte_end":414149,"line_start":96,"line_end":96,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":414154,"byte_end":414202,"line_start":97,"line_end":97,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":414207,"byte_end":414210,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":414215,"byte_end":414277,"line_start":99,"line_end":99,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":414282,"byte_end":414291,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":414807,"byte_end":414824,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<Date<Tz>>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":414473,"byte_end":414560,"line_start":105,"line_end":105,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":414565,"byte_end":414645,"line_start":106,"line_end":106,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":414650,"byte_end":414698,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":414703,"byte_end":414706,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":414711,"byte_end":414781,"line_start":109,"line_end":109,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":414786,"byte_end":414795,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":415387,"byte_end":415400,"line_start":127,"line_end":127,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<Date<Tz>>::and_hms_micro","value":"pub fn and_hms_micro(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":415057,"byte_end":415144,"line_start":121,"line_end":121,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":415149,"byte_end":415233,"line_start":122,"line_end":122,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":415238,"byte_end":415286,"line_start":123,"line_end":123,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":415291,"byte_end":415294,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":415299,"byte_end":415361,"line_start":125,"line_end":125,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":415366,"byte_end":415375,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":415895,"byte_end":415912,"line_start":137,"line_end":137,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<Date<Tz>>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":415557,"byte_end":415644,"line_start":131,"line_end":131,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":415649,"byte_end":415733,"line_start":132,"line_end":132,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":415738,"byte_end":415786,"line_start":133,"line_end":133,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":415791,"byte_end":415794,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":415799,"byte_end":415869,"line_start":135,"line_end":135,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":415874,"byte_end":415883,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":416476,"byte_end":416488,"line_start":153,"line_end":153,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<Date<Tz>>::and_hms_nano","value":"pub fn and_hms_nano(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":416145,"byte_end":416231,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":416236,"byte_end":416323,"line_start":148,"line_end":148,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":416328,"byte_end":416376,"line_start":149,"line_end":149,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":416381,"byte_end":416384,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":416389,"byte_end":416450,"line_start":151,"line_end":151,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":416455,"byte_end":416464,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":416981,"byte_end":416997,"line_start":163,"line_end":163,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<Date<Tz>>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":416642,"byte_end":416728,"line_start":157,"line_end":157,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":416733,"byte_end":416820,"line_start":158,"line_end":158,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":416825,"byte_end":416873,"line_start":159,"line_end":159,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":416878,"byte_end":416881,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":416886,"byte_end":416955,"line_start":161,"line_end":161,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":416960,"byte_end":416969,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417361,"byte_end":417365,"line_start":177,"line_end":177,"column_start":12,"column_end":16},"name":"succ","qualname":"<Date<Tz>>::succ","value":"pub fn succ(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417227,"byte_end":417268,"line_start":173,"line_end":173,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417273,"byte_end":417276,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417281,"byte_end":417335,"line_start":175,"line_end":175,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417340,"byte_end":417349,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417587,"byte_end":417595,"line_start":185,"line_end":185,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<Date<Tz>>::succ_opt","value":"pub fn succ_opt(&Self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417445,"byte_end":417486,"line_start":181,"line_end":181,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417491,"byte_end":417494,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417499,"byte_end":417561,"line_start":183,"line_end":183,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417566,"byte_end":417575,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417855,"byte_end":417859,"line_start":193,"line_end":193,"column_start":12,"column_end":16},"name":"pred","qualname":"<Date<Tz>>::pred","value":"pub fn pred(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417719,"byte_end":417761,"line_start":189,"line_end":189,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417766,"byte_end":417769,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417774,"byte_end":417829,"line_start":191,"line_end":191,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417834,"byte_end":417843,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418083,"byte_end":418091,"line_start":201,"line_end":201,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<Date<Tz>>::pred_opt","value":"pub fn pred_opt(&Self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417939,"byte_end":417981,"line_start":197,"line_end":197,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417986,"byte_end":417989,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":417994,"byte_end":418057,"line_start":199,"line_end":199,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418062,"byte_end":418071,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418285,"byte_end":418291,"line_start":207,"line_end":207,"column_start":12,"column_end":18},"name":"offset","qualname":"<Date<Tz>>::offset","value":"pub fn offset(&Self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418215,"byte_end":418259,"line_start":205,"line_end":205,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418264,"byte_end":418273,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418412,"byte_end":418420,"line_start":213,"line_end":213,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Date<Tz>>::timezone","value":"pub fn timezone(&Self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418348,"byte_end":418386,"line_start":211,"line_end":211,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418391,"byte_end":418400,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418646,"byte_end":418659,"line_start":220,"line_end":220,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<Date<Tz>>::with_timezone","value":"pub fn with_timezone<Tz2: TimeZone>(&Self, &Tz2) -> Date<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `Date` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418491,"byte_end":418528,"line_start":217,"line_end":217,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `Date` (but will change the string representation).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418533,"byte_end":418620,"line_start":218,"line_end":218,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418625,"byte_end":418634,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418891,"byte_end":418909,"line_start":228,"line_end":228,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<Date<Tz>>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418755,"byte_end":418801,"line_start":224,"line_end":224,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418806,"byte_end":418809,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418814,"byte_end":418865,"line_start":226,"line_end":226,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":418870,"byte_end":418879,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419229,"byte_end":419247,"line_start":237,"line_end":237,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<Date<Tz>>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419086,"byte_end":419139,"line_start":233,"line_end":233,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419144,"byte_end":419147,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419152,"byte_end":419203,"line_start":235,"line_end":235,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419208,"byte_end":419217,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419675,"byte_end":419696,"line_start":248,"line_end":248,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<Date<Tz>>::signed_duration_since","value":"pub fn signed_duration_since<Tz2: TimeZone>(Self, Date<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `Date` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `Date` from the current date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419424,"byte_end":419475,"line_start":242,"line_end":242,"column_start":5,"column_end":56}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419480,"byte_end":419525,"line_start":243,"line_end":243,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419530,"byte_end":419533,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419538,"byte_end":419585,"line_start":245,"line_end":245,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419590,"byte_end":419649,"line_start":246,"line_end":246,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419654,"byte_end":419663,"line_start":247,"line_end":247,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419879,"byte_end":419888,"line_start":254,"line_end":254,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<Date<Tz>>::naive_utc","value":"pub fn naive_utc(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC date.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419812,"byte_end":419853,"line_start":252,"line_end":252,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419858,"byte_end":419867,"line_start":253,"line_end":253,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":420198,"byte_end":420209,"line_start":264,"line_end":264,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<Date<Tz>>::naive_local","value":"pub fn naive_local(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local date.","sig":null,"attributes":[{"value":"/ Returns a view to the naive local date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419940,"byte_end":419983,"line_start":258,"line_end":258,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419988,"byte_end":419991,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This is technically the same as [`naive_utc`](#method.naive_utc)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":419996,"byte_end":420064,"line_start":260,"line_end":260,"column_start":5,"column_end":73}},{"value":"/ because the offset is restricted to never exceed one day,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":420069,"byte_end":420130,"line_start":261,"line_end":261,"column_start":5,"column_end":66}},{"value":"/ but provided for the consistency.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":420135,"byte_end":420172,"line_start":262,"line_end":262,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":420177,"byte_end":420186,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1637},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427404,"byte_end":427408,"line_start":40,"line_end":40,"column_start":5,"column_end":9},"name":"Secs","qualname":"::datetime::SecondsFormat::Secs","value":"SecondsFormat::Secs","parent":{"krate":0,"index":1636},"children":[],"decl_id":null,"docs":" Format whole seconds only, with no decimal point nor subseconds.\n","sig":null,"attributes":[{"value":"/ Format whole seconds only, with no decimal point nor subseconds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427331,"byte_end":427399,"line_start":39,"line_end":39,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1639},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427547,"byte_end":427553,"line_start":44,"line_end":44,"column_start":5,"column_end":11},"name":"Millis","qualname":"::datetime::SecondsFormat::Millis","value":"SecondsFormat::Millis","parent":{"krate":0,"index":1636},"children":[],"decl_id":null,"docs":" Use fixed 3 subsecond digits. This corresponds to\n [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n","sig":null,"attributes":[{"value":"/ Use fixed 3 subsecond digits. This corresponds to","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427415,"byte_end":427468,"line_start":42,"line_end":42,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427473,"byte_end":427542,"line_start":43,"line_end":43,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1641},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427692,"byte_end":427698,"line_start":48,"line_end":48,"column_start":5,"column_end":11},"name":"Micros","qualname":"::datetime::SecondsFormat::Micros","value":"SecondsFormat::Micros","parent":{"krate":0,"index":1636},"children":[],"decl_id":null,"docs":" Use fixed 6 subsecond digits. This corresponds to\n [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n","sig":null,"attributes":[{"value":"/ Use fixed 6 subsecond digits. This corresponds to","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427560,"byte_end":427613,"line_start":46,"line_end":46,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427618,"byte_end":427687,"line_start":47,"line_end":47,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1643},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427837,"byte_end":427842,"line_start":52,"line_end":52,"column_start":5,"column_end":10},"name":"Nanos","qualname":"::datetime::SecondsFormat::Nanos","value":"SecondsFormat::Nanos","parent":{"krate":0,"index":1636},"children":[],"decl_id":null,"docs":" Use fixed 9 subsecond digits. This corresponds to\n [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n","sig":null,"attributes":[{"value":"/ Use fixed 9 subsecond digits. This corresponds to","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427705,"byte_end":427758,"line_start":50,"line_end":50,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427763,"byte_end":427832,"line_start":51,"line_end":51,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1645},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428078,"byte_end":428084,"line_start":57,"line_end":57,"column_start":5,"column_end":11},"name":"AutoSi","qualname":"::datetime::SecondsFormat::AutoSi","value":"SecondsFormat::AutoSi","parent":{"krate":0,"index":1636},"children":[],"decl_id":null,"docs":" Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n display all available non-zero sub-second digits.  This corresponds to\n [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427849,"byte_end":427922,"line_start":54,"line_end":54,"column_start":5,"column_end":78}},{"value":"/ display all available non-zero sub-second digits.  This corresponds to","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427927,"byte_end":428001,"line_start":55,"line_end":55,"column_start":5,"column_end":79}},{"value":"/ [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428006,"byte_end":428073,"line_start":56,"line_end":56,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1647},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428144,"byte_end":428159,"line_start":61,"line_end":61,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::datetime::SecondsFormat::__NonExhaustive","value":"SecondsFormat::__NonExhaustive","parent":{"krate":0,"index":1636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1636},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427311,"byte_end":427324,"line_start":38,"line_end":38,"column_start":10,"column_end":23},"name":"SecondsFormat","qualname":"::datetime::SecondsFormat","value":"pub enum SecondsFormat {\n\n    /// Format whole seconds only, with no decimal point nor subseconds.\n    Secs,\n\n    /// Use fixed 3 subsecond digits. This corresponds to\n    /// [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n    Millis,\n\n    /// Use fixed 6 subsecond digits. This corresponds to\n    /// [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n    Micros,\n\n    /// Use fixed 9 subsecond digits. This corresponds to\n    /// [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n    Nanos,\n\n    /// Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n    /// display all available non-zero sub-second digits.  This corresponds to\n    /// [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n    AutoSi,\n\n    #[doc(hidden)]\n    __NonExhaustive,\n}","parent":null,"children":[{"krate":0,"index":1637},{"krate":0,"index":1639},{"krate":0,"index":1641},{"krate":0,"index":1643},{"krate":0,"index":1645},{"krate":0,"index":1647}],"decl_id":null,"docs":" Specific formatting options for seconds. This may be extended in the\n future, so exhaustive matching in external code is not recommended.","sig":null,"attributes":[{"value":"/ Specific formatting options for seconds. This may be extended in the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427048,"byte_end":427120,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/ future, so exhaustive matching in external code is not recommended.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427121,"byte_end":427192,"line_start":34,"line_end":34,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427193,"byte_end":427196,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ See the `TimeZone::to_rfc3339_opts` function for usage.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":427197,"byte_end":427256,"line_start":36,"line_end":36,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1660},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428457,"byte_end":428465,"line_start":70,"line_end":70,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::datetime::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":1662},{"krate":0,"index":1663}],"decl_id":null,"docs":" ISO 8601 combined date and time with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time with time zone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428164,"byte_end":428215,"line_start":64,"line_end":64,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428216,"byte_end":428219,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ There are some constructors implemented here (the `from_*` methods), but","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428220,"byte_end":428296,"line_start":66,"line_end":66,"column_start":1,"column_end":77}},{"value":"/ the general-purpose constructors are all via the methods on the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428297,"byte_end":428364,"line_start":67,"line_end":67,"column_start":1,"column_end":68}},{"value":"/ [`TimeZone`](./offset/trait.TimeZone.html) implementations.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428365,"byte_end":428428,"line_start":68,"line_end":68,"column_start":1,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":870},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428590,"byte_end":428602,"line_start":76,"line_end":76,"column_start":11,"column_end":23},"name":"MIN_DATETIME","qualname":"::datetime::MIN_DATETIME","value":"DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `DateTime<Utc>`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `DateTime<Utc>`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428538,"byte_end":428579,"line_start":75,"line_end":75,"column_start":1,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":871},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428729,"byte_end":428741,"line_start":78,"line_end":78,"column_start":11,"column_end":23},"name":"MAX_DATETIME","qualname":"::datetime::MAX_DATETIME","value":"DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `DateTime<Utc>`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `DateTime<Utc>`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428677,"byte_end":428718,"line_start":77,"line_end":77,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429384,"byte_end":429392,"line_start":95,"line_end":95,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<DateTime<Tz>>::from_utc","value":"pub fn from_utc(NaiveDateTime, Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given *UTC* datetime and offset.\n The local datetime should be constructed via the `TimeZone` trait.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` with given *UTC* datetime and offset.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428855,"byte_end":428919,"line_start":81,"line_end":81,"column_start":5,"column_end":69}},{"value":"/ The local datetime should be constructed via the `TimeZone` trait.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428924,"byte_end":428994,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428999,"byte_end":429002,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429007,"byte_end":429020,"line_start":84,"line_end":84,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429025,"byte_end":429028,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429033,"byte_end":429041,"line_start":86,"line_end":86,"column_start":5,"column_end":13}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429046,"byte_end":429103,"line_start":87,"line_end":87,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429108,"byte_end":429111,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429116,"byte_end":429198,"line_start":89,"line_end":89,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429203,"byte_end":429244,"line_start":90,"line_end":90,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429249,"byte_end":429257,"line_start":91,"line_end":91,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429363,"byte_end":429372,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429580,"byte_end":429584,"line_start":101,"line_end":101,"column_start":12,"column_end":16},"name":"date","qualname":"<DateTime<Tz>>::date","value":"pub fn date(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.\n","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429523,"byte_end":429554,"line_start":99,"line_end":99,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429559,"byte_end":429568,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429809,"byte_end":429813,"line_start":108,"line_end":108,"column_start":12,"column_end":16},"name":"time","qualname":"<DateTime<Tz>>::time","value":"pub fn time(&Self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n Unlike `date`, this is not associated to the time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429688,"byte_end":429719,"line_start":105,"line_end":105,"column_start":5,"column_end":36}},{"value":"/ Unlike `date`, this is not associated to the time zone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429724,"byte_end":429783,"line_start":106,"line_end":106,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429788,"byte_end":429797,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430030,"byte_end":430039,"line_start":115,"line_end":115,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<DateTime<Tz>>::timestamp","value":"pub fn timestamp(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n (aka \"UNIX timestamp\").\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429896,"byte_end":429972,"line_start":112,"line_end":112,"column_start":5,"column_end":81}},{"value":"/ (aka \"UNIX timestamp\").","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":429977,"byte_end":430004,"line_start":113,"line_end":113,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430009,"byte_end":430018,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430860,"byte_end":430876,"line_start":139,"line_end":139,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<DateTime<Tz>>::timestamp_millis","value":"pub fn timestamp_millis(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-milliseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-milliseconds since January 1, 1970 UTC","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430101,"byte_end":430174,"line_start":119,"line_end":119,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430179,"byte_end":430182,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430187,"byte_end":430261,"line_start":121,"line_end":121,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584 Million. (If this is a problem, please file","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430266,"byte_end":430339,"line_start":122,"line_end":122,"column_start":5,"column_end":78}},{"value":"/ an issue to let me know what domain needs millisecond precision over","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430344,"byte_end":430416,"line_start":123,"line_end":123,"column_start":5,"column_end":77}},{"value":"/ billions of years, I'm curious.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430421,"byte_end":430457,"line_start":124,"line_end":124,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430462,"byte_end":430465,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430470,"byte_end":430483,"line_start":126,"line_end":126,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430488,"byte_end":430491,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430496,"byte_end":430504,"line_start":128,"line_end":128,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430509,"byte_end":430529,"line_start":129,"line_end":129,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430534,"byte_end":430559,"line_start":130,"line_end":130,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430564,"byte_end":430567,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430572,"byte_end":430633,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430638,"byte_end":430683,"line_start":133,"line_end":133,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430688,"byte_end":430691,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430696,"byte_end":430759,"line_start":135,"line_end":135,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430764,"byte_end":430821,"line_start":136,"line_end":136,"column_start":5,"column_end":62}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430826,"byte_end":430834,"line_start":137,"line_end":137,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430839,"byte_end":430848,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431698,"byte_end":431713,"line_start":163,"line_end":163,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<DateTime<Tz>>::timestamp_nanos","value":"pub fn timestamp_nanos(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":430945,"byte_end":431017,"line_start":143,"line_end":143,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431022,"byte_end":431025,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431030,"byte_end":431104,"line_start":145,"line_end":145,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584. (If this is a problem, please file","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431109,"byte_end":431174,"line_start":146,"line_end":146,"column_start":5,"column_end":70}},{"value":"/ an issue to let me know what domain needs nanosecond precision over","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431179,"byte_end":431250,"line_start":147,"line_end":147,"column_start":5,"column_end":76}},{"value":"/ millennia, I'm curious.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431255,"byte_end":431283,"line_start":148,"line_end":148,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431288,"byte_end":431291,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431296,"byte_end":431309,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431314,"byte_end":431317,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431322,"byte_end":431330,"line_start":152,"line_end":152,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431335,"byte_end":431355,"line_start":153,"line_end":153,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431360,"byte_end":431385,"line_start":154,"line_end":154,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431390,"byte_end":431393,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431398,"byte_end":431458,"line_start":156,"line_end":156,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431463,"byte_end":431515,"line_start":157,"line_end":157,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431520,"byte_end":431523,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431528,"byte_end":431590,"line_start":159,"line_end":159,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_000_000_000_555);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431595,"byte_end":431659,"line_start":160,"line_end":160,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431664,"byte_end":431672,"line_start":161,"line_end":161,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431677,"byte_end":431686,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432043,"byte_end":432066,"line_start":173,"line_end":173,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<DateTime<Tz>>::timestamp_subsec_millis","value":"pub fn timestamp_subsec_millis(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last second boundary","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431781,"byte_end":431850,"line_start":167,"line_end":167,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431855,"byte_end":431858,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431863,"byte_end":431922,"line_start":169,"line_end":169,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431927,"byte_end":431930,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of milliseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":431935,"byte_end":432017,"line_start":171,"line_end":171,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432022,"byte_end":432031,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432408,"byte_end":432431,"line_start":183,"line_end":183,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<DateTime<Tz>>::timestamp_subsec_micros","value":"pub fn timestamp_subsec_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last second boundary","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432142,"byte_end":432211,"line_start":177,"line_end":177,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432216,"byte_end":432219,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432224,"byte_end":432287,"line_start":179,"line_end":179,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432292,"byte_end":432295,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of microseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432300,"byte_end":432382,"line_start":181,"line_end":181,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432387,"byte_end":432396,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432775,"byte_end":432797,"line_start":193,"line_end":193,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<DateTime<Tz>>::timestamp_subsec_nanos","value":"pub fn timestamp_subsec_nanos(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last second boundary","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432507,"byte_end":432575,"line_start":187,"line_end":187,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432580,"byte_end":432583,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999_999","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432588,"byte_end":432655,"line_start":189,"line_end":189,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432660,"byte_end":432663,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of nanoseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432668,"byte_end":432749,"line_start":191,"line_end":191,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432754,"byte_end":432763,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432942,"byte_end":432948,"line_start":199,"line_end":199,"column_start":12,"column_end":18},"name":"offset","qualname":"<DateTime<Tz>>::offset","value":"pub fn offset(&Self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432872,"byte_end":432916,"line_start":197,"line_end":197,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":432921,"byte_end":432930,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433069,"byte_end":433077,"line_start":205,"line_end":205,"column_start":12,"column_end":20},"name":"timezone","qualname":"<DateTime<Tz>>::timezone","value":"pub fn timezone(&Self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433005,"byte_end":433043,"line_start":203,"line_end":203,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433048,"byte_end":433057,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433307,"byte_end":433320,"line_start":212,"line_end":212,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<DateTime<Tz>>::with_timezone","value":"pub fn with_timezone<Tz2: TimeZone>(&Self, &Tz2) -> DateTime<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `DateTime` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433148,"byte_end":433185,"line_start":209,"line_end":209,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `DateTime` (but will change the string representation).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433190,"byte_end":433281,"line_start":210,"line_end":210,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433286,"byte_end":433295,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433573,"byte_end":433591,"line_start":220,"line_end":220,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<DateTime<Tz>>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433428,"byte_end":433483,"line_start":216,"line_end":216,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433488,"byte_end":433491,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433496,"byte_end":433547,"line_start":218,"line_end":218,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433552,"byte_end":433561,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433957,"byte_end":433975,"line_start":230,"line_end":230,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<DateTime<Tz>>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433805,"byte_end":433867,"line_start":226,"line_end":226,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433872,"byte_end":433875,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433880,"byte_end":433931,"line_start":228,"line_end":228,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":433936,"byte_end":433945,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":434331,"byte_end":434352,"line_start":239,"line_end":239,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<DateTime<Tz>>::signed_duration_since","value":"pub fn signed_duration_since<Tz2: TimeZone>(Self, DateTime<Tz2>)\n-> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `DateTime` from the current date and time.\n This does not overflow or underflow at all.\n","sig":null,"attributes":[{"value":"/ Subtracts another `DateTime` from the current date and time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":434189,"byte_end":434253,"line_start":236,"line_end":236,"column_start":5,"column_end":69}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":434258,"byte_end":434305,"line_start":237,"line_end":237,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":434310,"byte_end":434319,"line_start":238,"line_end":238,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":434551,"byte_end":434560,"line_start":245,"line_end":245,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<DateTime<Tz>>::naive_utc","value":"pub fn naive_utc(&Self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC datetime.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":434480,"byte_end":434525,"line_start":243,"line_end":243,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":434530,"byte_end":434539,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":434693,"byte_end":434704,"line_start":251,"line_end":251,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<DateTime<Tz>>::naive_local","value":"pub fn naive_local(&Self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive local datetime.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":434620,"byte_end":434667,"line_start":249,"line_end":249,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":434672,"byte_end":434681,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438511,"byte_end":438529,"line_start":347,"line_end":347,"column_start":12,"column_end":30},"name":"parse_from_rfc2822","qualname":"<DateTime<FixedOffset>>::parse_from_rfc2822","value":"pub fn parse_from_rfc2822(&str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":437937,"byte_end":438022,"line_start":334,"line_end":334,"column_start":5,"column_end":90}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438027,"byte_end":438089,"line_start":335,"line_end":335,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438094,"byte_end":438097,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ RFC 2822 is the internet message standard that specifices the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438102,"byte_end":438167,"line_start":337,"line_end":337,"column_start":5,"column_end":70}},{"value":"/ representation of times in HTTP and email headers.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438172,"byte_end":438226,"line_start":338,"line_end":338,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438231,"byte_end":438234,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438239,"byte_end":438246,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438251,"byte_end":438303,"line_start":341,"line_end":341,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438308,"byte_end":438323,"line_start":342,"line_end":342,"column_start":5,"column_end":20}},{"value":"/     DateTime::parse_from_rfc2822(\"Wed, 18 Feb 2015 23:16:09 GMT\").unwrap(),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438328,"byte_end":438407,"line_start":343,"line_end":343,"column_start":5,"column_end":84}},{"value":"/     FixedOffset::east(0).ymd(2015, 2, 18).and_hms(23, 16, 9)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438412,"byte_end":438476,"line_start":344,"line_end":344,"column_start":5,"column_end":69}},{"value":"/ );","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438481,"byte_end":438487,"line_start":345,"line_end":345,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438492,"byte_end":438499,"line_start":346,"line_end":346,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":439154,"byte_end":439172,"line_start":359,"line_end":359,"column_start":12,"column_end":30},"name":"parse_from_rfc3339","qualname":"<DateTime<FixedOffset>>::parse_from_rfc3339","value":"pub fn parse_from_rfc3339(&str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438785,"byte_end":438878,"line_start":354,"line_end":354,"column_start":5,"column_end":98}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438883,"byte_end":438945,"line_start":355,"line_end":355,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438950,"byte_end":438953,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ Why isn't this named `parse_from_iso8601`? That's because ISO 8601 allows some freedom","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":438958,"byte_end":439048,"line_start":357,"line_end":357,"column_start":5,"column_end":95}},{"value":"/ over the syntax and RFC 3339 exercises that freedom to rigidly define a fixed format.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":439053,"byte_end":439142,"line_start":358,"line_end":358,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":440380,"byte_end":440394,"line_start":386,"line_end":386,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<DateTime<FixedOffset>>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a new `DateTime` with a parsed `FixedOffset`.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":439428,"byte_end":439484,"line_start":366,"line_end":366,"column_start":5,"column_end":61}},{"value":"/ returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":439489,"byte_end":439546,"line_start":367,"line_end":367,"column_start":5,"column_end":62}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":439551,"byte_end":439620,"line_start":368,"line_end":368,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":439625,"byte_end":439663,"line_start":369,"line_end":369,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":439668,"byte_end":439671,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ See also `Offset::datetime_from_str` which gives a local `DateTime` on specific time zone.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":439676,"byte_end":439770,"line_start":371,"line_end":371,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":439775,"byte_end":439778,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ Note that this method *requires a timezone* in the string. See","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":439783,"byte_end":439849,"line_start":373,"line_end":373,"column_start":5,"column_end":71}},{"value":"/ [`NaiveDateTime::parse_from_str`](./naive/struct.NaiveDateTime.html#method.parse_from_str)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":439854,"byte_end":439948,"line_start":374,"line_end":374,"column_start":5,"column_end":99}},{"value":"/ for a version that does not require a timezone in the to-be-parsed str.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":439953,"byte_end":440028,"line_start":375,"line_end":375,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":440033,"byte_end":440036,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":440041,"byte_end":440054,"line_start":377,"line_end":377,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":440059,"byte_end":440062,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":440067,"byte_end":440078,"line_start":379,"line_end":379,"column_start":5,"column_end":16}},{"value":"/ use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":440083,"byte_end":440133,"line_start":380,"line_end":380,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":440138,"byte_end":440141,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::parse_from_str(","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":440146,"byte_end":440184,"line_start":382,"line_end":382,"column_start":5,"column_end":43}},{"value":"/     \"1983 Apr 13 12:09:14.274 +0000\", \"%Y %b %d %H:%M:%S%.3f %z\");","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":440189,"byte_end":440259,"line_start":383,"line_end":383,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(dt, Ok(FixedOffset::east(0).ymd(1983, 4, 13).and_hms_milli(12, 9, 14, 274)));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":440264,"byte_end":440356,"line_start":384,"line_end":384,"column_start":5,"column_end":97}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":440361,"byte_end":440368,"line_start":385,"line_end":385,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":991},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","parent":null,"children":[{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1667},{"krate":0,"index":1669},{"krate":0,"index":1671},{"krate":0,"index":1678},{"krate":0,"index":1675},{"krate":0,"index":1676},{"krate":0,"index":1672},{"krate":0,"index":1673},{"krate":0,"index":1680},{"krate":0,"index":1697},{"krate":0,"index":1695},{"krate":0,"index":1692},{"krate":0,"index":1693},{"krate":0,"index":1689},{"krate":0,"index":1690},{"krate":0,"index":1687},{"krate":0,"index":1698},{"krate":0,"index":1751},{"krate":0,"index":1747},{"krate":0,"index":1748},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1742},{"krate":0,"index":1002},{"krate":0,"index":1004},{"krate":0,"index":1006},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1753},{"krate":0,"index":1800},{"krate":0,"index":1796},{"krate":0,"index":1797},{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1791},{"krate":0,"index":1802},{"krate":0,"index":1813},{"krate":0,"index":1811},{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1804},{"krate":0,"index":1805},{"krate":0,"index":1815},{"krate":0,"index":1832},{"krate":0,"index":1830},{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1824},{"krate":0,"index":1825},{"krate":0,"index":1834},{"krate":0,"index":1865},{"krate":0,"index":1859},{"krate":0,"index":1861},{"krate":0,"index":1854},{"krate":0,"index":1856},{"krate":0,"index":1851},{"krate":0,"index":1868},{"krate":0,"index":1881},{"krate":0,"index":1879},{"krate":0,"index":1875},{"krate":0,"index":1876},{"krate":0,"index":1872},{"krate":0,"index":1873},{"krate":0,"index":1871},{"krate":0,"index":1883},{"krate":0,"index":1907},{"krate":0,"index":1905},{"krate":0,"index":1902},{"krate":0,"index":1903},{"krate":0,"index":1899},{"krate":0,"index":1900},{"krate":0,"index":1898},{"krate":0,"index":1018},{"krate":0,"index":1020},{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1098},{"krate":0,"index":1167},{"krate":0,"index":1213},{"krate":0,"index":1244},{"krate":0,"index":1247}],"decl_id":null,"docs":" Formatting (and parsing) utilities for date and time.","sig":null,"attributes":[{"value":"/ Formatting (and parsing) utilities for date and time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":518155,"byte_end":518212,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":518213,"byte_end":518216,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module provides the common types and routines to implement,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":518217,"byte_end":518285,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"/ for example, [`DateTime::format`](../struct.DateTime.html#method.format) or","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":518286,"byte_end":518365,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ [`DateTime::parse_from_str`](../struct.DateTime.html#method.parse_from_str) methods.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":518366,"byte_end":518454,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"/ For most cases you should use these high-level interfaces.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":518455,"byte_end":518517,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":518518,"byte_end":518521,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Internally the formatting and parsing shares the same abstract **formatting items**,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":518522,"byte_end":518610,"line_start":11,"line_end":11,"column_start":1,"column_end":89}},{"value":"/ which are just an [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) of","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":518611,"byte_end":518704,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"/ the [`Item`](./enum.Item.html) type.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":518705,"byte_end":518745,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/ They are generated from more readable **format strings**;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":518746,"byte_end":518807,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/ currently Chrono supports [one built-in syntax closely resembling","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":518808,"byte_end":518877,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ C's `strftime` format](./strftime/index.html).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":518878,"byte_end":518928,"line_start":16,"line_end":16,"column_start":1,"column_end":51}},{"value":"allow(ellipsis_inclusive_range_patterns)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":518930,"byte_end":518974,"line_start":18,"line_end":18,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1681},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520160,"byte_end":520164,"line_start":61,"line_end":61,"column_start":5,"column_end":9},"name":"None","qualname":"::format::Pad::None","value":"Pad::None","parent":{"krate":0,"index":1680},"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[{"value":"/ No padding.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520140,"byte_end":520155,"line_start":60,"line_end":60,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1683},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520198,"byte_end":520202,"line_start":63,"line_end":63,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Pad::Zero","value":"Pad::Zero","parent":{"krate":0,"index":1680},"children":[],"decl_id":null,"docs":" Zero (`0`) padding.\n","sig":null,"attributes":[{"value":"/ Zero (`0`) padding.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520170,"byte_end":520193,"line_start":62,"line_end":62,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1685},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520231,"byte_end":520236,"line_start":65,"line_end":65,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Pad::Space","value":"Pad::Space","parent":{"krate":0,"index":1680},"children":[],"decl_id":null,"docs":" Space padding.\n","sig":null,"attributes":[{"value":"/ Space padding.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520208,"byte_end":520226,"line_start":64,"line_end":64,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1680},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520130,"byte_end":520133,"line_start":59,"line_end":59,"column_start":10,"column_end":13},"name":"Pad","qualname":"::format::Pad","value":"pub enum Pad {\n\n    /// No padding.\n    None,\n\n    /// Zero (`0`) padding.\n    Zero,\n\n    /// Space padding.\n    Space,\n}","parent":null,"children":[{"krate":0,"index":1681},{"krate":0,"index":1683},{"krate":0,"index":1685}],"decl_id":null,"docs":" Padding characters for numeric items.\n","sig":null,"attributes":[{"value":"/ Padding characters for numeric items.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520034,"byte_end":520075,"line_start":57,"line_end":57,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1699},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521132,"byte_end":521136,"line_start":85,"line_end":85,"column_start":5,"column_end":9},"name":"Year","qualname":"::format::Numeric::Year","value":"Numeric::Year","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Full Gregorian year (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Full Gregorian year (FW=4, PW=∞).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521009,"byte_end":521048,"line_start":83,"line_end":83,"column_start":5,"column_end":42}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521053,"byte_end":521127,"line_start":84,"line_end":84,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1701},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521238,"byte_end":521248,"line_start":87,"line_end":87,"column_start":5,"column_end":15},"name":"YearDiv100","qualname":"::format::Numeric::YearDiv100","value":"Numeric::YearDiv100","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521142,"byte_end":521233,"line_start":86,"line_end":86,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1703},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521319,"byte_end":521329,"line_start":89,"line_end":89,"column_start":5,"column_end":15},"name":"YearMod100","qualname":"::format::Numeric::YearMod100","value":"Numeric::YearMod100","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521254,"byte_end":521314,"line_start":88,"line_end":88,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1705},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521464,"byte_end":521471,"line_start":92,"line_end":92,"column_start":5,"column_end":12},"name":"IsoYear","qualname":"::format::Numeric::IsoYear","value":"Numeric::IsoYear","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Year in the ISO week date (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date (FW=4, PW=∞).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521335,"byte_end":521380,"line_start":90,"line_end":90,"column_start":5,"column_end":48}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521385,"byte_end":521459,"line_start":91,"line_end":91,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1707},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521569,"byte_end":521582,"line_start":94,"line_end":94,"column_start":5,"column_end":18},"name":"IsoYearDiv100","qualname":"::format::Numeric::IsoYearDiv100","value":"Numeric::IsoYearDiv100","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521477,"byte_end":521564,"line_start":93,"line_end":93,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1709},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521665,"byte_end":521678,"line_start":96,"line_end":96,"column_start":5,"column_end":18},"name":"IsoYearMod100","qualname":"::format::Numeric::IsoYearMod100","value":"Numeric::IsoYearMod100","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521588,"byte_end":521660,"line_start":95,"line_end":95,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1711},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521709,"byte_end":521714,"line_start":98,"line_end":98,"column_start":5,"column_end":10},"name":"Month","qualname":"::format::Numeric::Month","value":"Numeric::Month","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Month (FW=PW=2).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521684,"byte_end":521704,"line_start":97,"line_end":97,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1713},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521756,"byte_end":521759,"line_start":100,"line_end":100,"column_start":5,"column_end":8},"name":"Day","qualname":"::format::Numeric::Day","value":"Numeric::Day","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Day of the month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Day of the month (FW=PW=2).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521720,"byte_end":521751,"line_start":99,"line_end":99,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1715},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521852,"byte_end":521863,"line_start":102,"line_end":102,"column_start":5,"column_end":16},"name":"WeekFromSun","qualname":"::format::Numeric::WeekFromSun","value":"Numeric::WeekFromSun","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521765,"byte_end":521847,"line_start":101,"line_end":101,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1717},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521956,"byte_end":521967,"line_start":104,"line_end":104,"column_start":5,"column_end":16},"name":"WeekFromMon","qualname":"::format::Numeric::WeekFromMon","value":"Numeric::WeekFromMon","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January (FW=PW=2).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521869,"byte_end":521951,"line_start":103,"line_end":103,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1719},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522025,"byte_end":522032,"line_start":106,"line_end":106,"column_start":5,"column_end":12},"name":"IsoWeek","qualname":"::format::Numeric::IsoWeek","value":"Numeric::IsoWeek","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Week number in the ISO week date (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number in the ISO week date (FW=PW=2).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":521973,"byte_end":522020,"line_start":105,"line_end":105,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1721},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522108,"byte_end":522122,"line_start":108,"line_end":108,"column_start":5,"column_end":19},"name":"NumDaysFromSun","qualname":"::format::Numeric::NumDaysFromSun","value":"Numeric::NumDaysFromSun","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522038,"byte_end":522103,"line_start":107,"line_end":107,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1723},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522196,"byte_end":522210,"line_start":110,"line_end":110,"column_start":5,"column_end":19},"name":"WeekdayFromMon","qualname":"::format::Numeric::WeekdayFromMon","value":"Numeric::WeekdayFromMon","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522128,"byte_end":522191,"line_start":109,"line_end":109,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1725},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522251,"byte_end":522258,"line_start":112,"line_end":112,"column_start":5,"column_end":12},"name":"Ordinal","qualname":"::format::Numeric::Ordinal","value":"Numeric::Ordinal","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Day of the year (FW=PW=3).\n","sig":null,"attributes":[{"value":"/ Day of the year (FW=PW=3).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522216,"byte_end":522246,"line_start":111,"line_end":111,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1727},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522317,"byte_end":522321,"line_start":114,"line_end":114,"column_start":5,"column_end":9},"name":"Hour","qualname":"::format::Numeric::Hour","value":"Numeric::Hour","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Hour number in the 24-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 24-hour clocks (FW=PW=2).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522264,"byte_end":522312,"line_start":113,"line_end":113,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1729},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522380,"byte_end":522386,"line_start":116,"line_end":116,"column_start":5,"column_end":11},"name":"Hour12","qualname":"::format::Numeric::Hour12","value":"Numeric::Hour12","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Hour number in the 12-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 12-hour clocks (FW=PW=2).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522327,"byte_end":522375,"line_start":115,"line_end":115,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1731},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522459,"byte_end":522465,"line_start":118,"line_end":118,"column_start":5,"column_end":11},"name":"Minute","qualname":"::format::Numeric::Minute","value":"Numeric::Minute","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" The number of minutes since the last whole hour (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of minutes since the last whole hour (FW=PW=2).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522392,"byte_end":522454,"line_start":117,"line_end":117,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1733},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522540,"byte_end":522546,"line_start":120,"line_end":120,"column_start":5,"column_end":11},"name":"Second","qualname":"::format::Numeric::Second","value":"Numeric::Second","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" The number of seconds since the last whole minute (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of seconds since the last whole minute (FW=PW=2).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522471,"byte_end":522535,"line_start":119,"line_end":119,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1735},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522749,"byte_end":522759,"line_start":124,"line_end":124,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Numeric::Nanosecond","value":"Numeric::Nanosecond","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the last whole second (FW=PW=9).\n Note that this is *not* left-aligned;\n see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the last whole second (FW=PW=9).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522552,"byte_end":522620,"line_start":121,"line_end":121,"column_start":5,"column_end":73}},{"value":"/ Note that this is *not* left-aligned;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522625,"byte_end":522666,"line_start":122,"line_end":122,"column_start":5,"column_end":46}},{"value":"/ see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522671,"byte_end":522744,"line_start":123,"line_end":123,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1737},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522939,"byte_end":522948,"line_start":127,"line_end":127,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::format::Numeric::Timestamp","value":"Numeric::Timestamp","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n For formatting, it assumes UTC upon the absence of time zone offset.\n","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522765,"byte_end":522857,"line_start":125,"line_end":125,"column_start":5,"column_end":95}},{"value":"/ For formatting, it assumes UTC upon the absence of time zone offset.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522862,"byte_end":522934,"line_start":126,"line_end":126,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1739},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523167,"byte_end":523175,"line_start":133,"line_end":133,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Numeric::Internal","value":"Numeric::Internal(InternalNumeric)","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522955,"byte_end":522978,"line_start":129,"line_end":129,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522983,"byte_end":522986,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":522991,"byte_end":523067,"line_start":131,"line_end":131,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523072,"byte_end":523162,"line_start":132,"line_end":132,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":1698},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520995,"byte_end":521002,"line_start":82,"line_end":82,"column_start":10,"column_end":17},"name":"Numeric","qualname":"::format::Numeric","value":"pub enum Numeric {\n\n    /// Full Gregorian year (FW=4, PW=∞).\n    /// May accept years before 1 BCE or after 9999 CE, given an initial sign.\n    Year,\n\n    /// Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n    YearDiv100,\n\n    /// Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n    YearMod100,\n\n    /// Year in the ISO week date (FW=4, PW=∞).\n    /// May accept years before 1 BCE or after 9999 CE, given an initial sign.\n    IsoYear,\n\n    /// Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n    IsoYearDiv100,\n\n    /// Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n    IsoYearMod100,\n\n    /// Month (FW=PW=2).\n    Month,\n\n    /// Day of the month (FW=PW=2).\n    Day,\n\n    /// Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n    WeekFromSun,\n\n    /// Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n    WeekFromMon,\n\n    /// Week number in the ISO week date (FW=PW=2).\n    IsoWeek,\n\n    /// Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n    NumDaysFromSun,\n\n    /// Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n    WeekdayFromMon,\n\n    /// Day of the year (FW=PW=3).\n    Ordinal,\n\n    /// Hour number in the 24-hour clocks (FW=PW=2).\n    Hour,\n\n    /// Hour number in the 12-hour clocks (FW=PW=2).\n    Hour12,\n\n    /// The number of minutes since the last whole hour (FW=PW=2).\n    Minute,\n\n    /// The number of seconds since the last whole minute (FW=PW=2).\n    Second,\n\n    /// The number of nanoseconds since the last whole second (FW=PW=9).\n    /// Note that this is *not* left-aligned;\n    /// see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n    Nanosecond,\n\n    /// The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n    /// For formatting, it assumes UTC upon the absence of time zone offset.\n    Timestamp,\n\n    /// Internal uses only.\n    ///\n    /// This item exists so that one can add additional internal-only formatting\n    /// without breaking major compatibility (as enum variants cannot be selectively private).\n    Internal(InternalNumeric),\n}","parent":null,"children":[{"krate":0,"index":1699},{"krate":0,"index":1701},{"krate":0,"index":1703},{"krate":0,"index":1705},{"krate":0,"index":1707},{"krate":0,"index":1709},{"krate":0,"index":1711},{"krate":0,"index":1713},{"krate":0,"index":1715},{"krate":0,"index":1717},{"krate":0,"index":1719},{"krate":0,"index":1721},{"krate":0,"index":1723},{"krate":0,"index":1725},{"krate":0,"index":1727},{"krate":0,"index":1729},{"krate":0,"index":1731},{"krate":0,"index":1733},{"krate":0,"index":1735},{"krate":0,"index":1737},{"krate":0,"index":1739}],"decl_id":null,"docs":" Numeric item types.\n They have associated formatting width (FW) and parsing width (PW).","sig":null,"attributes":[{"value":"/ Numeric item types.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520241,"byte_end":520264,"line_start":68,"line_end":68,"column_start":1,"column_end":24}},{"value":"/ They have associated formatting width (FW) and parsing width (PW).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520265,"byte_end":520335,"line_start":69,"line_end":69,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520336,"byte_end":520339,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ The **formatting width** is the minimal width to be formatted.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520340,"byte_end":520406,"line_start":71,"line_end":71,"column_start":1,"column_end":67}},{"value":"/ If the number is too short, and the padding is not [`Pad::None`](./enum.Pad.html#variant.None),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520407,"byte_end":520506,"line_start":72,"line_end":72,"column_start":1,"column_end":100}},{"value":"/ then it is left-padded.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520507,"byte_end":520534,"line_start":73,"line_end":73,"column_start":1,"column_end":28}},{"value":"/ If the number is too long or (in some cases) negative, it is printed as is.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520535,"byte_end":520614,"line_start":74,"line_end":74,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520615,"byte_end":520618,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ The **parsing width** is the maximal width to be scanned.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520619,"byte_end":520680,"line_start":76,"line_end":76,"column_start":1,"column_end":62}},{"value":"/ The parser only tries to consume from one to given number of digits (greedily).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520681,"byte_end":520764,"line_start":77,"line_end":77,"column_start":1,"column_end":84}},{"value":"/ It also trims the preceding whitespace if any.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520765,"byte_end":520815,"line_start":78,"line_end":78,"column_start":1,"column_end":51}},{"value":"/ It cannot parse the negative number, so some date and time cannot be formatted then","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520816,"byte_end":520903,"line_start":79,"line_end":79,"column_start":1,"column_end":88}},{"value":"/ parsed with the same formatting items.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":520904,"byte_end":520946,"line_start":80,"line_end":80,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1002},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523283,"byte_end":523298,"line_start":137,"line_end":137,"column_start":12,"column_end":27},"name":"InternalNumeric","qualname":"::format::InternalNumeric","value":"InternalNumeric {  }","parent":null,"children":[{"krate":0,"index":1003}],"decl_id":null,"docs":" An opaque type representing numeric item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing numeric item types for internal uses only.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523197,"byte_end":523271,"line_start":136,"line_end":136,"column_start":1,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1754},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524096,"byte_end":524110,"line_start":170,"line_end":170,"column_start":5,"column_end":19},"name":"ShortMonthName","qualname":"::format::Fixed::ShortMonthName","value":"Fixed::ShortMonthName","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" Abbreviated month names.","sig":null,"attributes":[{"value":"/ Abbreviated month names.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523963,"byte_end":523991,"line_start":167,"line_end":167,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523996,"byte_end":523999,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524004,"byte_end":524091,"line_start":169,"line_end":169,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1756},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524243,"byte_end":524256,"line_start":174,"line_end":174,"column_start":5,"column_end":18},"name":"LongMonthName","qualname":"::format::Fixed::LongMonthName","value":"Fixed::LongMonthName","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" Full month names.","sig":null,"attributes":[{"value":"/ Full month names.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524116,"byte_end":524137,"line_start":171,"line_end":171,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524142,"byte_end":524145,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524150,"byte_end":524238,"line_start":173,"line_end":173,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1758},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524405,"byte_end":524421,"line_start":178,"line_end":178,"column_start":5,"column_end":21},"name":"ShortWeekdayName","qualname":"::format::Fixed::ShortWeekdayName","value":"Fixed::ShortWeekdayName","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" Abbreviated day of the week names.","sig":null,"attributes":[{"value":"/ Abbreviated day of the week names.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524262,"byte_end":524300,"line_start":175,"line_end":175,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524305,"byte_end":524308,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524313,"byte_end":524400,"line_start":177,"line_end":177,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1760},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524564,"byte_end":524579,"line_start":182,"line_end":182,"column_start":5,"column_end":20},"name":"LongWeekdayName","qualname":"::format::Fixed::LongWeekdayName","value":"Fixed::LongWeekdayName","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" Full day of the week names.","sig":null,"attributes":[{"value":"/ Full day of the week names.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524427,"byte_end":524458,"line_start":179,"line_end":179,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524463,"byte_end":524466,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524471,"byte_end":524559,"line_start":181,"line_end":181,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1762},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524657,"byte_end":524666,"line_start":186,"line_end":186,"column_start":5,"column_end":14},"name":"LowerAmPm","qualname":"::format::Fixed::LowerAmPm","value":"Fixed::LowerAmPm","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524585,"byte_end":524595,"line_start":183,"line_end":183,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524600,"byte_end":524603,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ Prints in lower case, reads in any case.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524608,"byte_end":524652,"line_start":185,"line_end":185,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1764},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524744,"byte_end":524753,"line_start":190,"line_end":190,"column_start":5,"column_end":14},"name":"UpperAmPm","qualname":"::format::Fixed::UpperAmPm","value":"Fixed::UpperAmPm","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524672,"byte_end":524682,"line_start":187,"line_end":187,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524687,"byte_end":524690,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Prints in upper case, reads in any case.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524695,"byte_end":524739,"line_start":189,"line_end":189,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1766},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525000,"byte_end":525010,"line_start":194,"line_end":194,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Fixed::Nanosecond","value":"Fixed::Nanosecond","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" An optional dot plus one or more digits for left-aligned nanoseconds.\n May print nothing, 3, 6 or 9 digits according to the available accuracy.\n See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ An optional dot plus one or more digits for left-aligned nanoseconds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524759,"byte_end":524832,"line_start":191,"line_end":191,"column_start":5,"column_end":78}},{"value":"/ May print nothing, 3, 6 or 9 digits according to the available accuracy.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524837,"byte_end":524913,"line_start":192,"line_end":192,"column_start":5,"column_end":81}},{"value":"/ See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":524918,"byte_end":524995,"line_start":193,"line_end":193,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1768},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525100,"byte_end":525111,"line_start":196,"line_end":196,"column_start":5,"column_end":16},"name":"Nanosecond3","qualname":"::format::Fixed::Nanosecond3","value":"Fixed::Nanosecond3","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525016,"byte_end":525095,"line_start":195,"line_end":195,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1770},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525201,"byte_end":525212,"line_start":198,"line_end":198,"column_start":5,"column_end":16},"name":"Nanosecond6","qualname":"::format::Fixed::Nanosecond6","value":"Fixed::Nanosecond6","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525117,"byte_end":525196,"line_start":197,"line_end":197,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1772},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525302,"byte_end":525313,"line_start":200,"line_end":200,"column_start":5,"column_end":16},"name":"Nanosecond9","qualname":"::format::Fixed::Nanosecond9","value":"Fixed::Nanosecond9","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525218,"byte_end":525297,"line_start":199,"line_end":199,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1774},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525434,"byte_end":525446,"line_start":204,"line_end":204,"column_start":5,"column_end":17},"name":"TimezoneName","qualname":"::format::Fixed::TimezoneName","value":"Fixed::TimezoneName","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" Timezone name.","sig":null,"attributes":[{"value":"/ Timezone name.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525319,"byte_end":525337,"line_start":201,"line_end":201,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525342,"byte_end":525345,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ It does not support parsing, its use in the parser is an immediate failure.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525350,"byte_end":525429,"line_start":203,"line_end":203,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1776},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525781,"byte_end":525800,"line_start":210,"line_end":210,"column_start":5,"column_end":24},"name":"TimezoneOffsetColon","qualname":"::format::Fixed::TimezoneOffsetColon","value":"Fixed::TimezoneOffsetColon","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525452,"byte_end":525525,"line_start":205,"line_end":205,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525530,"byte_end":525533,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525538,"byte_end":525630,"line_start":207,"line_end":207,"column_start":5,"column_end":97}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525635,"byte_end":525687,"line_start":208,"line_end":208,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525692,"byte_end":525776,"line_start":209,"line_end":209,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1778},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526192,"byte_end":526212,"line_start":217,"line_end":217,"column_start":5,"column_end":25},"name":"TimezoneOffsetColonZ","qualname":"::format::Fixed::TimezoneOffsetColonZ","value":"Fixed::TimezoneOffsetColonZ","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525806,"byte_end":525874,"line_start":211,"line_end":211,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525879,"byte_end":525882,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525887,"byte_end":525979,"line_start":213,"line_end":213,"column_start":5,"column_end":97}},{"value":"/ and `Z` can be either in upper case or in lower case.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":525984,"byte_end":526041,"line_start":214,"line_end":214,"column_start":5,"column_end":62}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526046,"byte_end":526098,"line_start":215,"line_end":215,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526103,"byte_end":526187,"line_start":216,"line_end":216,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1780},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526351,"byte_end":526365,"line_start":220,"line_end":220,"column_start":5,"column_end":19},"name":"TimezoneOffset","qualname":"::format::Fixed::TimezoneOffset","value":"Fixed::TimezoneOffset","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526218,"byte_end":526304,"line_start":218,"line_end":218,"column_start":5,"column_end":91}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526309,"byte_end":526346,"line_start":219,"line_end":219,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1782},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526506,"byte_end":526521,"line_start":223,"line_end":223,"column_start":5,"column_end":20},"name":"TimezoneOffsetZ","qualname":"::format::Fixed::TimezoneOffsetZ","value":"Fixed::TimezoneOffsetZ","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526371,"byte_end":526459,"line_start":221,"line_end":221,"column_start":5,"column_end":93}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526464,"byte_end":526501,"line_start":222,"line_end":222,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1784},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526614,"byte_end":526621,"line_start":225,"line_end":225,"column_start":5,"column_end":12},"name":"RFC2822","qualname":"::format::Fixed::RFC2822","value":"Fixed::RFC2822","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n","sig":null,"attributes":[{"value":"/ RFC 2822 date and time syntax. Commonly used for email and MIME date and time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526527,"byte_end":526609,"line_start":224,"line_end":224,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1786},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526677,"byte_end":526684,"line_start":227,"line_end":227,"column_start":5,"column_end":12},"name":"RFC3339","qualname":"::format::Fixed::RFC3339","value":"Fixed::RFC3339","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" RFC 3339 & ISO 8601 date and time syntax.\n","sig":null,"attributes":[{"value":"/ RFC 3339 & ISO 8601 date and time syntax.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526627,"byte_end":526672,"line_start":226,"line_end":226,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1788},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526903,"byte_end":526911,"line_start":233,"line_end":233,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Fixed::Internal","value":"Fixed::Internal(InternalFixed)","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526691,"byte_end":526714,"line_start":229,"line_end":229,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526719,"byte_end":526722,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526727,"byte_end":526803,"line_start":231,"line_end":231,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526808,"byte_end":526898,"line_start":232,"line_end":232,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":1753},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523951,"byte_end":523956,"line_start":166,"line_end":166,"column_start":10,"column_end":15},"name":"Fixed","qualname":"::format::Fixed","value":"pub enum Fixed {\n\n    /// Abbreviated month names.\n    ///\n    /// Prints a three-letter-long name in the title case, reads the same name in any case.\n    ShortMonthName,\n\n    /// Full month names.\n    ///\n    /// Prints a full name in the title case, reads either a short or full name in any case.\n    LongMonthName,\n\n    /// Abbreviated day of the week names.\n    ///\n    /// Prints a three-letter-long name in the title case, reads the same name in any case.\n    ShortWeekdayName,\n\n    /// Full day of the week names.\n    ///\n    /// Prints a full name in the title case, reads either a short or full name in any case.\n    LongWeekdayName,\n\n    /// AM/PM.\n    ///\n    /// Prints in lower case, reads in any case.\n    LowerAmPm,\n\n    /// AM/PM.\n    ///\n    /// Prints in upper case, reads in any case.\n    UpperAmPm,\n\n    /// An optional dot plus one or more digits for left-aligned nanoseconds.\n    /// May print nothing, 3, 6 or 9 digits according to the available accuracy.\n    /// See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n    Nanosecond,\n\n    /// Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n    Nanosecond3,\n\n    /// Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n    Nanosecond6,\n\n    /// Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n    Nanosecond9,\n\n    /// Timezone name.\n    ///\n    /// It does not support parsing, its use in the parser is an immediate failure.\n    TimezoneName,\n\n    /// Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).\n    ///\n    /// In the parser, the colon can be omitted and/or surrounded with any amount of whitespace.\n    /// The offset is limited from `-24:00` to `+24:00`,\n    /// which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.\n    TimezoneOffsetColon,\n\n    /// Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).\n    ///\n    /// In the parser, the colon can be omitted and/or surrounded with any amount of whitespace,\n    /// and `Z` can be either in upper case or in lower case.\n    /// The offset is limited from `-24:00` to `+24:00`,\n    /// which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.\n    TimezoneOffsetColonZ,\n\n    /// Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n    /// Parsing allows an optional colon.\n    TimezoneOffset,\n\n    /// Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n    /// Parsing allows an optional colon.\n    TimezoneOffsetZ,\n\n    /// RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n    RFC2822,\n\n    /// RFC 3339 & ISO 8601 date and time syntax.\n    RFC3339,\n\n    /// Internal uses only.\n    ///\n    /// This item exists so that one can add additional internal-only formatting\n    /// without breaking major compatibility (as enum variants cannot be selectively private).\n    Internal(InternalFixed),\n}","parent":null,"children":[{"krate":0,"index":1754},{"krate":0,"index":1756},{"krate":0,"index":1758},{"krate":0,"index":1760},{"krate":0,"index":1762},{"krate":0,"index":1764},{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1784},{"krate":0,"index":1786},{"krate":0,"index":1788}],"decl_id":null,"docs":" Fixed-format item types.","sig":null,"attributes":[{"value":"/ Fixed-format item types.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523728,"byte_end":523756,"line_start":161,"line_end":161,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523757,"byte_end":523760,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ They have their own rules of formatting and parsing.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523761,"byte_end":523817,"line_start":163,"line_end":163,"column_start":1,"column_end":57}},{"value":"/ Otherwise noted, they print in the specified cases but parse case-insensitively.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523818,"byte_end":523902,"line_start":164,"line_end":164,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":1802},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":527061,"byte_end":527074,"line_start":238,"line_end":238,"column_start":12,"column_end":25},"name":"InternalFixed","qualname":"::format::InternalFixed","value":"InternalFixed {  }","parent":null,"children":[{"krate":0,"index":1803}],"decl_id":null,"docs":" An opaque type representing fixed-format item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing fixed-format item types for internal uses only.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":526931,"byte_end":527010,"line_start":236,"line_end":236,"column_start":1,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1836},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":528090,"byte_end":528097,"line_start":265,"line_end":265,"column_start":5,"column_end":12},"name":"Literal","qualname":"::format::Item::Literal","value":"Item::Literal(&'a str)","parent":{"krate":0,"index":1834},"children":[],"decl_id":null,"docs":" A literally printed and parsed text.\n","sig":null,"attributes":[{"value":"/ A literally printed and parsed text.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":528045,"byte_end":528085,"line_start":264,"line_end":264,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1839},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":528335,"byte_end":528340,"line_start":270,"line_end":270,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Item::Space","value":"Item::Space(&'a str)","parent":{"krate":0,"index":1834},"children":[],"decl_id":null,"docs":" Whitespace. Prints literally but reads zero or more whitespace.\n","sig":null,"attributes":[{"value":"/ Whitespace. Prints literally but reads zero or more whitespace.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":528263,"byte_end":528330,"line_start":269,"line_end":269,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1842},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":528665,"byte_end":528672,"line_start":276,"line_end":276,"column_start":5,"column_end":12},"name":"Numeric","qualname":"::format::Item::Numeric","value":"Item::Numeric(Numeric, Pad)","parent":{"krate":0,"index":1834},"children":[],"decl_id":null,"docs":" Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n the parser simply ignores any padded whitespace and zeroes.\n","sig":null,"attributes":[{"value":"/ Numeric item. Can be optionally padded to the maximal length (if any) when formatting;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":528502,"byte_end":528592,"line_start":274,"line_end":274,"column_start":5,"column_end":95}},{"value":"/ the parser simply ignores any padded whitespace and zeroes.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":528597,"byte_end":528660,"line_start":275,"line_end":275,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1846},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":528719,"byte_end":528724,"line_start":278,"line_end":278,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::format::Item::Fixed","value":"Item::Fixed(Fixed)","parent":{"krate":0,"index":1834},"children":[],"decl_id":null,"docs":" Fixed-format item.\n","sig":null,"attributes":[{"value":"/ Fixed-format item.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":528692,"byte_end":528714,"line_start":277,"line_end":277,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1849},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":528813,"byte_end":528818,"line_start":280,"line_end":280,"column_start":5,"column_end":10},"name":"Error","qualname":"::format::Item::Error","value":"Item::Error","parent":{"krate":0,"index":1834},"children":[],"decl_id":null,"docs":" Issues a formatting error. Used to signal an invalid format string.\n","sig":null,"attributes":[{"value":"/ Issues a formatting error. Used to signal an invalid format string.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":528737,"byte_end":528808,"line_start":279,"line_end":279,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1834},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":528030,"byte_end":528034,"line_start":263,"line_end":263,"column_start":10,"column_end":14},"name":"Item","qualname":"::format::Item","value":"pub enum Item<'a> {\n\n    /// A literally printed and parsed text.\n    Literal(&'a str),\n\n    /// Whitespace. Prints literally but reads zero or more whitespace.\n    Space(&'a str),\n\n    /// Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n    /// the parser simply ignores any padded whitespace and zeroes.\n    Numeric(Numeric, Pad),\n\n    /// Fixed-format item.\n    Fixed(Fixed),\n\n    /// Issues a formatting error. Used to signal an invalid format string.\n    Error,\n}","parent":null,"children":[{"krate":0,"index":1836},{"krate":0,"index":1839},{"krate":0,"index":1842},{"krate":0,"index":1846},{"krate":0,"index":1849}],"decl_id":null,"docs":" A single formatting item. This is used for both formatting and parsing.\n","sig":null,"attributes":[{"value":"/ A single formatting item. This is used for both formatting and parsing.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":527906,"byte_end":527981,"line_start":261,"line_end":261,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1868},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":529566,"byte_end":529576,"line_start":321,"line_end":321,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::format::ParseError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error from the `parse` function.\n","sig":null,"attributes":[{"value":"/ An error from the `parse` function.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":529470,"byte_end":529509,"line_start":319,"line_end":319,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":1018},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":530844,"byte_end":530855,"line_start":356,"line_end":356,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::format::ParseResult","value":"Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Result<T, ParseError>`.\n","sig":null,"attributes":[{"value":"/ Same as `Result<T, ParseError>`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":530798,"byte_end":530834,"line_start":355,"line_end":355,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1909},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554135,"byte_end":554141,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"name":"Parsed","qualname":"::format::parsed::Parsed","value":"Parsed { year, year_div_100, year_mod_100, isoyear, isoyear_div_100, isoyear_mod_100, month, week_from_sun, week_from_mon, isoweek, weekday, ordinal, day, hour_div_12, hour_mod_12, minute, second, nanosecond, timestamp, offset }","parent":null,"children":[{"krate":0,"index":1910},{"krate":0,"index":1911},{"krate":0,"index":1912},{"krate":0,"index":1913},{"krate":0,"index":1914},{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1919},{"krate":0,"index":1920},{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1923},{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":1927},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1930}],"decl_id":null,"docs":" Parsed parts of date and time. There are two classes of methods:","sig":null,"attributes":[{"value":"/ Parsed parts of date and time. There are two classes of methods:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":553617,"byte_end":553685,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":553686,"byte_end":553689,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - `set_*` methods try to set given field(s) while checking for the consistency.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":553690,"byte_end":553773,"line_start":20,"line_end":20,"column_start":1,"column_end":84}},{"value":"/   It may or may not check for the range constraint immediately (for efficiency reasons).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":553774,"byte_end":553866,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":553867,"byte_end":553870,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - `to_*` methods try to make a concrete date and time value out of set fields.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":553871,"byte_end":553953,"line_start":23,"line_end":23,"column_start":1,"column_end":83}},{"value":"/   It fully checks any remaining out-of-range conditions and inconsistent/impossible fields.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":553954,"byte_end":554049,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554050,"byte_end":554088,"line_start":25,"line_end":25,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1910},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554318,"byte_end":554322,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"year","qualname":"::format::parsed::Parsed::year","value":"core::option::Option<i32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Year.","sig":null,"attributes":[{"value":"/ Year.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554148,"byte_end":554157,"line_start":28,"line_end":28,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554162,"byte_end":554165,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`year_div_100`](#structfield.year_div_100)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554170,"byte_end":554245,"line_start":30,"line_end":30,"column_start":5,"column_end":80}},{"value":"/ and [`year_mod_100`](#structfield.year_mod_100) fields.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554250,"byte_end":554309,"line_start":31,"line_end":31,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":1911},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554626,"byte_end":554638,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"year_div_100","qualname":"::format::parsed::Parsed::year_div_100","value":"core::option::Option<i32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Year divided by 100. Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year divided by 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554342,"byte_end":554410,"line_start":34,"line_end":34,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554415,"byte_end":554418,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554423,"byte_end":554480,"line_start":36,"line_end":36,"column_start":5,"column_end":62}},{"value":"/ [`year_mod_100`](#structfield.year_mod_100) is present,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554485,"byte_end":554544,"line_start":37,"line_end":37,"column_start":5,"column_end":64}},{"value":"/ it is inferred to 19 when `year_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554549,"byte_end":554617,"line_start":38,"line_end":38,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":1912},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554731,"byte_end":554743,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"year_mod_100","qualname":"::format::parsed::Parsed::year_mod_100","value":"core::option::Option<i32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Year modulo 100. Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year modulo 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554658,"byte_end":554722,"line_start":41,"line_end":41,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":1913},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555010,"byte_end":555017,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"isoyear","qualname":"::format::parsed::Parsed::isoyear","value":"core::option::Option<i32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554763,"byte_end":554837,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554842,"byte_end":554845,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`isoyear_div_100`](#structfield.isoyear_div_100) and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554850,"byte_end":554935,"line_start":46,"line_end":46,"column_start":5,"column_end":90}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) fields.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":554940,"byte_end":555001,"line_start":47,"line_end":47,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1914},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555404,"byte_end":555419,"line_start":56,"line_end":56,"column_start":9,"column_end":24},"name":"isoyear_div_100","qualname":"::format::parsed::Parsed::isoyear_div_100","value":"core::option::Option<i32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.\n Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555037,"byte_end":555127,"line_start":50,"line_end":50,"column_start":5,"column_end":95}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555132,"byte_end":555179,"line_start":51,"line_end":51,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555184,"byte_end":555187,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555192,"byte_end":555249,"line_start":53,"line_end":53,"column_start":5,"column_end":62}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) is present,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555254,"byte_end":555319,"line_start":54,"line_end":54,"column_start":5,"column_end":70}},{"value":"/ it is inferred to 19 when `isoyear_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555324,"byte_end":555395,"line_start":55,"line_end":55,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1915},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555586,"byte_end":555601,"line_start":60,"line_end":60,"column_start":9,"column_end":24},"name":"isoyear_mod_100","qualname":"::format::parsed::Parsed::isoyear_mod_100","value":"core::option::Option<i32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.\n Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555439,"byte_end":555525,"line_start":58,"line_end":58,"column_start":5,"column_end":91}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555530,"byte_end":555577,"line_start":59,"line_end":59,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1916},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555648,"byte_end":555653,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"month","qualname":"::format::parsed::Parsed::month","value":"core::option::Option<u32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Month (1--12).\n","sig":null,"attributes":[{"value":"/ Month (1--12).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555621,"byte_end":555639,"line_start":62,"line_end":62,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1917},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555808,"byte_end":555821,"line_start":67,"line_end":67,"column_start":9,"column_end":22},"name":"week_from_sun","qualname":"::format::parsed::Parsed::week_from_sun","value":"core::option::Option<u32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555673,"byte_end":555744,"line_start":65,"line_end":65,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555749,"byte_end":555799,"line_start":66,"line_end":66,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1918},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555976,"byte_end":555989,"line_start":71,"line_end":71,"column_start":9,"column_end":22},"name":"week_from_mon","qualname":"::format::parsed::Parsed::week_from_mon","value":"core::option::Option<u32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555841,"byte_end":555912,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":555917,"byte_end":555967,"line_start":70,"line_end":70,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1919},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556129,"byte_end":556136,"line_start":75,"line_end":75,"column_start":9,"column_end":16},"name":"isoweek","qualname":"::format::parsed::Parsed::isoweek","value":"core::option::Option<u32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" [ISO week number](../naive/struct.NaiveDate.html#week-date)\n (1--52 or 1--53 depending on the year).\n","sig":null,"attributes":[{"value":"/ [ISO week number](../naive/struct.NaiveDate.html#week-date)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556009,"byte_end":556072,"line_start":73,"line_end":73,"column_start":5,"column_end":68}},{"value":"/ (1--52 or 1--53 depending on the year).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556077,"byte_end":556120,"line_start":74,"line_end":74,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":1920},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556185,"byte_end":556192,"line_start":78,"line_end":78,"column_start":9,"column_end":16},"name":"weekday","qualname":"::format::parsed::Parsed::weekday","value":"core::option::Option<Weekday>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Day of the week.\n","sig":null,"attributes":[{"value":"/ Day of the week.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556156,"byte_end":556176,"line_start":77,"line_end":77,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":1921},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556286,"byte_end":556293,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"name":"ordinal","qualname":"::format::parsed::Parsed::ordinal","value":"core::option::Option<u32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Day of the year (1--365 or 1--366 depending on the year).\n","sig":null,"attributes":[{"value":"/ Day of the year (1--365 or 1--366 depending on the year).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556216,"byte_end":556277,"line_start":80,"line_end":80,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1922},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556397,"byte_end":556400,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"day","qualname":"::format::parsed::Parsed::day","value":"core::option::Option<u32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).\n","sig":null,"attributes":[{"value":"/ Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556313,"byte_end":556388,"line_start":83,"line_end":83,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":1923},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556501,"byte_end":556512,"line_start":87,"line_end":87,"column_start":9,"column_end":20},"name":"hour_div_12","qualname":"::format::parsed::Parsed::hour_div_12","value":"core::option::Option<u32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.\n","sig":null,"attributes":[{"value":"/ Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556420,"byte_end":556492,"line_start":86,"line_end":86,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":1924},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556575,"byte_end":556586,"line_start":90,"line_end":90,"column_start":9,"column_end":20},"name":"hour_mod_12","qualname":"::format::parsed::Parsed::hour_mod_12","value":"core::option::Option<u32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Hour number modulo 12 (0--11).\n","sig":null,"attributes":[{"value":"/ Hour number modulo 12 (0--11).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556532,"byte_end":556566,"line_start":89,"line_end":89,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1925},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556641,"byte_end":556647,"line_start":93,"line_end":93,"column_start":9,"column_end":15},"name":"minute","qualname":"::format::parsed::Parsed::minute","value":"core::option::Option<u32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Minute number (0--59).\n","sig":null,"attributes":[{"value":"/ Minute number (0--59).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556606,"byte_end":556632,"line_start":92,"line_end":92,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1926},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556731,"byte_end":556737,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"second","qualname":"::format::parsed::Parsed::second","value":"core::option::Option<u32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Second number (0--60, accounting for leap seconds).\n","sig":null,"attributes":[{"value":"/ Second number (0--60, accounting for leap seconds).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556667,"byte_end":556722,"line_start":95,"line_end":95,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1927},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556836,"byte_end":556846,"line_start":99,"line_end":99,"column_start":9,"column_end":19},"name":"nanosecond","qualname":"::format::parsed::Parsed::nanosecond","value":"core::option::Option<u32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the whole second (0--999,999,999).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the whole second (0--999,999,999).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556757,"byte_end":556827,"line_start":98,"line_end":98,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":1928},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":557049,"byte_end":557058,"line_start":104,"line_end":104,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::format::parsed::Parsed::timestamp","value":"core::option::Option<i64>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970.","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556866,"byte_end":556943,"line_start":101,"line_end":101,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556948,"byte_end":556951,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This can be off by one if [`second`](#structfield.second) is 60 (a leap second).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":556956,"byte_end":557040,"line_start":103,"line_end":103,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":1929},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":557137,"byte_end":557143,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"name":"offset","qualname":"::format::parsed::Parsed::offset","value":"core::option::Option<i32>","parent":{"krate":0,"index":1909},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC, in seconds.\n","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC, in seconds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":557078,"byte_end":557128,"line_start":106,"line_end":106,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1057},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":558472,"byte_end":558475,"line_start":159,"line_end":159,"column_start":12,"column_end":15},"name":"new","qualname":"<Parsed>::new","value":"pub fn new() -> Parsed","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial value of parsed parts.\n","sig":null,"attributes":[{"value":"/ Returns the initial value of parsed parts.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":558414,"byte_end":558460,"line_start":158,"line_end":158,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":558625,"byte_end":558633,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"set_year","qualname":"<Parsed>::set_year","value":"pub fn set_year(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year`](#structfield.year) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year`](#structfield.year) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":558527,"byte_end":558599,"line_start":163,"line_end":163,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":558604,"byte_end":558613,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":558882,"byte_end":558898,"line_start":171,"line_end":171,"column_start":12,"column_end":28},"name":"set_year_div_100","qualname":"<Parsed>::set_year_div_100","value":"pub fn set_year_div_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":558768,"byte_end":558856,"line_start":169,"line_end":169,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":558861,"byte_end":558870,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":559226,"byte_end":559242,"line_start":180,"line_end":180,"column_start":12,"column_end":28},"name":"set_year_mod_100","qualname":"<Parsed>::set_year_mod_100","value":"pub fn set_year_mod_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":559112,"byte_end":559200,"line_start":178,"line_end":178,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":559205,"byte_end":559214,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":559560,"byte_end":559571,"line_start":189,"line_end":189,"column_start":12,"column_end":23},"name":"set_isoyear","qualname":"<Parsed>::set_isoyear","value":"pub fn set_isoyear(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear`](#structfield.isoyear) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear`](#structfield.isoyear) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":559456,"byte_end":559534,"line_start":187,"line_end":187,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":559539,"byte_end":559548,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":559829,"byte_end":559848,"line_start":195,"line_end":195,"column_start":12,"column_end":31},"name":"set_isoyear_div_100","qualname":"<Parsed>::set_isoyear_div_100","value":"pub fn set_isoyear_div_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":559709,"byte_end":559803,"line_start":193,"line_end":193,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":559808,"byte_end":559817,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1063},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":560185,"byte_end":560204,"line_start":204,"line_end":204,"column_start":12,"column_end":31},"name":"set_isoyear_mod_100","qualname":"<Parsed>::set_isoyear_mod_100","value":"pub fn set_isoyear_mod_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":560065,"byte_end":560159,"line_start":202,"line_end":202,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":560164,"byte_end":560173,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":560521,"byte_end":560530,"line_start":213,"line_end":213,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Parsed>::set_month","value":"pub fn set_month(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`month`](#structfield.month) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`month`](#structfield.month) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":560421,"byte_end":560495,"line_start":211,"line_end":211,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":560500,"byte_end":560509,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":560782,"byte_end":560799,"line_start":219,"line_end":219,"column_start":12,"column_end":29},"name":"set_week_from_sun","qualname":"<Parsed>::set_week_from_sun","value":"pub fn set_week_from_sun(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":560666,"byte_end":560756,"line_start":217,"line_end":217,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":560761,"byte_end":560770,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":561059,"byte_end":561076,"line_start":225,"line_end":225,"column_start":12,"column_end":29},"name":"set_week_from_mon","qualname":"<Parsed>::set_week_from_mon","value":"pub fn set_week_from_mon(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":560943,"byte_end":561033,"line_start":223,"line_end":223,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":561038,"byte_end":561047,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":561324,"byte_end":561335,"line_start":231,"line_end":231,"column_start":12,"column_end":23},"name":"set_isoweek","qualname":"<Parsed>::set_isoweek","value":"pub fn set_isoweek(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoweek`](#structfield.isoweek) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoweek`](#structfield.isoweek) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":561220,"byte_end":561298,"line_start":229,"line_end":229,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":561303,"byte_end":561312,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":561577,"byte_end":561588,"line_start":237,"line_end":237,"column_start":12,"column_end":23},"name":"set_weekday","qualname":"<Parsed>::set_weekday","value":"pub fn set_weekday(&mut Self, Weekday) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`weekday`](#structfield.weekday) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`weekday`](#structfield.weekday) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":561473,"byte_end":561551,"line_start":235,"line_end":235,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":561556,"byte_end":561565,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1069},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":561804,"byte_end":561815,"line_start":243,"line_end":243,"column_start":12,"column_end":23},"name":"set_ordinal","qualname":"<Parsed>::set_ordinal","value":"pub fn set_ordinal(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`ordinal`](#structfield.ordinal) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`ordinal`](#structfield.ordinal) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":561700,"byte_end":561778,"line_start":241,"line_end":241,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":561783,"byte_end":561792,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":562049,"byte_end":562056,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"set_day","qualname":"<Parsed>::set_day","value":"pub fn set_day(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`day`](#structfield.day) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`day`](#structfield.day) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":561953,"byte_end":562023,"line_start":247,"line_end":247,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":562028,"byte_end":562037,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1071},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":562342,"byte_end":562350,"line_start":256,"line_end":256,"column_start":12,"column_end":20},"name":"set_ampm","qualname":"<Parsed>::set_ampm","value":"pub fn set_ampm(&mut Self, bool) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n (`false` for AM, `true` for PM)\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":562190,"byte_end":562276,"line_start":253,"line_end":253,"column_start":5,"column_end":91}},{"value":"/ (`false` for AM, `true` for PM)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":562281,"byte_end":562316,"line_start":254,"line_end":254,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":562321,"byte_end":562330,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":562627,"byte_end":562637,"line_start":263,"line_end":263,"column_start":12,"column_end":22},"name":"set_hour12","qualname":"<Parsed>::set_hour12","value":"pub fn set_hour12(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\n given hour number in 12-hour clocks.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":562483,"byte_end":562556,"line_start":260,"line_end":260,"column_start":5,"column_end":78}},{"value":"/ given hour number in 12-hour clocks.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":562561,"byte_end":562601,"line_start":261,"line_end":261,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":562606,"byte_end":562615,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":563014,"byte_end":563022,"line_start":273,"line_end":273,"column_start":12,"column_end":20},"name":"set_hour","qualname":"<Parsed>::set_hour","value":"pub fn set_hour(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set both [`hour_div_12`](#structfield.hour_div_12) and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":562846,"byte_end":562913,"line_start":270,"line_end":270,"column_start":5,"column_end":72}},{"value":"/ [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":562918,"byte_end":562988,"line_start":271,"line_end":271,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":562993,"byte_end":563002,"line_start":272,"line_end":272,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":563366,"byte_end":563376,"line_start":282,"line_end":282,"column_start":12,"column_end":22},"name":"set_minute","qualname":"<Parsed>::set_minute","value":"pub fn set_minute(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`minute`](#structfield.minute) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`minute`](#structfield.minute) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":563264,"byte_end":563340,"line_start":280,"line_end":280,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":563345,"byte_end":563354,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1075},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":563615,"byte_end":563625,"line_start":288,"line_end":288,"column_start":12,"column_end":22},"name":"set_second","qualname":"<Parsed>::set_second","value":"pub fn set_second(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`second`](#structfield.second) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`second`](#structfield.second) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":563513,"byte_end":563589,"line_start":286,"line_end":286,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":563594,"byte_end":563603,"line_start":287,"line_end":287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":563872,"byte_end":563886,"line_start":294,"line_end":294,"column_start":12,"column_end":26},"name":"set_nanosecond","qualname":"<Parsed>::set_nanosecond","value":"pub fn set_nanosecond(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":563762,"byte_end":563846,"line_start":292,"line_end":292,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":563851,"byte_end":563860,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564135,"byte_end":564148,"line_start":300,"line_end":300,"column_start":12,"column_end":25},"name":"set_timestamp","qualname":"<Parsed>::set_timestamp","value":"pub fn set_timestamp(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`timestamp`](#structfield.timestamp) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`timestamp`](#structfield.timestamp) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564027,"byte_end":564109,"line_start":298,"line_end":298,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564114,"byte_end":564123,"line_start":299,"line_end":299,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564360,"byte_end":564370,"line_start":306,"line_end":306,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<Parsed>::set_offset","value":"pub fn set_offset(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`offset`](#structfield.offset) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`offset`](#structfield.offset) field from given value.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564258,"byte_end":564334,"line_start":304,"line_end":304,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564339,"byte_end":564348,"line_start":305,"line_end":305,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":565014,"byte_end":565027,"line_start":321,"line_end":321,"column_start":12,"column_end":25},"name":"to_naive_date","qualname":"<Parsed>::to_naive_date","value":"pub fn to_naive_date(&Self) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date out of given fields.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564507,"byte_end":564559,"line_start":310,"line_end":310,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564564,"byte_end":564567,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the date from given subset of fields:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564572,"byte_end":564646,"line_start":312,"line_end":312,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564651,"byte_end":564654,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ - Year, month, day.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564659,"byte_end":564682,"line_start":314,"line_end":314,"column_start":5,"column_end":28}},{"value":"/ - Year, day of the year (ordinal).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564687,"byte_end":564725,"line_start":315,"line_end":315,"column_start":5,"column_end":43}},{"value":"/ - Year, week number counted from Sunday or Monday, day of the week.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564730,"byte_end":564801,"line_start":316,"line_end":316,"column_start":5,"column_end":76}},{"value":"/ - ISO week date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564806,"byte_end":564826,"line_start":317,"line_end":317,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564831,"byte_end":564834,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ Gregorian year and ISO week date year can have their century number (`*_div_100`) omitted,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564839,"byte_end":564933,"line_start":319,"line_end":319,"column_start":5,"column_end":99}},{"value":"/ the two-digit year is used to guess the century number then.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":564938,"byte_end":565002,"line_start":320,"line_end":320,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1087},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":574346,"byte_end":574359,"line_start":529,"line_end":529,"column_start":12,"column_end":25},"name":"to_naive_time","qualname":"<Parsed>::to_naive_time","value":"pub fn to_naive_time(&Self) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive time out of given fields.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":573943,"byte_end":573995,"line_start":520,"line_end":520,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":574000,"byte_end":574003,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the time from given subset of fields:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":574008,"byte_end":574082,"line_start":522,"line_end":522,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":574087,"byte_end":574090,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ - Hour, minute. (second and nanosecond assumed to be 0)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":574095,"byte_end":574154,"line_start":524,"line_end":524,"column_start":5,"column_end":64}},{"value":"/ - Hour, minute, second. (nanosecond assumed to be 0)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":574159,"byte_end":574215,"line_start":525,"line_end":525,"column_start":5,"column_end":61}},{"value":"/ - Hour, minute, second, nanosecond.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":574220,"byte_end":574259,"line_start":526,"line_end":526,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":574264,"byte_end":574267,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ It is able to handle leap seconds when given second is 60.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":574272,"byte_end":574334,"line_start":528,"line_end":528,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":576142,"byte_end":576171,"line_start":571,"line_end":571,"column_start":12,"column_end":41},"name":"to_naive_datetime_with_offset","qualname":"<Parsed>::to_naive_datetime_with_offset","value":"pub fn to_naive_datetime_with_offset(&Self, i32) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date and time out of given fields,\n except for the [`offset`](#structfield.offset) field (assumed to have a given value).\n This is required for parsing a local time or other known-timezone inputs.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date and time out of given fields,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":575657,"byte_end":575718,"line_start":564,"line_end":564,"column_start":5,"column_end":66}},{"value":"/ except for the [`offset`](#structfield.offset) field (assumed to have a given value).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":575723,"byte_end":575812,"line_start":565,"line_end":565,"column_start":5,"column_end":94}},{"value":"/ This is required for parsing a local time or other known-timezone inputs.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":575817,"byte_end":575894,"line_start":566,"line_end":566,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":575899,"byte_end":575902,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":575907,"byte_end":575970,"line_start":568,"line_end":568,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":575975,"byte_end":576061,"line_start":569,"line_end":569,"column_start":5,"column_end":91}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":576066,"byte_end":576130,"line_start":570,"line_end":570,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":579589,"byte_end":579604,"line_start":644,"line_end":644,"column_start":12,"column_end":27},"name":"to_fixed_offset","qualname":"<Parsed>::to_fixed_offset","value":"pub fn to_fixed_offset(&Self) -> ParseResult<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed fixed time zone offset out of given fields.\n","sig":null,"attributes":[{"value":"/ Returns a parsed fixed time zone offset out of given fields.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":579513,"byte_end":579577,"line_start":643,"line_end":643,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":580076,"byte_end":580087,"line_start":654,"line_end":654,"column_start":12,"column_end":23},"name":"to_datetime","qualname":"<Parsed>::to_datetime","value":"pub fn to_datetime(&Self) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":579725,"byte_end":579795,"line_start":648,"line_end":648,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":579800,"byte_end":579803,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":579808,"byte_end":579871,"line_start":650,"line_end":650,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":579876,"byte_end":579962,"line_start":651,"line_end":651,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":579967,"byte_end":579995,"line_start":652,"line_end":652,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":580000,"byte_end":580064,"line_start":653,"line_end":653,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":581115,"byte_end":581140,"line_start":674,"line_end":674,"column_start":12,"column_end":37},"name":"to_datetime_with_timezone","qualname":"<Parsed>::to_datetime_with_timezone","value":"pub fn to_datetime_with_timezone<Tz: TimeZone>(&Self, &Tz)\n-> ParseResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields,\n with an additional `TimeZone` used to interpret and validate the local date.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":580558,"byte_end":580628,"line_start":665,"line_end":665,"column_start":5,"column_end":75}},{"value":"/ with an additional `TimeZone` used to interpret and validate the local date.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":580633,"byte_end":580713,"line_start":666,"line_end":666,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":580718,"byte_end":580721,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":580726,"byte_end":580789,"line_start":668,"line_end":668,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":580794,"byte_end":580880,"line_start":669,"line_end":669,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":580885,"byte_end":580913,"line_start":670,"line_end":670,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":580918,"byte_end":580982,"line_start":671,"line_end":671,"column_start":5,"column_end":69}},{"value":"/ If parsed fields include an UTC offset, it also has to be consistent to","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":580987,"byte_end":581062,"line_start":672,"line_end":672,"column_start":5,"column_end":80}},{"value":"/ [`offset`](#structfield.offset).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":581067,"byte_end":581103,"line_start":673,"line_end":673,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1134},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":618282,"byte_end":618287,"line_start":234,"line_end":234,"column_start":8,"column_end":13},"name":"parse","qualname":"::format::parse::parse","value":"pub fn parse<'a, I, B>(&mut Parsed, &str, I) -> ParseResult<()> where\nI: Iterator<Item = B>, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Tries to parse given string into `parsed` with given formatting items.\n Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\n There should be no trailing string after parsing;\n use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","sig":null,"attributes":[{"value":"/ Tries to parse given string into `parsed` with given formatting items.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":617379,"byte_end":617453,"line_start":218,"line_end":218,"column_start":1,"column_end":75}},{"value":"/ Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":617454,"byte_end":617550,"line_start":219,"line_end":219,"column_start":1,"column_end":97}},{"value":"/ There should be no trailing string after parsing;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":617551,"byte_end":617604,"line_start":220,"line_end":220,"column_start":1,"column_end":54}},{"value":"/ use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":617605,"byte_end":617689,"line_start":221,"line_end":221,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":617690,"byte_end":617693,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ This particular date and time parser is:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":617694,"byte_end":617738,"line_start":223,"line_end":223,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":617739,"byte_end":617742,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ - Greedy. It will consume the longest possible prefix.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":617743,"byte_end":617801,"line_start":225,"line_end":225,"column_start":1,"column_end":59}},{"value":"/   For example, `April` is always consumed entirely when the long month name is requested;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":617802,"byte_end":617895,"line_start":226,"line_end":226,"column_start":1,"column_end":94}},{"value":"/   it equally accepts `Apr`, but prefers the longer prefix in this case.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":617896,"byte_end":617971,"line_start":227,"line_end":227,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":617972,"byte_end":617975,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ - Padding-agnostic (for numeric items).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":617976,"byte_end":618019,"line_start":229,"line_end":229,"column_start":1,"column_end":44}},{"value":"/   The [`Pad`](./enum.Pad.html) field is completely ignored,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":618020,"byte_end":618083,"line_start":230,"line_end":230,"column_start":1,"column_end":64}},{"value":"/   so one can prepend any number of whitespace then any number of zeroes before numbers.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":618084,"byte_end":618175,"line_start":231,"line_end":231,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":618176,"byte_end":618179,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ - (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":618180,"byte_end":618274,"line_start":233,"line_end":233,"column_start":1,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1213},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/strftime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strftime","qualname":"::format::strftime","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/strftime.rs","parent":null,"children":[{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1940},{"krate":0,"index":1950},{"krate":0,"index":1947},{"krate":0,"index":1226},{"krate":0,"index":1232},{"krate":0,"index":1233}],"decl_id":null,"docs":"`strftime`/`strptime`-inspired date and time formatting syntax.","sig":null,"attributes":[{"value":"*\n`strftime`/`strptime`-inspired date and time formatting syntax.\n\n## Specifiers\n\nThe following specifiers are available both to formatting and parsing.\n\n| Spec. | Example  | Description                                                                |\n|-------|----------|----------------------------------------------------------------------------|\n|       |          | **DATE SPECIFIERS:**                                                       |\n| `%Y`  | `2001`   | The full proleptic Gregorian year, zero-padded to 4 digits. [^1]           |\n| `%C`  | `20`     | The proleptic Gregorian year divided by 100, zero-padded to 2 digits. [^2] |\n| `%y`  | `01`     | The proleptic Gregorian year modulo 100, zero-padded to 2 digits. [^2]     |\n|       |          |                                                                            |\n| `%m`  | `07`     | Month number (01--12), zero-padded to 2 digits.                            |\n| `%b`  | `Jul`    | Abbreviated month name. Always 3 letters.                                  |\n| `%B`  | `July`   | Full month name. Also accepts corresponding abbreviation in parsing.       |\n| `%h`  | `Jul`    | Same as `%b`.                                                              |\n|       |          |                                                                            |\n| `%d`  | `08`     | Day number (01--31), zero-padded to 2 digits.                              |\n| `%e`  | ` 8`     | Same as `%d` but space-padded. Same as `%_d`.                              |\n|       |          |                                                                            |\n| `%a`  | `Sun`    | Abbreviated weekday name. Always 3 letters.                                |\n| `%A`  | `Sunday` | Full weekday name. Also accepts corresponding abbreviation in parsing.     |\n| `%w`  | `0`      | Sunday = 0, Monday = 1, ..., Saturday = 6.                                 |\n| `%u`  | `7`      | Monday = 1, Tuesday = 2, ..., Sunday = 7. (ISO 8601)                       |\n|       |          |                                                                            |\n| `%U`  | `28`     | Week number starting with Sunday (00--53), zero-padded to 2 digits. [^3]   |\n| `%W`  | `27`     | Same as `%U`, but week 1 starts with the first Monday in that year instead.|\n|       |          |                                                                            |\n| `%G`  | `2001`   | Same as `%Y` but uses the year number in ISO 8601 week date. [^4]          |\n| `%g`  | `01`     | Same as `%y` but uses the year number in ISO 8601 week date. [^4]          |\n| `%V`  | `27`     | Same as `%U` but uses the week number in ISO 8601 week date (01--53). [^4] |\n|       |          |                                                                            |\n| `%j`  | `189`    | Day of the year (001--366), zero-padded to 3 digits.                       |\n|       |          |                                                                            |\n| `%D`  | `07/08/01`    | Month-day-year format. Same as `%m/%d/%y`.                            |\n| `%x`  | `07/08/01`    | Locale's date representation (e.g., 12/31/99).                        |\n| `%F`  | `2001-07-08`  | Year-month-day format (ISO 8601). Same as `%Y-%m-%d`.                 |\n| `%v`  | ` 8-Jul-2001` | Day-month-year format. Same as `%e-%b-%Y`.                            |\n|       |          |                                                                            |\n|       |          | **TIME SPECIFIERS:**                                                       |\n| `%H`  | `00`     | Hour number (00--23), zero-padded to 2 digits.                             |\n| `%k`  | ` 0`     | Same as `%H` but space-padded. Same as `%_H`.                              |\n| `%I`  | `12`     | Hour number in 12-hour clocks (01--12), zero-padded to 2 digits.           |\n| `%l`  | `12`     | Same as `%I` but space-padded. Same as `%_I`.                              |\n|       |          |                                                                            |\n| `%P`  | `am`     | `am` or `pm` in 12-hour clocks.                                            |\n| `%p`  | `AM`     | `AM` or `PM` in 12-hour clocks.                                            |\n|       |          |                                                                            |\n| `%M`  | `34`     | Minute number (00--59), zero-padded to 2 digits.                           |\n| `%S`  | `60`     | Second number (00--60), zero-padded to 2 digits. [^5]                      |\n| `%f`  | `026490000`   | The fractional seconds (in nanoseconds) since last whole second. [^8] |\n| `%.f` | `.026490`| Similar to `.%f` but left-aligned. These all consume the leading dot. [^8] |\n| `%.3f`| `.026`        | Similar to `.%f` but left-aligned but fixed to a length of 3. [^8]    |\n| `%.6f`| `.026490`     | Similar to `.%f` but left-aligned but fixed to a length of 6. [^8]    |\n| `%.9f`| `.026490000`  | Similar to `.%f` but left-aligned but fixed to a length of 9. [^8]    |\n| `%3f` | `026`         | Similar to `%.3f` but without the leading dot. [^8]                   |\n| `%6f` | `026490`      | Similar to `%.6f` but without the leading dot. [^8]                   |\n| `%9f` | `026490000`   | Similar to `%.9f` but without the leading dot. [^8]                   |\n|       |               |                                                                       |\n| `%R`  | `00:34`       | Hour-minute format. Same as `%H:%M`.                                  |\n| `%T`  | `00:34:60`    | Hour-minute-second format. Same as `%H:%M:%S`.                        |\n| `%X`  | `00:34:60`    | Locale's time representation (e.g., 23:13:48).                        |\n| `%r`  | `12:34:60 AM` | Hour-minute-second format in 12-hour clocks. Same as `%I:%M:%S %p`.   |\n|       |          |                                                                            |\n|       |          | **TIME ZONE SPECIFIERS:**                                                  |\n| `%Z`  | `ACST`   | Local time zone name. Skips all non-whitespace characters during parsing. [^9] |\n| `%z`  | `+0930`  | Offset from the local time to UTC (with UTC being `+0000`).                |\n| `%:z` | `+09:30` | Same as `%z` but with a colon.                                             |\n| `%#z` | `+09`    | *Parsing only:* Same as `%z` but allows minutes to be missing or present.  |\n|       |          |                                                                            |\n|       |          | **DATE & TIME SPECIFIERS:**                                                |\n|`%c`|`Sun Jul  8 00:34:60 2001`|Locale's date and time (e.g., Thu Mar  3 23:05:25 2005).       |\n| `%+`  | `2001-07-08T00:34:60.026490+09:30` | ISO 8601 / RFC 3339 date & time format. [^6]     |\n|       |               |                                                                       |\n| `%s`  | `994518299`   | UNIX timestamp, the number of seconds since 1970-01-01 00:00 UTC. [^7]|\n|       |          |                                                                            |\n|       |          | **SPECIAL SPECIFIERS:**                                                    |\n| `%t`  |          | Literal tab (`\\t`).                                                        |\n| `%n`  |          | Literal newline (`\\n`).                                                    |\n| `%%`  |          | Literal percent sign.                                                      |\n\nIt is possible to override the default padding behavior of numeric specifiers `%?`.\nThis is not allowed for other specifiers and will result in the `BAD_FORMAT` error.\n\nModifier | Description\n-------- | -----------\n`%-?`    | Suppresses any padding including spaces and zeroes. (e.g. `%j` = `012`, `%-j` = `12`)\n`%_?`    | Uses spaces as a padding. (e.g. `%j` = `012`, `%_j` = ` 12`)\n`%0?`    | Uses zeroes as a padding. (e.g. `%e` = ` 9`, `%0e` = `09`)\n\nNotes:\n\n[^1]: `%Y`:\n   Negative years are allowed in formatting but not in parsing.\n\n[^2]: `%C`, `%y`:\n   This is floor division, so 100 BCE (year number -99) will print `-1` and `99` respectively.\n\n[^3]: `%U`:\n   Week 1 starts with the first Sunday in that year.\n   It is possible to have week 0 for days before the first Sunday.\n\n[^4]: `%G`, `%g`, `%V`:\n   Week 1 is the first week with at least 4 days in that year.\n   Week 0 does not exist, so this should be used with `%G` or `%g`.\n\n[^5]: `%S`:\n   It accounts for leap seconds, so `60` is possible.\n\n[^6]: `%+`: Same as `%Y-%m-%dT%H:%M:%S%.f%:z`, i.e. 0, 3, 6 or 9 fractional\n   digits for seconds and colons in the time zone offset.\n   <br>\n   <br>\n   The typical `strftime` implementations have different (and locale-dependent)\n   formats for this specifier. While Chrono's format for `%+` is far more\n   stable, it is best to avoid this specifier if you want to control the exact\n   output.\n\n[^7]: `%s`:\n   This is not padded and can be negative.\n   For the purpose of Chrono, it only accounts for non-leap seconds\n   so it slightly differs from ISO C `strftime` behavior.\n\n[^8]: `%f`, `%.f`, `%.3f`, `%.6f`, `%.9f`, `%3f`, `%6f`, `%9f`:\n   <br>\n   The default `%f` is right-aligned and always zero-padded to 9 digits\n   for the compatibility with glibc and others,\n   so it always counts the number of nanoseconds since the last whole second.\n   E.g. 7ms after the last second will print `007000000`,\n   and parsing `7000000` will yield the same.\n   <br>\n   <br>\n   The variant `%.f` is left-aligned and print 0, 3, 6 or 9 fractional digits\n   according to the precision.\n   E.g. 70ms after the last second under `%.f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can print or read nothing if the fractional part is zero or\n   the next character is not `.`.\n   <br>\n   <br>\n   The variant `%.3f`, `%.6f` and `%.9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`.\n   E.g. 70ms after the last second under `%.3f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero or\n   the next character is not `.` however will print with the specified length.\n   <br>\n   <br>\n   The variant `%3f`, `%6f` and `%9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`, but without the leading dot.\n   E.g. 70ms after the last second under `%3f` will print `070` (note: not `07`),\n   and parsing `07`, `070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero.\n\n[^9]: `%Z`:\n   Offset will not be populated from the parsed data, nor will it be validated.\n   Timezone is completely ignored. Similar to the glibc `strptime` treatment of\n   this format code.\n   <br>\n   <br>\n   It is not possible to reliably convert from an abbreviation to an offset,\n   for example CDT can mean either Central Daylight Time (North America) or\n   China Daylight Time.\n*/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/strftime.rs","byte_start":663122,"byte_end":674192,"line_start":4,"line_end":169,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1940},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/strftime.rs","byte_start":675084,"byte_end":675097,"line_start":202,"line_end":202,"column_start":12,"column_end":25},"name":"StrftimeItems","qualname":"::format::strftime::StrftimeItems","value":"StrftimeItems {  }","parent":null,"children":[{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1944},{"krate":0,"index":1945},{"krate":0,"index":1946}],"decl_id":null,"docs":" Parsing iterator for `strftime`-like format strings.\n","sig":null,"attributes":[{"value":"/ Parsing iterator for `strftime`-like format strings.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/strftime.rs","byte_start":674992,"byte_end":675048,"line_start":200,"line_end":200,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/strftime.rs","byte_start":675687,"byte_end":675690,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"new","qualname":"<StrftimeItems>::new","value":"pub fn new(&'a str) -> StrftimeItems","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parsing iterator from the `strftime`-like format string.\n","sig":null,"attributes":[{"value":"/ Creates a new parsing iterator from the `strftime`-like format string.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/strftime.rs","byte_start":675601,"byte_end":675675,"line_start":218,"line_end":218,"column_start":5,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":1261},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":694584,"byte_end":694595,"line_start":21,"line_end":21,"column_start":11,"column_end":22},"name":"SubsecRound","qualname":"::round::SubsecRound","value":"SubsecRound","parent":null,"children":[{"krate":0,"index":1262},{"krate":0,"index":1263}],"decl_id":null,"docs":" Extension trait for subsecond rounding or truncation to a maximum number\n of digits. Rounding can be used to decrease the error variance when\n serializing/persisting to lower precision. Truncation is the default\n behavior in Chrono display formatting.  Either can be used to guarantee\n equality (e.g. for testing) when round-tripping through a lower precision\n format.\n","sig":null,"attributes":[{"value":"/ Extension trait for subsecond rounding or truncation to a maximum number","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":694186,"byte_end":694262,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ of digits. Rounding can be used to decrease the error variance when","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":694263,"byte_end":694334,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/ serializing/persisting to lower precision. Truncation is the default","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":694335,"byte_end":694407,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ behavior in Chrono display formatting.  Either can be used to guarantee","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":694408,"byte_end":694483,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ equality (e.g. for testing) when round-tripping through a lower precision","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":694484,"byte_end":694561,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ format.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":694562,"byte_end":694573,"line_start":20,"line_end":20,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":695125,"byte_end":695138,"line_start":33,"line_end":33,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"::round::SubsecRound::round_subsecs","value":"pub fn round_subsecs(Self, u16) -> Self","parent":{"krate":0,"index":1261},"children":[],"decl_id":null,"docs":" Return a copy rounded to the specified number of subsecond digits. With\n 9 or more digits, self is returned unmodified. Halfway values are\n rounded up (away from zero).","sig":null,"attributes":[{"value":"/ Return a copy rounded to the specified number of subsecond digits. With","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":694602,"byte_end":694677,"line_start":22,"line_end":22,"column_start":5,"column_end":80}},{"value":"/ 9 or more digits, self is returned unmodified. Halfway values are","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":694682,"byte_end":694751,"line_start":23,"line_end":23,"column_start":5,"column_end":74}},{"value":"/ rounded up (away from zero).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":694756,"byte_end":694788,"line_start":24,"line_end":24,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":694793,"byte_end":694796,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":694801,"byte_end":694814,"line_start":26,"line_end":26,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":694819,"byte_end":694831,"line_start":27,"line_end":27,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":694836,"byte_end":694903,"line_start":28,"line_end":28,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":694908,"byte_end":694971,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.round_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":694976,"byte_end":695038,"line_start":30,"line_end":30,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.round_subsecs(1).nanosecond(), 200_000_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":695043,"byte_end":695105,"line_start":31,"line_end":31,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":695110,"byte_end":695117,"line_start":32,"line_end":32,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":695641,"byte_end":695654,"line_start":45,"line_end":45,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"::round::SubsecRound::trunc_subsecs","value":"pub fn trunc_subsecs(Self, u16) -> Self","parent":{"krate":0,"index":1261},"children":[],"decl_id":null,"docs":" Return a copy truncated to the specified number of subsecond\n digits. With 9 or more digits, self is returned unmodified.","sig":null,"attributes":[{"value":"/ Return a copy truncated to the specified number of subsecond","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":695172,"byte_end":695236,"line_start":35,"line_end":35,"column_start":5,"column_end":69}},{"value":"/ digits. With 9 or more digits, self is returned unmodified.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":695241,"byte_end":695304,"line_start":36,"line_end":36,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":695309,"byte_end":695312,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":695317,"byte_end":695330,"line_start":38,"line_end":38,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":695335,"byte_end":695347,"line_start":39,"line_end":39,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":695352,"byte_end":695419,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":695424,"byte_end":695487,"line_start":41,"line_end":41,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.trunc_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":695492,"byte_end":695554,"line_start":42,"line_end":42,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.trunc_subsecs(1).nanosecond(), 100_000_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":695559,"byte_end":695621,"line_start":43,"line_end":43,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":695626,"byte_end":695633,"line_start":44,"line_end":44,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1269},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697393,"byte_end":697406,"line_start":102,"line_end":102,"column_start":11,"column_end":24},"name":"DurationRound","qualname":"::round::DurationRound","value":"DurationRound: Sized","parent":null,"children":[{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1272}],"decl_id":null,"docs":" Extension trait for rounding or truncating a DateTime by a Duration.","sig":null,"attributes":[{"value":"/ Extension trait for rounding or truncating a DateTime by a Duration.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":696980,"byte_end":697052,"line_start":95,"line_end":95,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697053,"byte_end":697056,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ # Limitations","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697057,"byte_end":697074,"line_start":97,"line_end":97,"column_start":1,"column_end":18}},{"value":"/ Both rounding and truncating are done via [`Duration::num_nanoseconds`] and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697075,"byte_end":697154,"line_start":98,"line_end":98,"column_start":1,"column_end":80}},{"value":"/ [`DateTime::timestamp_nanos`]. This means that they will fail if either the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697155,"byte_end":697234,"line_start":99,"line_end":99,"column_start":1,"column_end":80}},{"value":"/ `Duration` or the `DateTime` are too big to represented as nanoseconds. They","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697235,"byte_end":697315,"line_start":100,"line_end":100,"column_start":1,"column_end":81}},{"value":"/ will also fail if the `Duration` is bigger than the timestamp.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697316,"byte_end":697382,"line_start":101,"line_end":101,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":1270},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697652,"byte_end":697655,"line_start":109,"line_end":109,"column_start":10,"column_end":13},"name":"Err","qualname":"::round::DurationRound::Err","value":"type Err: fmt::Debug + fmt::Display;","parent":{"krate":0,"index":1269},"children":[],"decl_id":null,"docs":" Error that can occur in rounding or truncating\n","sig":null,"attributes":[{"value":"/ Error that can occur in rounding or truncating","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697548,"byte_end":697598,"line_start":107,"line_end":107,"column_start":5,"column_end":55}},{"value":"cfg(not(any(feature = \"std\", test)))","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697603,"byte_end":697642,"line_start":108,"line_end":108,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1271},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698225,"byte_end":698239,"line_start":126,"line_end":126,"column_start":8,"column_end":22},"name":"duration_round","qualname":"::round::DurationRound::duration_round","value":"pub fn duration_round(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":1269},"children":[],"decl_id":null,"docs":" Return a copy rounded by Duration.","sig":null,"attributes":[{"value":"/ Return a copy rounded by Duration.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697689,"byte_end":697727,"line_start":111,"line_end":111,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697732,"byte_end":697735,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697740,"byte_end":697753,"line_start":113,"line_end":113,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697758,"byte_end":697770,"line_start":114,"line_end":114,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, TimeZone, Utc};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697775,"byte_end":697844,"line_start":115,"line_end":115,"column_start":5,"column_end":74}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697849,"byte_end":697912,"line_start":116,"line_end":116,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697917,"byte_end":697932,"line_start":117,"line_end":117,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::milliseconds(10)).unwrap().to_string(),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697937,"byte_end":698012,"line_start":118,"line_end":118,"column_start":5,"column_end":80}},{"value":"/     \"2018-01-11 12:00:00.150 UTC\"","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698017,"byte_end":698054,"line_start":119,"line_end":119,"column_start":5,"column_end":42}},{"value":"/ );","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698059,"byte_end":698065,"line_start":120,"line_end":120,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698070,"byte_end":698085,"line_start":121,"line_end":121,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(1)).unwrap().to_string(),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698090,"byte_end":698156,"line_start":122,"line_end":122,"column_start":5,"column_end":71}},{"value":"/     \"2018-01-12 00:00:00 UTC\"","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698161,"byte_end":698194,"line_start":123,"line_end":123,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698199,"byte_end":698205,"line_start":124,"line_end":124,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698210,"byte_end":698217,"line_start":125,"line_end":125,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698837,"byte_end":698851,"line_start":143,"line_end":143,"column_start":8,"column_end":22},"name":"duration_trunc","qualname":"::round::DurationRound::duration_trunc","value":"pub fn duration_trunc(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":1269},"children":[],"decl_id":null,"docs":" Return a copy truncated by Duration.","sig":null,"attributes":[{"value":"/ Return a copy truncated by Duration.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698299,"byte_end":698339,"line_start":128,"line_end":128,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698344,"byte_end":698347,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698352,"byte_end":698365,"line_start":130,"line_end":130,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698370,"byte_end":698382,"line_start":131,"line_end":131,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, TimeZone, Utc};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698387,"byte_end":698456,"line_start":132,"line_end":132,"column_start":5,"column_end":74}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698461,"byte_end":698524,"line_start":133,"line_end":133,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698529,"byte_end":698544,"line_start":134,"line_end":134,"column_start":5,"column_end":20}},{"value":"/     dt.duration_trunc(Duration::milliseconds(10)).unwrap().to_string(),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698549,"byte_end":698624,"line_start":135,"line_end":135,"column_start":5,"column_end":80}},{"value":"/     \"2018-01-11 12:00:00.150 UTC\"","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698629,"byte_end":698666,"line_start":136,"line_end":136,"column_start":5,"column_end":42}},{"value":"/ );","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698671,"byte_end":698677,"line_start":137,"line_end":137,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698682,"byte_end":698697,"line_start":138,"line_end":138,"column_start":5,"column_end":20}},{"value":"/     dt.duration_trunc(Duration::days(1)).unwrap().to_string(),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698702,"byte_end":698768,"line_start":139,"line_end":139,"column_start":5,"column_end":71}},{"value":"/     \"2018-01-11 00:00:00 UTC\"","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698773,"byte_end":698806,"line_start":140,"line_end":140,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698811,"byte_end":698817,"line_start":141,"line_end":141,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":698822,"byte_end":698829,"line_start":142,"line_end":142,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1960},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701678,"byte_end":701702,"line_start":218,"line_end":218,"column_start":5,"column_end":29},"name":"DurationExceedsTimestamp","qualname":"::round::RoundingError::DurationExceedsTimestamp","value":"RoundingError::DurationExceedsTimestamp","parent":{"krate":0,"index":1959},"children":[],"decl_id":null,"docs":" Error when the Duration exceeds the Duration from or until the Unix epoch.","sig":null,"attributes":[{"value":"/ Error when the Duration exceeds the Duration from or until the Unix epoch.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701263,"byte_end":701341,"line_start":207,"line_end":207,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701346,"byte_end":701349,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701354,"byte_end":701366,"line_start":209,"line_end":209,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701371,"byte_end":701455,"line_start":210,"line_end":210,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(1970, 12, 12).and_hms(0, 0, 0);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701460,"byte_end":701512,"line_start":211,"line_end":211,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701517,"byte_end":701520,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701525,"byte_end":701540,"line_start":213,"line_end":213,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(365)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701545,"byte_end":701592,"line_start":214,"line_end":214,"column_start":5,"column_end":52}},{"value":"/     Err(RoundingError::DurationExceedsTimestamp),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701597,"byte_end":701650,"line_start":215,"line_end":215,"column_start":5,"column_end":58}},{"value":"/ );","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701655,"byte_end":701661,"line_start":216,"line_end":216,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701666,"byte_end":701673,"line_start":217,"line_end":217,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1962},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":702129,"byte_end":702149,"line_start":231,"line_end":231,"column_start":5,"column_end":25},"name":"DurationExceedsLimit","qualname":"::round::RoundingError::DurationExceedsLimit","value":"RoundingError::DurationExceedsLimit","parent":{"krate":0,"index":1959},"children":[],"decl_id":null,"docs":" Error when `Duration.num_nanoseconds` exceeds the limit.","sig":null,"attributes":[{"value":"/ Error when `Duration.num_nanoseconds` exceeds the limit.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701709,"byte_end":701769,"line_start":220,"line_end":220,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701774,"byte_end":701777,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701782,"byte_end":701794,"line_start":222,"line_end":222,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701799,"byte_end":701883,"line_start":223,"line_end":223,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(2260, 12, 31).and_hms_nano(23, 59, 59, 1_75_500_000);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701888,"byte_end":701962,"line_start":224,"line_end":224,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701967,"byte_end":701970,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701975,"byte_end":701990,"line_start":226,"line_end":226,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(300 * 365)),","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701995,"byte_end":702048,"line_start":227,"line_end":227,"column_start":5,"column_end":58}},{"value":"/     Err(RoundingError::DurationExceedsLimit)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":702053,"byte_end":702101,"line_start":228,"line_end":228,"column_start":5,"column_end":53}},{"value":"/ );","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":702106,"byte_end":702112,"line_start":229,"line_end":229,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":702117,"byte_end":702124,"line_start":230,"line_end":230,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1964},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":702514,"byte_end":702535,"line_start":241,"line_end":241,"column_start":5,"column_end":26},"name":"TimestampExceedsLimit","qualname":"::round::RoundingError::TimestampExceedsLimit","value":"RoundingError::TimestampExceedsLimit","parent":{"krate":0,"index":1959},"children":[],"decl_id":null,"docs":" Error when `DateTime.timestamp_nanos` exceeds the limit.","sig":null,"attributes":[{"value":"/ Error when `DateTime.timestamp_nanos` exceeds the limit.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":702156,"byte_end":702216,"line_start":233,"line_end":233,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":702221,"byte_end":702224,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":702229,"byte_end":702241,"line_start":235,"line_end":235,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":702246,"byte_end":702330,"line_start":236,"line_end":236,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(2300, 12, 12).and_hms(0, 0, 0);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":702335,"byte_end":702387,"line_start":237,"line_end":237,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":702392,"byte_end":702395,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(dt.duration_round(Duration::days(1)), Err(RoundingError::TimestampExceedsLimit),);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":702400,"byte_end":702497,"line_start":239,"line_end":239,"column_start":5,"column_end":102}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":702502,"byte_end":702509,"line_start":240,"line_end":240,"column_start":5,"column_end":12}}]},{"kind":"Enum","id":{"krate":0,"index":1959},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701243,"byte_end":701256,"line_start":206,"line_end":206,"column_start":10,"column_end":23},"name":"RoundingError","qualname":"::round::RoundingError","value":"pub enum RoundingError {\n\n    /// Error when the Duration exceeds the Duration from or until the Unix epoch.\n    ///\n    /// ``` rust\n    /// # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};\n    /// let dt = Utc.ymd(1970, 12, 12).and_hms(0, 0, 0);\n    ///\n    /// assert_eq!(\n    ///     dt.duration_round(Duration::days(365)),\n    ///     Err(RoundingError::DurationExceedsTimestamp),\n    /// );\n    /// ```\n    DurationExceedsTimestamp,\n\n    /// Error when `Duration.num_nanoseconds` exceeds the limit.\n    ///\n    /// ``` rust\n    /// # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};\n    /// let dt = Utc.ymd(2260, 12, 31).and_hms_nano(23, 59, 59, 1_75_500_000);\n    ///\n    /// assert_eq!(\n    ///     dt.duration_round(Duration::days(300 * 365)),\n    ///     Err(RoundingError::DurationExceedsLimit)\n    /// );\n    /// ```\n    DurationExceedsLimit,\n\n    /// Error when `DateTime.timestamp_nanos` exceeds the limit.\n    ///\n    /// ``` rust\n    /// # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};\n    /// let dt = Utc.ymd(2300, 12, 12).and_hms(0, 0, 0);\n    ///\n    /// assert_eq!(dt.duration_round(Duration::days(1)), Err(RoundingError::TimestampExceedsLimit),);\n    /// ```\n    TimestampExceedsLimit,\n}","parent":null,"children":[{"krate":0,"index":1960},{"krate":0,"index":1962},{"krate":0,"index":1964}],"decl_id":null,"docs":" An error from rounding by `Duration`","sig":null,"attributes":[{"value":"/ An error from rounding by `Duration`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701117,"byte_end":701157,"line_start":202,"line_end":202,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701158,"byte_end":701161,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ See: [`DurationRound`]","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":701162,"byte_end":701188,"line_start":204,"line_end":204,"column_start":1,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1978},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27205,"byte_end":27208,"line_start":648,"line_end":648,"column_start":5,"column_end":8},"name":"Mon","qualname":"::Weekday::Mon","value":"Weekday::Mon","parent":{"krate":0,"index":1977},"children":[],"decl_id":null,"docs":" Monday.\n","sig":null,"attributes":[{"value":"/ Monday.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27189,"byte_end":27200,"line_start":647,"line_end":647,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1981},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27235,"byte_end":27238,"line_start":650,"line_end":650,"column_start":5,"column_end":8},"name":"Tue","qualname":"::Weekday::Tue","value":"Weekday::Tue","parent":{"krate":0,"index":1977},"children":[],"decl_id":null,"docs":" Tuesday.\n","sig":null,"attributes":[{"value":"/ Tuesday.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27218,"byte_end":27230,"line_start":649,"line_end":649,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1984},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27267,"byte_end":27270,"line_start":652,"line_end":652,"column_start":5,"column_end":8},"name":"Wed","qualname":"::Weekday::Wed","value":"Weekday::Wed","parent":{"krate":0,"index":1977},"children":[],"decl_id":null,"docs":" Wednesday.\n","sig":null,"attributes":[{"value":"/ Wednesday.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27248,"byte_end":27262,"line_start":651,"line_end":651,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1987},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27298,"byte_end":27301,"line_start":654,"line_end":654,"column_start":5,"column_end":8},"name":"Thu","qualname":"::Weekday::Thu","value":"Weekday::Thu","parent":{"krate":0,"index":1977},"children":[],"decl_id":null,"docs":" Thursday.\n","sig":null,"attributes":[{"value":"/ Thursday.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27280,"byte_end":27293,"line_start":653,"line_end":653,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1990},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27327,"byte_end":27330,"line_start":656,"line_end":656,"column_start":5,"column_end":8},"name":"Fri","qualname":"::Weekday::Fri","value":"Weekday::Fri","parent":{"krate":0,"index":1977},"children":[],"decl_id":null,"docs":" Friday.\n","sig":null,"attributes":[{"value":"/ Friday.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27311,"byte_end":27322,"line_start":655,"line_end":655,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1993},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27358,"byte_end":27361,"line_start":658,"line_end":658,"column_start":5,"column_end":8},"name":"Sat","qualname":"::Weekday::Sat","value":"Weekday::Sat","parent":{"krate":0,"index":1977},"children":[],"decl_id":null,"docs":" Saturday.\n","sig":null,"attributes":[{"value":"/ Saturday.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27340,"byte_end":27353,"line_start":657,"line_end":657,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1996},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27387,"byte_end":27390,"line_start":660,"line_end":660,"column_start":5,"column_end":8},"name":"Sun","qualname":"::Weekday::Sun","value":"Weekday::Sun","parent":{"krate":0,"index":1977},"children":[],"decl_id":null,"docs":" Sunday.\n","sig":null,"attributes":[{"value":"/ Sunday.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27371,"byte_end":27382,"line_start":659,"line_end":659,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":1977},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27175,"byte_end":27182,"line_start":646,"line_end":646,"column_start":10,"column_end":17},"name":"Weekday","qualname":"::Weekday","value":"pub enum Weekday {\n\n    /// Monday.\n    Mon = ,\n\n    /// Tuesday.\n    Tue = ,\n\n    /// Wednesday.\n    Wed = ,\n\n    /// Thursday.\n    Thu = ,\n\n    /// Friday.\n    Fri = ,\n\n    /// Saturday.\n    Sat = ,\n\n    /// Sunday.\n    Sun = ,\n}","parent":null,"children":[{"krate":0,"index":1978},{"krate":0,"index":1981},{"krate":0,"index":1984},{"krate":0,"index":1987},{"krate":0,"index":1990},{"krate":0,"index":1993},{"krate":0,"index":1996}],"decl_id":null,"docs":" The day of week.","sig":null,"attributes":[{"value":"/ The day of week.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":26780,"byte_end":26800,"line_start":639,"line_end":639,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":26801,"byte_end":26804,"line_start":640,"line_end":640,"column_start":1,"column_end":4}},{"value":"/ The order of the days of week depends on the context.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":26805,"byte_end":26862,"line_start":641,"line_end":641,"column_start":1,"column_end":58}},{"value":"/ (This is why this type does *not* implement `PartialOrd` or `Ord` traits.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":26863,"byte_end":26941,"line_start":642,"line_end":642,"column_start":1,"column_end":79}},{"value":"/ One should prefer `*_from_monday` or `*_from_sunday` methods to get the correct result.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":26942,"byte_end":27033,"line_start":643,"line_end":643,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27709,"byte_end":27713,"line_start":670,"line_end":670,"column_start":12,"column_end":16},"name":"succ","qualname":"<Weekday>::succ","value":"pub fn succ(&Self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The next day in the week.","sig":null,"attributes":[{"value":"/ The next day in the week.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27418,"byte_end":27447,"line_start":664,"line_end":664,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27452,"byte_end":27455,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27460,"byte_end":27531,"line_start":666,"line_end":666,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27536,"byte_end":27607,"line_start":667,"line_end":667,"column_start":5,"column_end":76}},{"value":"/ `w.succ()`: | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun` | `Mon`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27612,"byte_end":27683,"line_start":668,"line_end":668,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27688,"byte_end":27697,"line_start":669,"line_end":669,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":28366,"byte_end":28370,"line_start":688,"line_end":688,"column_start":12,"column_end":16},"name":"pred","qualname":"<Weekday>::pred","value":"pub fn pred(&Self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The previous day in the week.","sig":null,"attributes":[{"value":"/ The previous day in the week.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":28071,"byte_end":28104,"line_start":682,"line_end":682,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":28109,"byte_end":28112,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":28117,"byte_end":28188,"line_start":684,"line_end":684,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":28193,"byte_end":28264,"line_start":685,"line_end":685,"column_start":5,"column_end":76}},{"value":"/ `w.pred()`: | `Sun` | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":28269,"byte_end":28340,"line_start":686,"line_end":686,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":28345,"byte_end":28354,"line_start":687,"line_end":687,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":29112,"byte_end":29130,"line_start":706,"line_end":706,"column_start":12,"column_end":30},"name":"number_from_monday","qualname":"<Weekday>::number_from_monday","value":"pub fn number_from_monday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":28728,"byte_end":28812,"line_start":700,"line_end":700,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":28817,"byte_end":28820,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":28825,"byte_end":28910,"line_start":702,"line_end":702,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":28915,"byte_end":29000,"line_start":703,"line_end":703,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_monday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 7","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":29005,"byte_end":29086,"line_start":704,"line_end":704,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":29091,"byte_end":29100,"line_start":705,"line_end":705,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1285},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":29765,"byte_end":29783,"line_start":724,"line_end":724,"column_start":12,"column_end":30},"name":"number_from_sunday","qualname":"<Weekday>::number_from_sunday","value":"pub fn number_from_sunday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 1.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 1.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":29407,"byte_end":29465,"line_start":718,"line_end":718,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":29470,"byte_end":29473,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":29478,"byte_end":29563,"line_start":720,"line_end":720,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":29568,"byte_end":29653,"line_start":721,"line_end":721,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_sunday()`: | 2     | 3     | 4     | 5     | 6     | 7     | 1","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":29658,"byte_end":29739,"line_start":722,"line_end":722,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":29744,"byte_end":29753,"line_start":723,"line_end":723,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":30424,"byte_end":30444,"line_start":742,"line_end":742,"column_start":12,"column_end":32},"name":"num_days_from_monday","qualname":"<Weekday>::num_days_from_monday","value":"pub fn num_days_from_monday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 0.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":30060,"byte_end":30118,"line_start":736,"line_end":736,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":30123,"byte_end":30126,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":30131,"byte_end":30218,"line_start":738,"line_end":738,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":30223,"byte_end":30310,"line_start":739,"line_end":739,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_monday()`: | 0     | 1     | 2     | 3     | 4     | 5     | 6","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":30315,"byte_end":30398,"line_start":740,"line_end":740,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":30403,"byte_end":30412,"line_start":741,"line_end":741,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1287},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":31085,"byte_end":31105,"line_start":760,"line_end":760,"column_start":12,"column_end":32},"name":"num_days_from_sunday","qualname":"<Weekday>::num_days_from_sunday","value":"pub fn num_days_from_sunday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 0.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":30721,"byte_end":30779,"line_start":754,"line_end":754,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":30784,"byte_end":30787,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":30792,"byte_end":30879,"line_start":756,"line_end":756,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":30884,"byte_end":30971,"line_start":757,"line_end":757,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_sunday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 0","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":30976,"byte_end":31059,"line_start":758,"line_end":758,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":31064,"byte_end":31073,"line_start":759,"line_end":759,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2013},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":32944,"byte_end":32961,"line_start":824,"line_end":824,"column_start":12,"column_end":29},"name":"ParseWeekdayError","qualname":"::ParseWeekdayError","value":"ParseWeekdayError {  }","parent":null,"children":[{"krate":0,"index":2014}],"decl_id":null,"docs":" An error resulting from reading `Weekday` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `Weekday` value with `FromStr`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":32837,"byte_end":32904,"line_start":822,"line_end":822,"column_start":1,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2022},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37130,"byte_end":37137,"line_start":968,"line_end":968,"column_start":5,"column_end":12},"name":"January","qualname":"::Month::January","value":"Month::January","parent":{"krate":0,"index":2021},"children":[],"decl_id":null,"docs":" January\n","sig":null,"attributes":[{"value":"/ January","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37114,"byte_end":37125,"line_start":967,"line_end":967,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2025},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37164,"byte_end":37172,"line_start":970,"line_end":970,"column_start":5,"column_end":13},"name":"February","qualname":"::Month::February","value":"Month::February","parent":{"krate":0,"index":2021},"children":[],"decl_id":null,"docs":" February\n","sig":null,"attributes":[{"value":"/ February","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37147,"byte_end":37159,"line_start":969,"line_end":969,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2028},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37196,"byte_end":37201,"line_start":972,"line_end":972,"column_start":5,"column_end":10},"name":"March","qualname":"::Month::March","value":"Month::March","parent":{"krate":0,"index":2021},"children":[],"decl_id":null,"docs":" March\n","sig":null,"attributes":[{"value":"/ March","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37182,"byte_end":37191,"line_start":971,"line_end":971,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2031},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37225,"byte_end":37230,"line_start":974,"line_end":974,"column_start":5,"column_end":10},"name":"April","qualname":"::Month::April","value":"Month::April","parent":{"krate":0,"index":2021},"children":[],"decl_id":null,"docs":" April\n","sig":null,"attributes":[{"value":"/ April","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37211,"byte_end":37220,"line_start":973,"line_end":973,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2034},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37252,"byte_end":37255,"line_start":976,"line_end":976,"column_start":5,"column_end":8},"name":"May","qualname":"::Month::May","value":"Month::May","parent":{"krate":0,"index":2021},"children":[],"decl_id":null,"docs":" May\n","sig":null,"attributes":[{"value":"/ May","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37240,"byte_end":37247,"line_start":975,"line_end":975,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2037},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37278,"byte_end":37282,"line_start":978,"line_end":978,"column_start":5,"column_end":9},"name":"June","qualname":"::Month::June","value":"Month::June","parent":{"krate":0,"index":2021},"children":[],"decl_id":null,"docs":" June\n","sig":null,"attributes":[{"value":"/ June","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37265,"byte_end":37273,"line_start":977,"line_end":977,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2040},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37305,"byte_end":37309,"line_start":980,"line_end":980,"column_start":5,"column_end":9},"name":"July","qualname":"::Month::July","value":"Month::July","parent":{"krate":0,"index":2021},"children":[],"decl_id":null,"docs":" July\n","sig":null,"attributes":[{"value":"/ July","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37292,"byte_end":37300,"line_start":979,"line_end":979,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2043},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37334,"byte_end":37340,"line_start":982,"line_end":982,"column_start":5,"column_end":11},"name":"August","qualname":"::Month::August","value":"Month::August","parent":{"krate":0,"index":2021},"children":[],"decl_id":null,"docs":" August\n","sig":null,"attributes":[{"value":"/ August","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37319,"byte_end":37329,"line_start":981,"line_end":981,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2046},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37368,"byte_end":37377,"line_start":984,"line_end":984,"column_start":5,"column_end":14},"name":"September","qualname":"::Month::September","value":"Month::September","parent":{"krate":0,"index":2021},"children":[],"decl_id":null,"docs":" September\n","sig":null,"attributes":[{"value":"/ September","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37350,"byte_end":37363,"line_start":983,"line_end":983,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2049},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37403,"byte_end":37410,"line_start":986,"line_end":986,"column_start":5,"column_end":12},"name":"October","qualname":"::Month::October","value":"Month::October","parent":{"krate":0,"index":2021},"children":[],"decl_id":null,"docs":" October\n","sig":null,"attributes":[{"value":"/ October","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37387,"byte_end":37398,"line_start":985,"line_end":985,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2052},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37437,"byte_end":37445,"line_start":988,"line_end":988,"column_start":5,"column_end":13},"name":"November","qualname":"::Month::November","value":"Month::November","parent":{"krate":0,"index":2021},"children":[],"decl_id":null,"docs":" November\n","sig":null,"attributes":[{"value":"/ November","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37420,"byte_end":37432,"line_start":987,"line_end":987,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2055},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37473,"byte_end":37481,"line_start":990,"line_end":990,"column_start":5,"column_end":13},"name":"December","qualname":"::Month::December","value":"Month::December","parent":{"krate":0,"index":2021},"children":[],"decl_id":null,"docs":" December\n","sig":null,"attributes":[{"value":"/ December","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37456,"byte_end":37468,"line_start":989,"line_end":989,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":2021},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37102,"byte_end":37107,"line_start":966,"line_end":966,"column_start":10,"column_end":15},"name":"Month","qualname":"::Month","value":"pub enum Month {\n\n    /// January\n    January = ,\n\n    /// February\n    February = ,\n\n    /// March\n    March = ,\n\n    /// April\n    April = ,\n\n    /// May\n    May = ,\n\n    /// June\n    June = ,\n\n    /// July\n    July = ,\n\n    /// August\n    August = ,\n\n    /// September\n    September = ,\n\n    /// October\n    October = ,\n\n    /// November\n    November = ,\n\n    /// December\n    December = ,\n}","parent":null,"children":[{"krate":0,"index":2022},{"krate":0,"index":2025},{"krate":0,"index":2028},{"krate":0,"index":2031},{"krate":0,"index":2034},{"krate":0,"index":2037},{"krate":0,"index":2040},{"krate":0,"index":2043},{"krate":0,"index":2046},{"krate":0,"index":2049},{"krate":0,"index":2052},{"krate":0,"index":2055}],"decl_id":null,"docs":" The month of the year.","sig":null,"attributes":[{"value":"/ The month of the year.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":35957,"byte_end":35983,"line_start":939,"line_end":939,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":35984,"byte_end":35987,"line_start":940,"line_end":940,"column_start":1,"column_end":4}},{"value":"/ This enum is just a convenience implementation.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":35988,"byte_end":36039,"line_start":941,"line_end":941,"column_start":1,"column_end":52}},{"value":"/ The month in dates created by DateLike objects does not return this enum.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36040,"byte_end":36117,"line_start":942,"line_end":942,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36118,"byte_end":36121,"line_start":943,"line_end":943,"column_start":1,"column_end":4}},{"value":"/ It is possible to convert from a date to a month independently","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36122,"byte_end":36188,"line_start":944,"line_end":944,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36189,"byte_end":36196,"line_start":945,"line_end":945,"column_start":1,"column_end":8}},{"value":"/ # extern crate num_traits;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36197,"byte_end":36227,"line_start":946,"line_end":946,"column_start":1,"column_end":31}},{"value":"/ use num_traits::FromPrimitive;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36228,"byte_end":36262,"line_start":947,"line_end":947,"column_start":1,"column_end":35}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36263,"byte_end":36290,"line_start":948,"line_end":948,"column_start":1,"column_end":28}},{"value":"/ let date = Utc.ymd(2019, 10, 28).and_hms(9, 10, 11);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36291,"byte_end":36347,"line_start":949,"line_end":949,"column_start":1,"column_end":57}},{"value":"/ // `2019-10-28T09:10:11Z`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36348,"byte_end":36377,"line_start":950,"line_end":950,"column_start":1,"column_end":30}},{"value":"/ let month = Month::from_u32(date.month());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36378,"byte_end":36424,"line_start":951,"line_end":951,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(month, Some(Month::October))","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36425,"byte_end":36468,"line_start":952,"line_end":952,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36469,"byte_end":36476,"line_start":953,"line_end":953,"column_start":1,"column_end":8}},{"value":"/ Or from a Month to an integer usable by dates","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36477,"byte_end":36526,"line_start":954,"line_end":954,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36527,"byte_end":36534,"line_start":955,"line_end":955,"column_start":1,"column_end":8}},{"value":"/ # use chrono::prelude::*;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36535,"byte_end":36564,"line_start":956,"line_end":956,"column_start":1,"column_end":30}},{"value":"/ let month = Month::January;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36565,"byte_end":36596,"line_start":957,"line_end":957,"column_start":1,"column_end":32}},{"value":"/ let dt = Utc.ymd(2019, month.number_from_month(), 28).and_hms(9, 10, 11);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36597,"byte_end":36674,"line_start":958,"line_end":958,"column_start":1,"column_end":78}},{"value":"/ assert_eq!((dt.year(), dt.month(), dt.day()), (2019, 1, 28));","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36675,"byte_end":36740,"line_start":959,"line_end":959,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36741,"byte_end":36748,"line_start":960,"line_end":960,"column_start":1,"column_end":8}},{"value":"/ Allows mapping from and to month, from 1-January to 12-December.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36749,"byte_end":36817,"line_start":961,"line_end":961,"column_start":1,"column_end":69}},{"value":"/ Can be Serialized/Deserialized with serde","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":36818,"byte_end":36863,"line_start":962,"line_end":962,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37758,"byte_end":37762,"line_start":1000,"line_end":1000,"column_start":12,"column_end":16},"name":"succ","qualname":"<Month>::succ","value":"pub fn succ(&Self) -> Month","parent":null,"children":[],"decl_id":null,"docs":" The next month.","sig":null,"attributes":[{"value":"/ The next month.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37508,"byte_end":37527,"line_start":994,"line_end":994,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37532,"byte_end":37535,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ `m`:        | `January`  | `February` | `...` | `December`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37540,"byte_end":37602,"line_start":996,"line_end":996,"column_start":5,"column_end":67}},{"value":"/ ----------- | ---------  | ---------- | --- | ---------","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37607,"byte_end":37666,"line_start":997,"line_end":997,"column_start":5,"column_end":64}},{"value":"/ `m.succ()`: | `February` | `March`    | `...` | `January`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37671,"byte_end":37732,"line_start":998,"line_end":998,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37737,"byte_end":37746,"line_start":999,"line_end":999,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":38611,"byte_end":38615,"line_start":1023,"line_end":1023,"column_start":12,"column_end":16},"name":"pred","qualname":"<Month>::pred","value":"pub fn pred(&Self) -> Month","parent":null,"children":[],"decl_id":null,"docs":" The previous month.","sig":null,"attributes":[{"value":"/ The previous month.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":38356,"byte_end":38379,"line_start":1017,"line_end":1017,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":38384,"byte_end":38387,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ `m`:        | `January`  | `February` | `...` | `December`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":38392,"byte_end":38454,"line_start":1019,"line_end":1019,"column_start":5,"column_end":67}},{"value":"/ ----------- | ---------  | ---------- | --- | ---------","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":38459,"byte_end":38518,"line_start":1020,"line_end":1020,"column_start":5,"column_end":64}},{"value":"/ `m.succ()`: | `December` | `January`  | `...` | `November`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":38523,"byte_end":38585,"line_start":1021,"line_end":1021,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":38590,"byte_end":38599,"line_start":1022,"line_end":1022,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1299},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":39526,"byte_end":39543,"line_start":1046,"line_end":1046,"column_start":12,"column_end":29},"name":"number_from_month","qualname":"<Month>::number_from_month","value":"pub fn number_from_month(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a month-of-year number starting from January = 1.","sig":null,"attributes":[{"value":"/ Returns a month-of-year number starting from January = 1.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":39209,"byte_end":39270,"line_start":1040,"line_end":1040,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":39275,"byte_end":39278,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ `m`:                     | `January` | `February` | `...` | `December`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":39283,"byte_end":39357,"line_start":1042,"line_end":1042,"column_start":5,"column_end":79}},{"value":"/ -------------------------| --------- | ---------- | --- | -----","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":39362,"byte_end":39429,"line_start":1043,"line_end":1043,"column_start":5,"column_end":72}},{"value":"/ `m.number_from_month()`: | 1         | 2          | `...` | 12","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":39434,"byte_end":39500,"line_start":1044,"line_end":1044,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":39505,"byte_end":39514,"line_start":1045,"line_end":1045,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1300},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":40153,"byte_end":40157,"line_start":1070,"line_end":1070,"column_start":12,"column_end":16},"name":"name","qualname":"<Month>::name","value":"pub fn name(&Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the month","sig":null,"attributes":[{"value":"/ Get the name of the month","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":39992,"byte_end":40021,"line_start":1063,"line_end":1063,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":40026,"byte_end":40029,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":40034,"byte_end":40041,"line_start":1065,"line_end":1065,"column_start":5,"column_end":12}},{"value":"/ use chrono::Month;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":40046,"byte_end":40068,"line_start":1066,"line_end":1066,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":40073,"byte_end":40076,"line_start":1067,"line_end":1067,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Month::January.name(), \"January\")","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":40081,"byte_end":40129,"line_start":1068,"line_end":1068,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":40134,"byte_end":40141,"line_start":1069,"line_end":1069,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2072},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":42008,"byte_end":42023,"line_start":1127,"line_end":1127,"column_start":12,"column_end":27},"name":"ParseMonthError","qualname":"::ParseMonthError","value":"ParseMonthError {  }","parent":null,"children":[{"krate":0,"index":2073}],"decl_id":null,"docs":" An error resulting from reading `<Month>` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `<Month>` value with `FromStr`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":41901,"byte_end":41968,"line_start":1125,"line_end":1125,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":1307},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45158,"byte_end":45166,"line_start":1245,"line_end":1245,"column_start":11,"column_end":19},"name":"Datelike","qualname":"::Datelike","value":"Datelike: Sized","parent":null,"children":[{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1314},{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325}],"decl_id":null,"docs":" The common set of methods for date component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for date component.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45098,"byte_end":45147,"line_start":1244,"line_end":1244,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45284,"byte_end":45288,"line_start":1247,"line_end":1247,"column_start":8,"column_end":12},"name":"year","qualname":"::Datelike::year","value":"pub fn year(&Self) -> i32","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).\n","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45180,"byte_end":45276,"line_start":1246,"line_end":1246,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45497,"byte_end":45504,"line_start":1252,"line_end":1252,"column_start":8,"column_end":15},"name":"year_ce","qualname":"::Datelike::year_ce","value":"pub fn year_ce(&Self) -> (bool, u32)","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Returns the absolute year number starting from 1 with a boolean flag,\n which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).\n","sig":null,"attributes":[{"value":"/ Returns the absolute year number starting from 1 with a boolean flag,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45309,"byte_end":45382,"line_start":1249,"line_end":1249,"column_start":5,"column_end":78}},{"value":"/ which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45387,"byte_end":45475,"line_start":1250,"line_end":1250,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45480,"byte_end":45489,"line_start":1251,"line_end":1251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45799,"byte_end":45804,"line_start":1264,"line_end":1264,"column_start":8,"column_end":13},"name":"month","qualname":"::Datelike::month","value":"pub fn month(&Self) -> u32","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45692,"byte_end":45737,"line_start":1261,"line_end":1261,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45742,"byte_end":45745,"line_start":1262,"line_end":1262,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45750,"byte_end":45791,"line_start":1263,"line_end":1263,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45932,"byte_end":45938,"line_start":1269,"line_end":1269,"column_start":8,"column_end":14},"name":"month0","qualname":"::Datelike::month0","value":"pub fn month0(&Self) -> u32","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45825,"byte_end":45870,"line_start":1266,"line_end":1266,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45875,"byte_end":45878,"line_start":1267,"line_end":1267,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45883,"byte_end":45924,"line_start":1268,"line_end":1268,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46109,"byte_end":46112,"line_start":1274,"line_end":1274,"column_start":8,"column_end":11},"name":"day","qualname":"::Datelike::day","value":"pub fn day(&Self) -> u32","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45959,"byte_end":46004,"line_start":1271,"line_end":1271,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46009,"byte_end":46012,"line_start":1272,"line_end":1272,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46017,"byte_end":46101,"line_start":1273,"line_end":1273,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1313},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46283,"byte_end":46287,"line_start":1279,"line_end":1279,"column_start":8,"column_end":12},"name":"day0","qualname":"::Datelike::day0","value":"pub fn day0(&Self) -> u32","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46133,"byte_end":46178,"line_start":1276,"line_end":1276,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46183,"byte_end":46186,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46191,"byte_end":46275,"line_start":1278,"line_end":1278,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1314},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46456,"byte_end":46463,"line_start":1284,"line_end":1284,"column_start":8,"column_end":15},"name":"ordinal","qualname":"::Datelike::ordinal","value":"pub fn ordinal(&Self) -> u32","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46308,"byte_end":46352,"line_start":1281,"line_end":1281,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46357,"byte_end":46360,"line_start":1282,"line_end":1282,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46365,"byte_end":46448,"line_start":1283,"line_end":1283,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1315},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46632,"byte_end":46640,"line_start":1289,"line_end":1289,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"::Datelike::ordinal0","value":"pub fn ordinal0(&Self) -> u32","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46484,"byte_end":46528,"line_start":1286,"line_end":1286,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46533,"byte_end":46536,"line_start":1287,"line_end":1287,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46541,"byte_end":46624,"line_start":1288,"line_end":1288,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46697,"byte_end":46704,"line_start":1292,"line_end":1292,"column_start":8,"column_end":15},"name":"weekday","qualname":"::Datelike::weekday","value":"pub fn weekday(&Self) -> Weekday","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Returns the day of week.\n","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46661,"byte_end":46689,"line_start":1291,"line_end":1291,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1317},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46762,"byte_end":46770,"line_start":1295,"line_end":1295,"column_start":8,"column_end":16},"name":"iso_week","qualname":"::Datelike::iso_week","value":"pub fn iso_week(&Self) -> IsoWeek","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Returns the ISO week.\n","sig":null,"attributes":[{"value":"/ Returns the ISO week.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46729,"byte_end":46754,"line_start":1294,"line_end":1294,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46928,"byte_end":46937,"line_start":1300,"line_end":1300,"column_start":8,"column_end":17},"name":"with_year","qualname":"::Datelike::with_year","value":"pub fn with_year(&Self, i32) -> Option<Self>","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Makes a new value with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the year number changed.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46795,"byte_end":46846,"line_start":1297,"line_end":1297,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46851,"byte_end":46854,"line_start":1298,"line_end":1298,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46859,"byte_end":46920,"line_start":1299,"line_end":1299,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47130,"byte_end":47140,"line_start":1305,"line_end":1305,"column_start":8,"column_end":18},"name":"with_month","qualname":"::Datelike::with_month","value":"pub fn with_month(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 1) changed.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":46978,"byte_end":47048,"line_start":1302,"line_end":1302,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47053,"byte_end":47056,"line_start":1303,"line_end":1303,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47061,"byte_end":47122,"line_start":1304,"line_end":1304,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47334,"byte_end":47345,"line_start":1310,"line_end":1310,"column_start":8,"column_end":19},"name":"with_month0","qualname":"::Datelike::with_month0","value":"pub fn with_month0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 0) changed.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47182,"byte_end":47252,"line_start":1307,"line_end":1307,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47257,"byte_end":47260,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47265,"byte_end":47326,"line_start":1309,"line_end":1309,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47540,"byte_end":47548,"line_start":1315,"line_end":1315,"column_start":8,"column_end":16},"name":"with_day","qualname":"::Datelike::with_day","value":"pub fn with_day(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 1) changed.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47388,"byte_end":47458,"line_start":1312,"line_end":1312,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47463,"byte_end":47466,"line_start":1313,"line_end":1313,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47471,"byte_end":47532,"line_start":1314,"line_end":1314,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47740,"byte_end":47749,"line_start":1320,"line_end":1320,"column_start":8,"column_end":17},"name":"with_day0","qualname":"::Datelike::with_day0","value":"pub fn with_day0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 0) changed.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47588,"byte_end":47658,"line_start":1317,"line_end":1317,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47663,"byte_end":47666,"line_start":1318,"line_end":1318,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47671,"byte_end":47732,"line_start":1319,"line_end":1319,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47941,"byte_end":47953,"line_start":1325,"line_end":1325,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"::Datelike::with_ordinal","value":"pub fn with_ordinal(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 1) changed.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47790,"byte_end":47859,"line_start":1322,"line_end":1322,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47864,"byte_end":47867,"line_start":1323,"line_end":1323,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47872,"byte_end":47933,"line_start":1324,"line_end":1324,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":48148,"byte_end":48161,"line_start":1330,"line_end":1330,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"::Datelike::with_ordinal0","value":"pub fn with_ordinal0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 0) changed.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":47997,"byte_end":48066,"line_start":1327,"line_end":1327,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":48071,"byte_end":48074,"line_start":1328,"line_end":1328,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":48079,"byte_end":48140,"line_start":1329,"line_end":1329,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1325},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":48720,"byte_end":48736,"line_start":1344,"line_end":1344,"column_start":8,"column_end":24},"name":"num_days_from_ce","qualname":"::Datelike::num_days_from_ce","value":"pub fn num_days_from_ce(&Self) -> i32","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","sig":null,"attributes":[{"value":"/ Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":48206,"byte_end":48300,"line_start":1332,"line_end":1332,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":48305,"byte_end":48308,"line_start":1333,"line_end":1333,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":48313,"byte_end":48327,"line_start":1334,"line_end":1334,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":48332,"byte_end":48335,"line_start":1335,"line_end":1335,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":48340,"byte_end":48347,"line_start":1336,"line_end":1336,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":48352,"byte_end":48390,"line_start":1337,"line_end":1337,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":48395,"byte_end":48398,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1970, 1, 1).num_days_from_ce(), 719_163);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":48403,"byte_end":48479,"line_start":1339,"line_end":1339,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2, 1, 1).num_days_from_ce(), 366);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":48484,"byte_end":48553,"line_start":1340,"line_end":1340,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1, 1, 1).num_days_from_ce(), 1);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":48558,"byte_end":48625,"line_start":1341,"line_end":1341,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(NaiveDate::from_ymd(0, 1, 1).num_days_from_ce(), -365);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":48630,"byte_end":48700,"line_start":1342,"line_end":1342,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":48705,"byte_end":48712,"line_start":1343,"line_end":1343,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1326},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":49394,"byte_end":49402,"line_start":1363,"line_end":1363,"column_start":11,"column_end":19},"name":"Timelike","qualname":"::Timelike","value":"Timelike: Sized","parent":null,"children":[{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336}],"decl_id":null,"docs":" The common set of methods for time component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for time component.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":49334,"byte_end":49383,"line_start":1362,"line_end":1362,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1327},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":49465,"byte_end":49469,"line_start":1365,"line_end":1365,"column_start":8,"column_end":12},"name":"hour","qualname":"::Timelike::hour","value":"pub fn hour(&Self) -> u32","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Returns the hour number from 0 to 23.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":49416,"byte_end":49457,"line_start":1364,"line_end":1364,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":49620,"byte_end":49626,"line_start":1370,"line_end":1370,"column_start":8,"column_end":14},"name":"hour12","qualname":"::Timelike::hour12","value":"pub fn hour12(&Self) -> (bool, u32)","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Returns the hour number from 1 to 12 with a boolean flag,\n which is false for AM and true for PM.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 1 to 12 with a boolean flag,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":49490,"byte_end":49551,"line_start":1367,"line_end":1367,"column_start":5,"column_end":66}},{"value":"/ which is false for AM and true for PM.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":49556,"byte_end":49598,"line_start":1368,"line_end":1368,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":49603,"byte_end":49612,"line_start":1369,"line_end":1369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1329},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":49870,"byte_end":49876,"line_start":1380,"line_end":1380,"column_start":8,"column_end":14},"name":"minute","qualname":"::Timelike::minute","value":"pub fn minute(&Self) -> u32","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Returns the minute number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":49819,"byte_end":49862,"line_start":1379,"line_end":1379,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1330},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":49948,"byte_end":49954,"line_start":1383,"line_end":1383,"column_start":8,"column_end":14},"name":"second","qualname":"::Timelike::second","value":"pub fn second(&Self) -> u32","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Returns the second number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":49897,"byte_end":49940,"line_start":1382,"line_end":1382,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1331},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50197,"byte_end":50207,"line_start":1388,"line_end":1388,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"::Timelike::nanosecond","value":"pub fn nanosecond(&Self) -> u32","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).\n","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":49975,"byte_end":50045,"line_start":1385,"line_end":1385,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50050,"byte_end":50110,"line_start":1386,"line_end":1386,"column_start":5,"column_end":65}},{"value":"/ the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50115,"byte_end":50189,"line_start":1387,"line_end":1387,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50361,"byte_end":50370,"line_start":1393,"line_end":1393,"column_start":8,"column_end":17},"name":"with_hour","qualname":"::Timelike::with_hour","value":"pub fn with_hour(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Makes a new value with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the hour number changed.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50228,"byte_end":50279,"line_start":1390,"line_end":1390,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50284,"byte_end":50287,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50292,"byte_end":50353,"line_start":1392,"line_end":1392,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1333},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50546,"byte_end":50557,"line_start":1398,"line_end":1398,"column_start":8,"column_end":19},"name":"with_minute","qualname":"::Timelike::with_minute","value":"pub fn with_minute(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Makes a new value with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the minute number changed.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50411,"byte_end":50464,"line_start":1395,"line_end":1395,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50469,"byte_end":50472,"line_start":1396,"line_end":1396,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50477,"byte_end":50538,"line_start":1397,"line_end":1397,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50844,"byte_end":50855,"line_start":1405,"line_end":1405,"column_start":8,"column_end":19},"name":"with_second","qualname":"::Timelike::with_second","value":"pub fn with_second(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Makes a new value with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the second number changed.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50597,"byte_end":50650,"line_start":1400,"line_end":1400,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50655,"byte_end":50658,"line_start":1401,"line_end":1401,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50663,"byte_end":50724,"line_start":1402,"line_end":1402,"column_start":5,"column_end":66}},{"value":"/ As with the [`second`](#tymethod.second) method,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50729,"byte_end":50781,"line_start":1403,"line_end":1403,"column_start":5,"column_end":57}},{"value":"/ the input range is restricted to 0 through 59.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50786,"byte_end":50836,"line_start":1404,"line_end":1404,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":51188,"byte_end":51203,"line_start":1412,"line_end":1412,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"::Timelike::with_nanosecond","value":"pub fn with_nanosecond(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Makes a new value with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new value with nanoseconds since the whole non-leap second changed.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50895,"byte_end":50974,"line_start":1407,"line_end":1407,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50979,"byte_end":50982,"line_start":1408,"line_end":1408,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":50987,"byte_end":51048,"line_start":1409,"line_end":1409,"column_start":5,"column_end":66}},{"value":"/ As with the [`nanosecond`](#tymethod.nanosecond) method,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":51053,"byte_end":51113,"line_start":1410,"line_end":1410,"column_start":5,"column_end":65}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":51118,"byte_end":51180,"line_start":1411,"line_end":1411,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":51332,"byte_end":51357,"line_start":1416,"line_end":1416,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"::Timelike::num_seconds_from_midnight","value":"pub fn num_seconds_from_midnight(&Self) -> u32","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds past the last midnight.\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds past the last midnight.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":51244,"byte_end":51310,"line_start":1414,"line_end":1414,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":51315,"byte_end":51324,"line_start":1415,"line_end":1415,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":58162,"byte_end":58170,"line_start":67,"line_end":67,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":66713,"byte_end":66721,"line_start":302,"line_end":302,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":67009,"byte_end":67017,"line_start":315,"line_end":315,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":67361,"byte_end":67369,"line_start":329,"line_end":329,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":67705,"byte_end":67713,"line_start":343,"line_end":343,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":68144,"byte_end":68152,"line_start":355,"line_end":355,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":68729,"byte_end":68737,"line_start":375,"line_end":375,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":70154,"byte_end":70169,"line_start":415,"line_end":415,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":85480,"byte_end":85491,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":86672,"byte_end":86683,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":89893,"byte_end":89904,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105251,"byte_end":105262,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":107819,"byte_end":107830,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":108418,"byte_end":108429,"line_start":123,"line_end":123,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":108510,"byte_end":108521,"line_start":129,"line_end":129,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":109019,"byte_end":109030,"line_start":143,"line_end":143,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":109798,"byte_end":109807,"line_start":164,"line_end":164,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":109995,"byte_end":110004,"line_start":173,"line_end":173,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":110193,"byte_end":110206,"line_start":182,"line_end":182,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":110402,"byte_end":110415,"line_start":191,"line_end":191,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":110626,"byte_end":110634,"line_start":200,"line_end":200,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":110846,"byte_end":110854,"line_start":209,"line_end":209,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":113948,"byte_end":113951,"line_start":62,"line_end":62,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":114471,"byte_end":114474,"line_start":84,"line_end":84,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":114570,"byte_end":114573,"line_start":90,"line_end":90,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":114689,"byte_end":114692,"line_start":96,"line_end":96,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":120487,"byte_end":120496,"line_start":136,"line_end":136,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":158300,"byte_end":158309,"line_start":1102,"line_end":1102,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":170610,"byte_end":170619,"line_start":1468,"line_end":1468,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":170838,"byte_end":170847,"line_start":1477,"line_end":1477,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":172231,"byte_end":172240,"line_start":1509,"line_end":1509,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":172459,"byte_end":172468,"line_start":1518,"line_end":1518,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":173693,"byte_end":173702,"line_start":1551,"line_end":1551,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":174055,"byte_end":174076,"line_start":1566,"line_end":1566,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":174653,"byte_end":174674,"line_start":1586,"line_end":1586,"column_start":28,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":174826,"byte_end":174848,"line_start":1593,"line_end":1593,"column_start":19,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":175363,"byte_end":175385,"line_start":1611,"line_end":1611,"column_start":28,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":176432,"byte_end":176441,"line_start":1639,"line_end":1639,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":177700,"byte_end":177709,"line_start":1674,"line_end":1674,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":178311,"byte_end":178320,"line_start":1696,"line_end":1696,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209631,"byte_end":209644,"line_start":67,"line_end":67,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":235808,"byte_end":235821,"line_start":702,"line_end":702,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":481},{"krate":0,"index":483},{"krate":0,"index":485},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":246877,"byte_end":246890,"line_start":1020,"line_end":1020,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":253086,"byte_end":253099,"line_start":1192,"line_end":1192,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":255650,"byte_end":255663,"line_start":1252,"line_end":1252,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":255894,"byte_end":255907,"line_start":1261,"line_end":1261,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":258354,"byte_end":258367,"line_start":1320,"line_end":1320,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":515},{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":258598,"byte_end":258611,"line_start":1329,"line_end":1329,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":260485,"byte_end":260498,"line_start":1380,"line_end":1380,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":261706,"byte_end":261719,"line_start":1416,"line_end":1416,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":262817,"byte_end":262830,"line_start":1447,"line_end":1447,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":263568,"byte_end":263581,"line_start":1469,"line_end":1469,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/internals.rs","byte_start":307788,"byte_end":307797,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/internals.rs","byte_start":308594,"byte_end":308603,"line_start":148,"line_end":148,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/internals.rs","byte_start":316744,"byte_end":316746,"line_start":270,"line_end":270,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/internals.rs","byte_start":318825,"byte_end":318827,"line_start":359,"line_end":359,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/internals.rs","byte_start":319426,"byte_end":319429,"line_start":380,"line_end":380,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/internals.rs","byte_start":321392,"byte_end":321395,"line_start":469,"line_end":469,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":335618,"byte_end":335625,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":338171,"byte_end":338178,"line_start":130,"line_end":130,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347197,"byte_end":347206,"line_start":187,"line_end":187,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":371596,"byte_end":371605,"line_start":803,"line_end":803,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":378834,"byte_end":378843,"line_start":1016,"line_end":1016,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":381753,"byte_end":381762,"line_start":1078,"line_end":1078,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":381943,"byte_end":381952,"line_start":1087,"line_end":1087,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":384458,"byte_end":384467,"line_start":1145,"line_end":1145,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":688}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":384648,"byte_end":384657,"line_start":1154,"line_end":1154,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":387128,"byte_end":387137,"line_start":1210,"line_end":1210,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":388525,"byte_end":388534,"line_start":1247,"line_end":1247,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":390387,"byte_end":390396,"line_start":1297,"line_end":1297,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":697}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":391168,"byte_end":391177,"line_start":1322,"line_end":1322,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":412460,"byte_end":412464,"line_start":57,"line_end":57,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":765},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":420564,"byte_end":420568,"line_start":277,"line_end":277,"column_start":20,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":422445,"byte_end":422449,"line_start":336,"line_end":336,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":796}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":424284,"byte_end":424288,"line_start":411,"line_end":411,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":424368,"byte_end":424372,"line_start":412,"line_end":412,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":424477,"byte_end":424481,"line_start":414,"line_end":414,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":424601,"byte_end":424605,"line_start":420,"line_end":420,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":424648,"byte_end":424652,"line_start":422,"line_end":422,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":424804,"byte_end":424808,"line_start":428,"line_end":428,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":424943,"byte_end":424947,"line_start":434,"line_end":434,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":425086,"byte_end":425090,"line_start":440,"line_end":440,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":425314,"byte_end":425318,"line_start":449,"line_end":449,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":824},{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":425539,"byte_end":425543,"line_start":458,"line_end":458,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":425728,"byte_end":425732,"line_start":467,"line_end":467,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":832}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":425906,"byte_end":425910,"line_start":473,"line_end":473,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428836,"byte_end":428844,"line_start":80,"line_end":80,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":891},{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":434891,"byte_end":434899,"line_start":257,"line_end":257,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":435823,"byte_end":435831,"line_start":279,"line_end":279,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":437909,"byte_end":437917,"line_start":333,"line_end":333,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":440609,"byte_end":440617,"line_start":393,"line_end":393,"column_start":20,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":446099,"byte_end":446107,"line_start":535,"line_end":535,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":922},{"krate":0,"index":924},{"krate":0,"index":926},{"krate":0,"index":928},{"krate":0,"index":930},{"krate":0,"index":932}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":447964,"byte_end":447972,"line_start":609,"line_end":609,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":942},{"krate":0,"index":944},{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":449012,"byte_end":449020,"line_start":649,"line_end":649,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":449100,"byte_end":449108,"line_start":650,"line_end":650,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":449217,"byte_end":449225,"line_start":652,"line_end":652,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":449357,"byte_end":449365,"line_start":658,"line_end":658,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":449438,"byte_end":449446,"line_start":660,"line_end":660,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":450185,"byte_end":450193,"line_start":681,"line_end":681,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":450340,"byte_end":450348,"line_start":687,"line_end":687,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":967}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":450491,"byte_end":450499,"line_start":693,"line_end":693,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":971},{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":450735,"byte_end":450743,"line_start":702,"line_end":702,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":975},{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":450980,"byte_end":450988,"line_start":711,"line_end":711,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":979},{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":451177,"byte_end":451185,"line_start":720,"line_end":720,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":451359,"byte_end":451367,"line_start":726,"line_end":726,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":451560,"byte_end":451568,"line_start":735,"line_end":735,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":988},{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523337,"byte_end":523352,"line_start":141,"line_end":141,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523442,"byte_end":523457,"line_start":147,"line_end":147,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523563,"byte_end":523578,"line_start":153,"line_end":153,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523603,"byte_end":523618,"line_start":155,"line_end":155,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1010}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":530907,"byte_end":530917,"line_start":358,"line_end":358,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1021}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":557719,"byte_end":557725,"line_start":129,"line_end":129,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1055}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":558401,"byte_end":558407,"line_start":157,"line_end":157,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":627312,"byte_end":627320,"line_start":458,"line_end":458,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1163},{"krate":0,"index":1164}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/strftime.rs","byte_start":675577,"byte_end":675590,"line_start":217,"line_end":217,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1228},{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/strftime.rs","byte_start":677085,"byte_end":677098,"line_start":266,"line_end":266,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1235},{"krate":0,"index":1236}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":550318,"byte_end":550325,"line_start":840,"line_end":840,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1245},{"krate":0,"index":1246}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":552283,"byte_end":552288,"line_start":914,"line_end":914,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1248},{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":695710,"byte_end":695711,"line_start":48,"line_end":48,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1266},{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":699092,"byte_end":699100,"line_start":149,"line_end":149,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1276},{"krate":0,"index":1277},{"krate":0,"index":1278}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":702562,"byte_end":702575,"line_start":244,"line_end":244,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1280}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27404,"byte_end":27411,"line_start":663,"line_end":663,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1284},{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":31402,"byte_end":31409,"line_start":773,"line_end":773,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1289}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":32057,"byte_end":32064,"line_start":790,"line_end":790,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1291},{"krate":0,"index":1292}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":33003,"byte_end":33020,"line_start":828,"line_end":828,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1295}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37496,"byte_end":37501,"line_start":993,"line_end":993,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1300}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":40731,"byte_end":40736,"line_start":1088,"line_end":1088,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":42065,"byte_end":42080,"line_start":1131,"line_end":1131,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1306}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":23609,"byte_end":23615,"line_start":540,"line_end":540,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":135}},{"kind":"Mod","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":24931,"byte_end":24937,"line_start":581,"line_end":581,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":991}},{"kind":"Mod","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":546278,"byte_end":546286,"line_start":713,"line_end":713,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1213}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":58162,"byte_end":58170,"line_start":67,"line_end":67,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1339},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":66713,"byte_end":66721,"line_start":302,"line_end":302,"column_start":14,"column_end":22},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1339},"to":{"krate":1,"index":2173}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":67009,"byte_end":67017,"line_start":315,"line_end":315,"column_start":14,"column_end":22},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1339},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":67361,"byte_end":67369,"line_start":329,"line_end":329,"column_start":14,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1339},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":67705,"byte_end":67713,"line_start":343,"line_end":343,"column_start":19,"column_end":27},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1339},"to":{"krate":1,"index":2156}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":68144,"byte_end":68152,"line_start":355,"line_end":355,"column_start":19,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1339},"to":{"krate":1,"index":2161}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":68729,"byte_end":68737,"line_start":375,"line_end":375,"column_start":23,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1339},"to":{"krate":1,"index":6965}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/oldtime.rs","byte_start":70154,"byte_end":70169,"line_start":415,"line_end":415,"column_start":23,"column_end":38},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1366},"to":{"krate":1,"index":6965}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":85480,"byte_end":85491,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1381},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":86672,"byte_end":86683,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1381},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":89893,"byte_end":89904,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1381},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90366,"byte_end":90371,"line_start":183,"line_end":183,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":168}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90374,"byte_end":90379,"line_start":183,"line_end":183,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":1770},"to":{"krate":0,"index":168}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90387,"byte_end":90392,"line_start":183,"line_end":183,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":1,"index":6960},"to":{"krate":0,"index":168}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90682,"byte_end":90687,"line_start":192,"line_end":192,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":170}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/mod.rs","byte_start":90690,"byte_end":90695,"line_start":192,"line_end":192,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1770},"to":{"krate":0,"index":170}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":105251,"byte_end":105262,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1415},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":107819,"byte_end":107830,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1415},"to":{"krate":0,"index":170}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":108418,"byte_end":108429,"line_start":123,"line_end":123,"column_start":17,"column_end":28},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1415},"to":{"krate":0,"index":168}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":108510,"byte_end":108521,"line_start":129,"line_end":129,"column_start":21,"column_end":32},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1415},"to":{"krate":1,"index":6960}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":109019,"byte_end":109030,"line_start":143,"line_end":143,"column_start":23,"column_end":34},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1415},"to":{"krate":1,"index":6965}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":109798,"byte_end":109807,"line_start":164,"line_end":164,"column_start":27,"column_end":36},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1604},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":109995,"byte_end":110004,"line_start":173,"line_end":173,"column_start":27,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1604},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":110193,"byte_end":110206,"line_start":182,"line_end":182,"column_start":27,"column_end":40},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1514},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":110402,"byte_end":110415,"line_start":191,"line_end":191,"column_start":27,"column_end":40},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1514},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":110626,"byte_end":110634,"line_start":200,"line_end":200,"column_start":41,"column_end":49},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/fixed.rs","byte_start":110846,"byte_end":110854,"line_start":209,"line_end":209,"column_start":41,"column_end":49},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":113948,"byte_end":113951,"line_start":62,"line_end":62,"column_start":19,"column_end":22},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1430},"to":{"krate":0,"index":170}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":114471,"byte_end":114474,"line_start":84,"line_end":84,"column_start":17,"column_end":20},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1430},"to":{"krate":0,"index":168}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":114570,"byte_end":114573,"line_start":90,"line_end":90,"column_start":21,"column_end":24},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1430},"to":{"krate":1,"index":6960}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/offset/utc.rs","byte_start":114689,"byte_end":114692,"line_start":96,"line_end":96,"column_start":23,"column_end":26},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1430},"to":{"krate":1,"index":6965}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":120487,"byte_end":120496,"line_start":136,"line_end":136,"column_start":6,"column_end":15},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1441},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":158300,"byte_end":158309,"line_start":1102,"line_end":1102,"column_start":19,"column_end":28},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1441},"to":{"krate":0,"index":1307}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":170610,"byte_end":170619,"line_start":1468,"line_end":1468,"column_start":27,"column_end":36},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1441},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":170838,"byte_end":170847,"line_start":1477,"line_end":1477,"column_start":33,"column_end":42},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1441},"to":{"krate":1,"index":2177}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":172231,"byte_end":172240,"line_start":1509,"line_end":1509,"column_start":27,"column_end":36},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1441},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":172459,"byte_end":172468,"line_start":1518,"line_end":1518,"column_start":33,"column_end":42},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1441},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":173693,"byte_end":173702,"line_start":1551,"line_end":1551,"column_start":25,"column_end":34},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1441},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":174055,"byte_end":174076,"line_start":1566,"line_end":1566,"column_start":19,"column_end":40},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1464},"to":{"krate":1,"index":5632}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":174653,"byte_end":174674,"line_start":1586,"line_end":1586,"column_start":28,"column_end":49},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1464},"to":{"krate":1,"index":5584}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":174826,"byte_end":174848,"line_start":1593,"line_end":1593,"column_start":19,"column_end":41},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1489},"to":{"krate":1,"index":5632}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":175363,"byte_end":175385,"line_start":1611,"line_end":1611,"column_start":28,"column_end":50},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1489},"to":{"krate":1,"index":5584}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":176432,"byte_end":176441,"line_start":1639,"line_end":1639,"column_start":21,"column_end":30},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1441},"to":{"krate":1,"index":6960}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":177700,"byte_end":177709,"line_start":1674,"line_end":1674,"column_start":23,"column_end":32},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1441},"to":{"krate":1,"index":6965}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/date.rs","byte_start":178311,"byte_end":178320,"line_start":1696,"line_end":1696,"column_start":23,"column_end":32},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1441},"to":{"krate":1,"index":9028}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":209631,"byte_end":209644,"line_start":67,"line_end":67,"column_start":6,"column_end":19},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1514},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":235808,"byte_end":235821,"line_start":702,"line_end":702,"column_start":19,"column_end":32},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1514},"to":{"krate":0,"index":1307}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":246877,"byte_end":246890,"line_start":1020,"line_end":1020,"column_start":19,"column_end":32},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1514},"to":{"krate":0,"index":1326}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":253086,"byte_end":253099,"line_start":1192,"line_end":1192,"column_start":21,"column_end":34},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1514},"to":{"krate":1,"index":7148}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":255650,"byte_end":255663,"line_start":1252,"line_end":1252,"column_start":27,"column_end":40},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1514},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":255894,"byte_end":255907,"line_start":1261,"line_end":1261,"column_start":33,"column_end":46},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1514},"to":{"krate":1,"index":2177}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":258354,"byte_end":258367,"line_start":1320,"line_end":1320,"column_start":27,"column_end":40},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1514},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":258598,"byte_end":258611,"line_start":1329,"line_end":1329,"column_start":33,"column_end":46},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1514},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":260485,"byte_end":260498,"line_start":1380,"line_end":1380,"column_start":29,"column_end":42},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1514},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":261706,"byte_end":261719,"line_start":1416,"line_end":1416,"column_start":21,"column_end":34},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1514},"to":{"krate":1,"index":6960}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":262817,"byte_end":262830,"line_start":1447,"line_end":1447,"column_start":23,"column_end":36},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1514},"to":{"krate":1,"index":6965}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/datetime.rs","byte_start":263568,"byte_end":263581,"line_start":1469,"line_end":1469,"column_start":23,"column_end":36},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1514},"to":{"krate":1,"index":9028}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/internals.rs","byte_start":307788,"byte_end":307797,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1539},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/internals.rs","byte_start":308594,"byte_end":308603,"line_start":148,"line_end":148,"column_start":21,"column_end":30},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1539},"to":{"krate":1,"index":6960}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/internals.rs","byte_start":316744,"byte_end":316746,"line_start":270,"line_end":270,"column_start":6,"column_end":8},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/internals.rs","byte_start":318825,"byte_end":318827,"line_start":359,"line_end":359,"column_start":21,"column_end":23},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1552},"to":{"krate":1,"index":6960}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/internals.rs","byte_start":319426,"byte_end":319429,"line_start":380,"line_end":380,"column_start":6,"column_end":9},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/internals.rs","byte_start":321392,"byte_end":321395,"line_start":469,"line_end":469,"column_start":21,"column_end":24},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1568},"to":{"krate":1,"index":6960}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":335618,"byte_end":335625,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1584},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/isoweek.rs","byte_start":338171,"byte_end":338178,"line_start":130,"line_end":130,"column_start":21,"column_end":28},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1584},"to":{"krate":1,"index":6960}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":347197,"byte_end":347206,"line_start":187,"line_end":187,"column_start":6,"column_end":15},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":371596,"byte_end":371605,"line_start":803,"line_end":803,"column_start":19,"column_end":28},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1604},"to":{"krate":0,"index":1326}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":378834,"byte_end":378843,"line_start":1016,"line_end":1016,"column_start":21,"column_end":30},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1604},"to":{"krate":1,"index":7148}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":381753,"byte_end":381762,"line_start":1078,"line_end":1078,"column_start":27,"column_end":36},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1604},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":381943,"byte_end":381952,"line_start":1087,"line_end":1087,"column_start":33,"column_end":42},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1604},"to":{"krate":1,"index":2177}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":384458,"byte_end":384467,"line_start":1145,"line_end":1145,"column_start":27,"column_end":36},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1604},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":384648,"byte_end":384657,"line_start":1154,"line_end":1154,"column_start":33,"column_end":42},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1604},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":387128,"byte_end":387137,"line_start":1210,"line_end":1210,"column_start":25,"column_end":34},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1604},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":388525,"byte_end":388534,"line_start":1247,"line_end":1247,"column_start":21,"column_end":30},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1604},"to":{"krate":1,"index":6960}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":390387,"byte_end":390396,"line_start":1297,"line_end":1297,"column_start":23,"column_end":32},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1604},"to":{"krate":1,"index":6965}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/naive/time.rs","byte_start":391168,"byte_end":391177,"line_start":1322,"line_end":1322,"column_start":23,"column_end":32},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1604},"to":{"krate":1,"index":9028}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":412460,"byte_end":412464,"line_start":57,"line_end":57,"column_start":20,"column_end":24},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":420564,"byte_end":420568,"line_start":277,"line_end":277,"column_start":20,"column_end":24},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":422445,"byte_end":422449,"line_start":336,"line_end":336,"column_start":33,"column_end":37},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1629},"to":{"krate":0,"index":1307}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":424284,"byte_end":424288,"line_start":411,"line_end":411,"column_start":29,"column_end":33},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1629},"to":{"krate":1,"index":2091}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":424368,"byte_end":424372,"line_start":412,"line_end":412,"column_start":36,"column_end":40},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1629},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":424477,"byte_end":424481,"line_start":414,"line_end":414,"column_start":60,"column_end":64},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1629},"to":{"krate":1,"index":1798}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":424601,"byte_end":424605,"line_start":420,"line_end":420,"column_start":27,"column_end":31},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1629},"to":{"krate":1,"index":1803}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":424648,"byte_end":424652,"line_start":422,"line_end":422,"column_start":35,"column_end":39},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1629},"to":{"krate":1,"index":1841}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":424804,"byte_end":424808,"line_start":428,"line_end":428,"column_start":28,"column_end":32},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1629},"to":{"krate":1,"index":1830}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":424943,"byte_end":424947,"line_start":434,"line_end":434,"column_start":35,"column_end":39},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1629},"to":{"krate":1,"index":7148}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":425086,"byte_end":425090,"line_start":440,"line_end":440,"column_start":41,"column_end":45},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1629},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":425314,"byte_end":425318,"line_start":449,"line_end":449,"column_start":41,"column_end":45},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1629},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":425539,"byte_end":425543,"line_start":458,"line_end":458,"column_start":38,"column_end":42},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1629},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":425728,"byte_end":425732,"line_start":467,"line_end":467,"column_start":35,"column_end":39},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1629},"to":{"krate":1,"index":6960}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/date.rs","byte_start":425906,"byte_end":425910,"line_start":473,"line_end":473,"column_start":37,"column_end":41},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1629},"to":{"krate":1,"index":6965}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":428836,"byte_end":428844,"line_start":80,"line_end":80,"column_start":20,"column_end":28},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1660},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":434891,"byte_end":434899,"line_start":257,"line_end":257,"column_start":30,"column_end":38},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":435823,"byte_end":435831,"line_start":279,"line_end":279,"column_start":38,"column_end":46},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":437909,"byte_end":437917,"line_start":333,"line_end":333,"column_start":6,"column_end":14},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1660},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":440609,"byte_end":440617,"line_start":393,"line_end":393,"column_start":20,"column_end":28},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1660},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":446099,"byte_end":446107,"line_start":535,"line_end":535,"column_start":33,"column_end":41},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1660},"to":{"krate":0,"index":1307}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":447964,"byte_end":447972,"line_start":609,"line_end":609,"column_start":33,"column_end":41},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1660},"to":{"krate":0,"index":1326}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":449012,"byte_end":449020,"line_start":649,"line_end":649,"column_start":29,"column_end":37},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":2091}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":449100,"byte_end":449108,"line_start":650,"line_end":650,"column_start":36,"column_end":44},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":449217,"byte_end":449225,"line_start":652,"line_end":652,"column_start":64,"column_end":72},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":1798}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":449357,"byte_end":449365,"line_start":658,"line_end":658,"column_start":27,"column_end":35},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":1803}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":449438,"byte_end":449446,"line_start":660,"line_end":660,"column_start":65,"column_end":73},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":1841}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":450185,"byte_end":450193,"line_start":681,"line_end":681,"column_start":28,"column_end":36},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":1830}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":450340,"byte_end":450348,"line_start":687,"line_end":687,"column_start":35,"column_end":43},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":7148}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":450491,"byte_end":450499,"line_start":693,"line_end":693,"column_start":41,"column_end":49},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":450735,"byte_end":450743,"line_start":702,"line_end":702,"column_start":41,"column_end":49},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":450980,"byte_end":450988,"line_start":711,"line_end":711,"column_start":42,"column_end":50},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":451177,"byte_end":451185,"line_start":720,"line_end":720,"column_start":35,"column_end":43},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":6960}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":451359,"byte_end":451367,"line_start":726,"line_end":726,"column_start":37,"column_end":45},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":6965}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/datetime.rs","byte_start":451560,"byte_end":451568,"line_start":735,"line_end":735,"column_start":23,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":9028}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523337,"byte_end":523352,"line_start":141,"line_end":141,"column_start":16,"column_end":31},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1002},"to":{"krate":1,"index":1770}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523442,"byte_end":523457,"line_start":147,"line_end":147,"column_start":20,"column_end":35},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1002},"to":{"krate":1,"index":1798}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523563,"byte_end":523578,"line_start":153,"line_end":153,"column_start":13,"column_end":28},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1002},"to":{"krate":1,"index":1803}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":523603,"byte_end":523618,"line_start":155,"line_end":155,"column_start":21,"column_end":36},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1002},"to":{"krate":1,"index":6960}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":530907,"byte_end":530917,"line_start":358,"line_end":358,"column_start":23,"column_end":33},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1868},"to":{"krate":1,"index":6965}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":557719,"byte_end":557725,"line_start":129,"line_end":129,"column_start":18,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1909},"to":{"krate":1,"index":2069}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parsed.rs","byte_start":558401,"byte_end":558407,"line_start":157,"line_end":157,"column_start":6,"column_end":12},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1909},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/parse.rs","byte_start":627312,"byte_end":627320,"line_start":458,"line_end":458,"column_start":23,"column_end":31},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1660},"to":{"krate":1,"index":9028}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/strftime.rs","byte_start":675577,"byte_end":675590,"line_start":217,"line_end":217,"column_start":10,"column_end":23},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1940},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/strftime.rs","byte_start":677085,"byte_end":677098,"line_start":266,"line_end":266,"column_start":23,"column_end":36},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1940},"to":{"krate":1,"index":5632}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":550318,"byte_end":550325,"line_start":840,"line_end":840,"column_start":18,"column_end":25},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1977},"to":{"krate":1,"index":9028}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/format/mod.rs","byte_start":552283,"byte_end":552288,"line_start":914,"line_end":914,"column_start":18,"column_end":23},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2021},"to":{"krate":1,"index":9028}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":695710,"byte_end":695711,"line_start":48,"line_end":48,"column_start":25,"column_end":26},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1265},"to":{"krate":0,"index":1261}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":697408,"byte_end":697413,"line_start":102,"line_end":102,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":1269}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":699092,"byte_end":699100,"line_start":149,"line_end":149,"column_start":38,"column_end":46},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1660},"to":{"krate":0,"index":1269}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/round.rs","byte_start":702562,"byte_end":702575,"line_start":244,"line_end":244,"column_start":23,"column_end":36},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1959},"to":{"krate":1,"index":6965}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":27404,"byte_end":27411,"line_start":663,"line_end":663,"column_start":6,"column_end":13},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":31402,"byte_end":31409,"line_start":773,"line_end":773,"column_start":23,"column_end":30},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1977},"to":{"krate":1,"index":6965}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":32057,"byte_end":32064,"line_start":790,"line_end":790,"column_start":36,"column_end":43},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1977},"to":{"krate":5,"index":148}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":33003,"byte_end":33020,"line_start":828,"line_end":828,"column_start":21,"column_end":38},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2013},"to":{"krate":1,"index":6960}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":37496,"byte_end":37501,"line_start":993,"line_end":993,"column_start":6,"column_end":11},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2021},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":40731,"byte_end":40736,"line_start":1088,"line_end":1088,"column_start":36,"column_end":41},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2021},"to":{"krate":5,"index":148}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":42065,"byte_end":42080,"line_start":1131,"line_end":1131,"column_start":21,"column_end":36},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2072},"to":{"krate":1,"index":6960}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":45168,"byte_end":45173,"line_start":1245,"line_end":1245,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":1307}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.19/src/lib.rs","byte_start":49404,"byte_end":49409,"line_start":1363,"line_end":1363,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":1326}}]}