{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8","program":"/home/mcrae/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","usb_device","--edition=2018","/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=4104b7bd672ccbc8","-C","extra-filename=-4104b7bd672ccbc8","--out-dir","/home/mcrae/Code/hermes/target/rls/thumbv7em-none-eabihf/debug/deps","--target","thumbv7em-none-eabihf","-L","dependency=/home/mcrae/Code/hermes/target/rls/thumbv7em-none-eabihf/debug/deps","-L","dependency=/home/mcrae/Code/hermes/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/mcrae/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/mcrae/Code/hermes/target/rls/thumbv7em-none-eabihf/debug/deps/libusb_device-4104b7bd672ccbc8.rmeta"},"prelude":{"crate_id":{"name":"usb_device","disambiguator":[9987430504416234792,6040776924156541190]},"crate_root":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src","external_crates":[{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2184632775997829466,18026496178680965583]}},{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3726307931522043477,4911878782996857177]}},{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[8506066526834043935,2338947288633172727]}}],"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":0,"byte_end":9607,"line_start":1,"line_end":257,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":521},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":42320,"byte_end":42336,"line_start":8,"line_end":8,"column_start":33,"column_end":49},"alias_span":null,"name":"UsbDeviceBuilder","value":"","parent":{"krate":0,"index":230}},{"kind":"Use","ref_id":{"krate":0,"index":517},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":42338,"byte_end":42347,"line_start":8,"line_end":8,"column_start":51,"column_end":60},"alias_span":null,"name":"UsbVidPid","value":"","parent":{"krate":0,"index":230}},{"kind":"Use","ref_id":{"krate":0,"index":518},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":42338,"byte_end":42347,"line_start":8,"line_end":8,"column_start":51,"column_end":60},"alias_span":null,"name":"UsbVidPid","value":"","parent":{"krate":0,"index":255}},{"kind":"Use","ref_id":{"krate":0,"index":597},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7317,"byte_end":7325,"line_start":181,"line_end":181,"column_start":20,"column_end":28},"alias_span":null,"name":"UsbError","value":"","parent":{"krate":0,"index":538}},{"kind":"Use","ref_id":{"krate":0,"index":257},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7355,"byte_end":7364,"line_start":182,"line_end":182,"column_start":29,"column_end":38},"alias_span":null,"name":"UsbDevice","value":"","parent":{"krate":0,"index":538}},{"kind":"Use","ref_id":{"krate":0,"index":521},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7366,"byte_end":7382,"line_start":182,"line_end":182,"column_start":40,"column_end":56},"alias_span":null,"name":"UsbDeviceBuilder","value":"","parent":{"krate":0,"index":538}},{"kind":"Use","ref_id":{"krate":0,"index":770},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7384,"byte_end":7398,"line_start":182,"line_end":182,"column_start":58,"column_end":72},"alias_span":null,"name":"UsbDeviceState","value":"","parent":{"krate":0,"index":538}},{"kind":"Use","ref_id":{"krate":0,"index":517},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7400,"byte_end":7409,"line_start":182,"line_end":182,"column_start":74,"column_end":83},"alias_span":null,"name":"UsbVidPid","value":"","parent":{"krate":0,"index":538}},{"kind":"Use","ref_id":{"krate":0,"index":518},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7400,"byte_end":7409,"line_start":182,"line_end":182,"column_start":74,"column_end":83},"alias_span":null,"name":"UsbVidPid","value":"","parent":{"krate":0,"index":544}},{"kind":"Use","ref_id":{"krate":0,"index":597},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7494,"byte_end":7502,"line_start":187,"line_end":187,"column_start":20,"column_end":28},"alias_span":null,"name":"UsbError","value":"","parent":{"krate":0,"index":545}},{"kind":"Use","ref_id":{"krate":0,"index":46},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7529,"byte_end":7535,"line_start":188,"line_end":188,"column_start":26,"column_end":32},"alias_span":null,"name":"UsbBus","value":"","parent":{"krate":0,"index":545}},{"kind":"Use","ref_id":{"krate":0,"index":63},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7537,"byte_end":7552,"line_start":188,"line_end":188,"column_start":34,"column_end":49},"alias_span":null,"name":"UsbBusAllocator","value":"","parent":{"krate":0,"index":545}},{"kind":"Use","ref_id":{"krate":0,"index":705},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7554,"byte_end":7569,"line_start":188,"line_end":188,"column_start":51,"column_end":66},"alias_span":null,"name":"InterfaceNumber","value":"","parent":{"krate":0,"index":545}},{"kind":"Use","ref_id":{"krate":0,"index":718},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7571,"byte_end":7582,"line_start":188,"line_end":188,"column_start":68,"column_end":79},"alias_span":null,"name":"StringIndex","value":"","parent":{"krate":0,"index":545}},{"kind":"Use","ref_id":{"krate":0,"index":352},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7617,"byte_end":7633,"line_start":189,"line_end":189,"column_start":33,"column_end":49},"alias_span":null,"name":"DescriptorWriter","value":"","parent":{"krate":0,"index":545}},{"kind":"Use","ref_id":{"krate":0,"index":378},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7635,"byte_end":7644,"line_start":189,"line_end":189,"column_start":51,"column_end":60},"alias_span":null,"name":"BosWriter","value":"","parent":{"krate":0,"index":545}},{"kind":"Use","ref_id":{"krate":0,"index":731},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7677,"byte_end":7689,"line_start":190,"line_end":190,"column_start":31,"column_end":43},"alias_span":null,"name":"EndpointType","value":"","parent":{"krate":0,"index":545}},{"kind":"Use","ref_id":{"krate":0,"index":188},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7691,"byte_end":7701,"line_start":190,"line_end":190,"column_start":45,"column_end":55},"alias_span":null,"name":"EndpointIn","value":"","parent":{"krate":0,"index":545}},{"kind":"Use","ref_id":{"krate":0,"index":185},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7703,"byte_end":7714,"line_start":190,"line_end":190,"column_start":57,"column_end":68},"alias_span":null,"name":"EndpointOut","value":"","parent":{"krate":0,"index":545}},{"kind":"Use","ref_id":{"krate":0,"index":755},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7716,"byte_end":7731,"line_start":190,"line_end":190,"column_start":70,"column_end":85},"alias_span":null,"name":"EndpointAddress","value":"","parent":{"krate":0,"index":545}},{"kind":"Use","ref_id":{"krate":0,"index":116},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7761,"byte_end":7769,"line_start":191,"line_end":191,"column_start":28,"column_end":36},"alias_span":null,"name":"UsbClass","value":"","parent":{"krate":0,"index":545}},{"kind":"Use","ref_id":{"krate":0,"index":128},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7771,"byte_end":7780,"line_start":191,"line_end":191,"column_start":38,"column_end":47},"alias_span":null,"name":"ControlIn","value":"","parent":{"krate":0,"index":545}},{"kind":"Use","ref_id":{"krate":0,"index":148},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7782,"byte_end":7792,"line_start":191,"line_end":191,"column_start":49,"column_end":59},"alias_span":null,"name":"ControlOut","value":"","parent":{"krate":0,"index":545}},{"kind":"Use","ref_id":{"krate":0,"index":8},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7814,"byte_end":7821,"line_start":192,"line_end":192,"column_start":20,"column_end":27},"alias_span":null,"name":"control","value":"","parent":{"krate":0,"index":545}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":0,"byte_end":9607,"line_start":1,"line_end":257,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":597},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":633},{"krate":0,"index":631},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":623},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":30},{"krate":0,"index":103},{"krate":0,"index":165},{"krate":0,"index":230},{"krate":0,"index":323},{"krate":0,"index":391},{"krate":0,"index":466},{"krate":0,"index":510},{"krate":0,"index":538},{"krate":0,"index":545},{"krate":0,"index":565}],"decl_id":null,"docs":" Experimental device-side USB stack for embedded devices.","sig":null,"attributes":[{"value":"/ Experimental device-side USB stack for embedded devices.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":0,"byte_end":60,"line_start":1,"line_end":1,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":61,"byte_end":64,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ## Implementing a USB device","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":65,"byte_end":97,"line_start":3,"line_end":3,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":98,"byte_end":101,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ A USB device consists of a [`UsbDevice`](device::UsbDevice) instance, one or more","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":102,"byte_end":187,"line_start":5,"line_end":5,"column_start":1,"column_end":86}},{"value":"/ [`UsbClass`](crate::class::UsbClass)es, and a platform-specific [`UsbBus`](bus::UsbBus)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":188,"byte_end":279,"line_start":6,"line_end":6,"column_start":1,"column_end":92}},{"value":"/ implementation which together form a USB composite device.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":280,"byte_end":342,"line_start":7,"line_end":7,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":343,"byte_end":346,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ In the future USB device implementors will be able to use pre-existing peripheral driver crates","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":347,"byte_end":446,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/ and USB class implementation crates. The necessary types for the basic USB composite device","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":447,"byte_end":542,"line_start":10,"line_end":10,"column_start":1,"column_end":96}},{"value":"/ implementation are available with:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":543,"byte_end":581,"line_start":11,"line_end":11,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":582,"byte_end":585,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ `use usb_device::prelude::*`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":586,"byte_end":619,"line_start":13,"line_end":13,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":620,"byte_end":623,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ See the [`device`] module for a more complete example.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":624,"byte_end":682,"line_start":15,"line_end":15,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":683,"byte_end":686,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## USB classes","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":687,"byte_end":705,"line_start":17,"line_end":17,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":706,"byte_end":709,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ For information on how to implement new USB classes, see the [`class`] module and the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":710,"byte_end":799,"line_start":19,"line_end":19,"column_start":1,"column_end":90}},{"value":"/ [`TestClass`](test_class::TestClass) source code for an example of a custom USB device class","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":800,"byte_end":896,"line_start":20,"line_end":20,"column_start":1,"column_end":97}},{"value":"/ implementation. The necessary types for creating new classes are available with:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":897,"byte_end":981,"line_start":21,"line_end":21,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":982,"byte_end":985,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ `use usb_device::class_prelude::*`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":986,"byte_end":1025,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1026,"byte_end":1029,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ## USB peripheral drivers","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1030,"byte_end":1059,"line_start":25,"line_end":25,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1060,"byte_end":1063,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ New peripheral driver crates can be created by implementing the [`UsbBus`](bus::UsbBus) trait.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1064,"byte_end":1162,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1163,"byte_end":1166,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # Note about terminology","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1167,"byte_end":1195,"line_start":29,"line_end":29,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1196,"byte_end":1199,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This crate uses standard host-centric USB terminology for transfer directions. Therefore an OUT","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1200,"byte_end":1299,"line_start":31,"line_end":31,"column_start":1,"column_end":100}},{"value":"/ transfer refers to a host-to-device transfer, and an IN transfer refers to a device-to-host","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1300,"byte_end":1395,"line_start":32,"line_end":32,"column_start":1,"column_end":96}},{"value":"/ transfer. This is mainly a concern for implementing new USB peripheral drivers and USB classes,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1396,"byte_end":1495,"line_start":33,"line_end":33,"column_start":1,"column_end":100}},{"value":"/ and people doing that should be familiar with the USB standard.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1496,"byte_end":1563,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"no_std","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1565,"byte_end":1575,"line_start":36,"line_end":36,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1576,"byte_end":1598,"line_start":37,"line_end":37,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":598},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1765,"byte_end":1775,"line_start":43,"line_end":43,"column_start":5,"column_end":15},"name":"WouldBlock","qualname":"::UsbError::WouldBlock","value":"UsbError::WouldBlock","parent":{"krate":0,"index":597},"children":[],"decl_id":null,"docs":" An operation would block because the device is currently busy or there is no data available.\n","sig":null,"attributes":[{"value":"/ An operation would block because the device is currently busy or there is no data available.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1664,"byte_end":1760,"line_start":42,"line_end":42,"column_start":5,"column_end":101}}]},{"kind":"TupleVariant","id":{"krate":0,"index":600},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1827,"byte_end":1837,"line_start":46,"line_end":46,"column_start":5,"column_end":15},"name":"ParseError","qualname":"::UsbError::ParseError","value":"UsbError::ParseError","parent":{"krate":0,"index":597},"children":[],"decl_id":null,"docs":" Parsing failed due to invalid input.\n","sig":null,"attributes":[{"value":"/ Parsing failed due to invalid input.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1782,"byte_end":1822,"line_start":45,"line_end":45,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":602},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1967,"byte_end":1981,"line_start":50,"line_end":50,"column_start":5,"column_end":19},"name":"BufferOverflow","qualname":"::UsbError::BufferOverflow","value":"UsbError::BufferOverflow","parent":{"krate":0,"index":597},"children":[],"decl_id":null,"docs":" A buffer too short for the data to read was passed, or provided data cannot fit within\n length constraints.\n","sig":null,"attributes":[{"value":"/ A buffer too short for the data to read was passed, or provided data cannot fit within","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1844,"byte_end":1934,"line_start":48,"line_end":48,"column_start":5,"column_end":95}},{"value":"/ length constraints.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1939,"byte_end":1962,"line_start":49,"line_end":49,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":604},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2071,"byte_end":2087,"line_start":53,"line_end":53,"column_start":5,"column_end":21},"name":"EndpointOverflow","qualname":"::UsbError::EndpointOverflow","value":"UsbError::EndpointOverflow","parent":{"krate":0,"index":597},"children":[],"decl_id":null,"docs":" Classes attempted to allocate more endpoints than the peripheral supports.\n","sig":null,"attributes":[{"value":"/ Classes attempted to allocate more endpoints than the peripheral supports.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1988,"byte_end":2066,"line_start":52,"line_end":52,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":606},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2451,"byte_end":2473,"line_start":59,"line_end":59,"column_start":5,"column_end":27},"name":"EndpointMemoryOverflow","qualname":"::UsbError::EndpointMemoryOverflow","value":"UsbError::EndpointMemoryOverflow","parent":{"krate":0,"index":597},"children":[],"decl_id":null,"docs":" Classes attempted to allocate more packet buffer memory than the peripheral supports. This\n can be caused by either a single class trying to allocate a packet buffer larger than the\n peripheral supports per endpoint, or multiple allocated endpoints together using more memory\n than the peripheral has available for the buffers.\n","sig":null,"attributes":[{"value":"/ Classes attempted to allocate more packet buffer memory than the peripheral supports. This","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2094,"byte_end":2188,"line_start":55,"line_end":55,"column_start":5,"column_end":99}},{"value":"/ can be caused by either a single class trying to allocate a packet buffer larger than the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2193,"byte_end":2286,"line_start":56,"line_end":56,"column_start":5,"column_end":98}},{"value":"/ peripheral supports per endpoint, or multiple allocated endpoints together using more memory","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2291,"byte_end":2387,"line_start":57,"line_end":57,"column_start":5,"column_end":101}},{"value":"/ than the peripheral has available for the buffers.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2392,"byte_end":2446,"line_start":58,"line_end":58,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":608},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2537,"byte_end":2552,"line_start":62,"line_end":62,"column_start":5,"column_end":20},"name":"InvalidEndpoint","qualname":"::UsbError::InvalidEndpoint","value":"UsbError::InvalidEndpoint","parent":{"krate":0,"index":597},"children":[],"decl_id":null,"docs":" The endpoint address is invalid or already used.\n","sig":null,"attributes":[{"value":"/ The endpoint address is invalid or already used.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2480,"byte_end":2532,"line_start":61,"line_end":61,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":610},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2622,"byte_end":2633,"line_start":65,"line_end":65,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::UsbError::Unsupported","value":"UsbError::Unsupported","parent":{"krate":0,"index":597},"children":[],"decl_id":null,"docs":" Operation is not supported by device or configuration.\n","sig":null,"attributes":[{"value":"/ Operation is not supported by device or configuration.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2559,"byte_end":2617,"line_start":64,"line_end":64,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":612},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2707,"byte_end":2719,"line_start":68,"line_end":68,"column_start":5,"column_end":17},"name":"InvalidState","qualname":"::UsbError::InvalidState","value":"UsbError::InvalidState","parent":{"krate":0,"index":597},"children":[],"decl_id":null,"docs":" Operation is not valid in the current state of the object.\n","sig":null,"attributes":[{"value":"/ Operation is not valid in the current state of the object.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2640,"byte_end":2702,"line_start":67,"line_end":67,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":597},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1649,"byte_end":1657,"line_start":41,"line_end":41,"column_start":10,"column_end":18},"name":"UsbError","qualname":"::UsbError","value":"pub enum UsbError {\n\n    /// An operation would block because the device is currently busy or there is no data available.\n    WouldBlock,\n\n    /// Parsing failed due to invalid input.\n    ParseError,\n\n    /// A buffer too short for the data to read was passed, or provided data cannot fit within\n    /// length constraints.\n    BufferOverflow,\n\n    /// Classes attempted to allocate more endpoints than the peripheral supports.\n    EndpointOverflow,\n\n    /// Classes attempted to allocate more packet buffer memory than the peripheral supports. This\n    /// can be caused by either a single class trying to allocate a packet buffer larger than the\n    /// peripheral supports per endpoint, or multiple allocated endpoints together using more memory\n    /// than the peripheral has available for the buffers.\n    EndpointMemoryOverflow,\n\n    /// The endpoint address is invalid or already used.\n    InvalidEndpoint,\n\n    /// Operation is not supported by device or configuration.\n    Unsupported,\n\n    /// Operation is not valid in the current state of the object.\n    InvalidState,\n}","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":612}],"decl_id":null,"docs":" A USB stack error.\n","sig":null,"attributes":[{"value":"/ A USB stack error.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":1600,"byte_end":1622,"line_start":39,"line_end":39,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":617},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3177,"byte_end":3180,"line_start":81,"line_end":81,"column_start":5,"column_end":8},"name":"Out","qualname":"::UsbDirection::Out","value":"UsbDirection::Out","parent":{"krate":0,"index":616},"children":[],"decl_id":null,"docs":" Host to device (OUT)\n","sig":null,"attributes":[{"value":"/ Host to device (OUT)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3148,"byte_end":3172,"line_start":80,"line_end":80,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":620},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3221,"byte_end":3223,"line_start":83,"line_end":83,"column_start":5,"column_end":7},"name":"In","qualname":"::UsbDirection::In","value":"UsbDirection::In","parent":{"krate":0,"index":616},"children":[],"decl_id":null,"docs":" Device to host (IN)\n","sig":null,"attributes":[{"value":"/ Device to host (IN)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3193,"byte_end":3216,"line_start":82,"line_end":82,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":616},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3129,"byte_end":3141,"line_start":79,"line_end":79,"column_start":10,"column_end":22},"name":"UsbDirection","qualname":"::UsbDirection","value":"pub enum UsbDirection {\n\n    /// Host to device (OUT)\n    Out = ,\n\n    /// Device to host (IN)\n    In = ,\n}","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":620}],"decl_id":null,"docs":" Direction of USB traffic. Note that in the USB standard the direction is always indicated from\n the perspective of the host, which is backward for devices, but the standard directions are used\n for consistency.","sig":null,"attributes":[{"value":"/ Direction of USB traffic. Note that in the USB standard the direction is always indicated from","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2724,"byte_end":2822,"line_start":71,"line_end":71,"column_start":1,"column_end":99}},{"value":"/ the perspective of the host, which is backward for devices, but the standard directions are used","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2823,"byte_end":2923,"line_start":72,"line_end":72,"column_start":1,"column_end":101}},{"value":"/ for consistency.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2924,"byte_end":2944,"line_start":73,"line_end":73,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2945,"byte_end":2948,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ The values of the enum also match the direction bit used in endpoint addresses and control","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":2949,"byte_end":3043,"line_start":75,"line_end":75,"column_start":1,"column_end":95}},{"value":"/ request types.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3044,"byte_end":3062,"line_start":76,"line_end":76,"column_start":1,"column_end":19}},{"value":"repr(u8)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3063,"byte_end":3074,"line_start":77,"line_end":77,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":6},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3404,"byte_end":3410,"line_start":93,"line_end":93,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"core::result::Result<T, UsbError>","parent":null,"children":[],"decl_id":null,"docs":" Result for USB operations.\n","sig":null,"attributes":[{"value":"/ Result for USB operations.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3364,"byte_end":3394,"line_start":92,"line_end":92,"column_start":1,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":8},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"control","qualname":"::control","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","parent":null,"children":[{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":634},{"krate":0,"index":657},{"krate":0,"index":655},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":647},{"krate":0,"index":658},{"krate":0,"index":684},{"krate":0,"index":682},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":674},{"krate":0,"index":685},{"krate":0,"index":704},{"krate":0,"index":702},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":693},{"krate":0,"index":14}],"decl_id":null,"docs":" USB control transfers and the SETUP packet.\n","sig":null,"attributes":[{"value":"/ USB control transfers and the SETUP packet.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3452,"byte_end":3499,"line_start":95,"line_end":95,"column_start":1,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":635},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":9891,"byte_end":9899,"line_start":10,"line_end":10,"column_start":5,"column_end":13},"name":"Standard","qualname":"::control::RequestType::Standard","value":"RequestType::Standard","parent":{"krate":0,"index":634},"children":[],"decl_id":null,"docs":" Request is a USB standard request. Usually handled by\n [`UsbDevice`](crate::device::UsbDevice).\n","sig":null,"attributes":[{"value":"/ Request is a USB standard request. Usually handled by","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":9780,"byte_end":9837,"line_start":8,"line_end":8,"column_start":5,"column_end":62}},{"value":"/ [`UsbDevice`](crate::device::UsbDevice).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":9842,"byte_end":9886,"line_start":9,"line_end":9,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":638},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":9954,"byte_end":9959,"line_start":12,"line_end":12,"column_start":5,"column_end":10},"name":"Class","qualname":"::control::RequestType::Class","value":"RequestType::Class","parent":{"krate":0,"index":634},"children":[],"decl_id":null,"docs":" Request is intended for a USB class.\n","sig":null,"attributes":[{"value":"/ Request is intended for a USB class.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":9909,"byte_end":9949,"line_start":11,"line_end":11,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":641},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10005,"byte_end":10011,"line_start":14,"line_end":14,"column_start":5,"column_end":11},"name":"Vendor","qualname":"::control::RequestType::Vendor","value":"RequestType::Vendor","parent":{"krate":0,"index":634},"children":[],"decl_id":null,"docs":" Request is vendor-specific.\n","sig":null,"attributes":[{"value":"/ Request is vendor-specific.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":9969,"byte_end":10000,"line_start":13,"line_end":13,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":644},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10039,"byte_end":10047,"line_start":16,"line_end":16,"column_start":5,"column_end":13},"name":"Reserved","qualname":"::control::RequestType::Reserved","value":"RequestType::Reserved","parent":{"krate":0,"index":634},"children":[],"decl_id":null,"docs":" Reserved.\n","sig":null,"attributes":[{"value":"/ Reserved.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10021,"byte_end":10034,"line_start":15,"line_end":15,"column_start":5,"column_end":18}}]},{"kind":"Enum","id":{"krate":0,"index":634},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":9762,"byte_end":9773,"line_start":7,"line_end":7,"column_start":10,"column_end":21},"name":"RequestType","qualname":"::control::RequestType","value":"pub enum RequestType {\n\n    /// Request is a USB standard request. Usually handled by\n    /// [`UsbDevice`](crate::device::UsbDevice).\n    Standard = ,\n\n    /// Request is intended for a USB class.\n    Class = ,\n\n    /// Request is vendor-specific.\n    Vendor = ,\n\n    /// Reserved.\n    Reserved = ,\n}","parent":null,"children":[{"krate":0,"index":635},{"krate":0,"index":638},{"krate":0,"index":641},{"krate":0,"index":644}],"decl_id":null,"docs":" Control request type.\n","sig":null,"attributes":[{"value":"/ Control request type.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":9670,"byte_end":9695,"line_start":4,"line_end":4,"column_start":1,"column_end":26}},{"value":"repr(u8)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":9696,"byte_end":9707,"line_start":5,"line_end":5,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":659},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10208,"byte_end":10214,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"Device","qualname":"::control::Recipient::Device","value":"Recipient::Device","parent":{"krate":0,"index":658},"children":[],"decl_id":null,"docs":" Request is intended for the entire device.\n","sig":null,"attributes":[{"value":"/ Request is intended for the entire device.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10157,"byte_end":10203,"line_start":22,"line_end":22,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":662},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10354,"byte_end":10363,"line_start":26,"line_end":26,"column_start":5,"column_end":14},"name":"Interface","qualname":"::control::Recipient::Interface","value":"Recipient::Interface","parent":{"krate":0,"index":658},"children":[],"decl_id":null,"docs":" Request is intended for an interface. Generally, the `index` field of the request specifies\n the interface number.\n","sig":null,"attributes":[{"value":"/ Request is intended for an interface. Generally, the `index` field of the request specifies","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10224,"byte_end":10319,"line_start":24,"line_end":24,"column_start":5,"column_end":100}},{"value":"/ the interface number.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10324,"byte_end":10349,"line_start":25,"line_end":25,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":665},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10502,"byte_end":10510,"line_start":29,"line_end":29,"column_start":5,"column_end":13},"name":"Endpoint","qualname":"::control::Recipient::Endpoint","value":"Recipient::Endpoint","parent":{"krate":0,"index":658},"children":[],"decl_id":null,"docs":" Request is intended for an endpoint. Generally, the `index` field of the request specifies\n the endpoint address.\n","sig":null,"attributes":[{"value":"/ Request is intended for an endpoint. Generally, the `index` field of the request specifies","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10373,"byte_end":10467,"line_start":27,"line_end":27,"column_start":5,"column_end":99}},{"value":"/ the endpoint address.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10472,"byte_end":10497,"line_start":28,"line_end":28,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":668},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10547,"byte_end":10552,"line_start":31,"line_end":31,"column_start":5,"column_end":10},"name":"Other","qualname":"::control::Recipient::Other","value":"Recipient::Other","parent":{"krate":0,"index":658},"children":[],"decl_id":null,"docs":" None of the above.\n","sig":null,"attributes":[{"value":"/ None of the above.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10520,"byte_end":10542,"line_start":30,"line_end":30,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":671},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10580,"byte_end":10588,"line_start":33,"line_end":33,"column_start":5,"column_end":13},"name":"Reserved","qualname":"::control::Recipient::Reserved","value":"Recipient::Reserved","parent":{"krate":0,"index":658},"children":[],"decl_id":null,"docs":" Reserved.\n","sig":null,"attributes":[{"value":"/ Reserved.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10562,"byte_end":10575,"line_start":32,"line_end":32,"column_start":5,"column_end":18}}]},{"kind":"Enum","id":{"krate":0,"index":658},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10141,"byte_end":10150,"line_start":21,"line_end":21,"column_start":10,"column_end":19},"name":"Recipient","qualname":"::control::Recipient","value":"pub enum Recipient {\n\n    /// Request is intended for the entire device.\n    Device = ,\n\n    /// Request is intended for an interface. Generally, the `index` field of the request specifies\n    /// the interface number.\n    Interface = ,\n\n    /// Request is intended for an endpoint. Generally, the `index` field of the request specifies\n    /// the endpoint address.\n    Endpoint = ,\n\n    /// None of the above.\n    Other = ,\n\n    /// Reserved.\n    Reserved = ,\n}","parent":null,"children":[{"krate":0,"index":659},{"krate":0,"index":662},{"krate":0,"index":665},{"krate":0,"index":668},{"krate":0,"index":671}],"decl_id":null,"docs":" Control request recipient.\n","sig":null,"attributes":[{"value":"/ Control request recipient.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10056,"byte_end":10086,"line_start":19,"line_end":19,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":685},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10701,"byte_end":10708,"line_start":38,"line_end":38,"column_start":12,"column_end":19},"name":"Request","qualname":"::control::Request","value":"Request { direction, request_type, recipient, request, value, index, length }","parent":null,"children":[{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692}],"decl_id":null,"docs":" A control request read from a SETUP packet.\n","sig":null,"attributes":[{"value":"/ A control request read from a SETUP packet.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10597,"byte_end":10644,"line_start":36,"line_end":36,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":686},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10753,"byte_end":10762,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"name":"direction","qualname":"::control::Request::direction","value":"UsbDirection","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":" Direction of the request.\n","sig":null,"attributes":[{"value":"/ Direction of the request.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10715,"byte_end":10744,"line_start":39,"line_end":39,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":687},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10815,"byte_end":10827,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"request_type","qualname":"::control::Request::request_type","value":"control::RequestType","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":" Type of the request.\n","sig":null,"attributes":[{"value":"/ Type of the request.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10782,"byte_end":10806,"line_start":41,"line_end":41,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":688},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10884,"byte_end":10893,"line_start":44,"line_end":44,"column_start":9,"column_end":18},"name":"recipient","qualname":"::control::Request::recipient","value":"control::Recipient","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":" Recipient of the request.\n","sig":null,"attributes":[{"value":"/ Recipient of the request.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10846,"byte_end":10875,"line_start":43,"line_end":43,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":689},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10993,"byte_end":11000,"line_start":46,"line_end":46,"column_start":9,"column_end":16},"name":"request","qualname":"::control::Request::request","value":"u8","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":" Request code. The meaning of the value depends on the previous fields.\n","sig":null,"attributes":[{"value":"/ Request code. The meaning of the value depends on the previous fields.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":10910,"byte_end":10984,"line_start":45,"line_end":45,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":690},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11094,"byte_end":11099,"line_start":48,"line_end":48,"column_start":9,"column_end":14},"name":"value","qualname":"::control::Request::value","value":"u16","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":" Request value. The meaning of the value depends on the previous fields.\n","sig":null,"attributes":[{"value":"/ Request value. The meaning of the value depends on the previous fields.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11010,"byte_end":11085,"line_start":47,"line_end":47,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":691},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11194,"byte_end":11199,"line_start":50,"line_end":50,"column_start":9,"column_end":14},"name":"index","qualname":"::control::Request::index","value":"u16","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":" Request index. The meaning of the value depends on the previous fields.\n","sig":null,"attributes":[{"value":"/ Request index. The meaning of the value depends on the previous fields.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11110,"byte_end":11185,"line_start":49,"line_end":49,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":692},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11428,"byte_end":11434,"line_start":54,"line_end":54,"column_start":9,"column_end":15},"name":"length","qualname":"::control::Request::length","value":"u16","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":" Length of the DATA stage. For control OUT transfers this is the exact length of the data the\n host sent. For control IN transfers this is the maximum length of data the device should\n return.\n","sig":null,"attributes":[{"value":"/ Length of the DATA stage. For control OUT transfers this is the exact length of the data the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11210,"byte_end":11306,"line_start":51,"line_end":51,"column_start":5,"column_end":101}},{"value":"/ host sent. For control IN transfers this is the maximum length of data the device should","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11311,"byte_end":11403,"line_start":52,"line_end":52,"column_start":5,"column_end":97}},{"value":"/ return.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11408,"byte_end":11419,"line_start":53,"line_end":53,"column_start":5,"column_end":16}}]},{"kind":"Const","id":{"krate":0,"index":15},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11521,"byte_end":11531,"line_start":59,"line_end":59,"column_start":15,"column_end":25},"name":"GET_STATUS","qualname":"::control::Request::GET_STATUS","value":"u8","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Standard USB control request Get Status\n","sig":null,"attributes":[{"value":"/ Standard USB control request Get Status","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11463,"byte_end":11506,"line_start":58,"line_end":58,"column_start":5,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":16},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11607,"byte_end":11620,"line_start":62,"line_end":62,"column_start":15,"column_end":28},"name":"CLEAR_FEATURE","qualname":"::control::Request::CLEAR_FEATURE","value":"u8","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Standard USB control request Clear Feature\n","sig":null,"attributes":[{"value":"/ Standard USB control request Clear Feature","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11546,"byte_end":11592,"line_start":61,"line_end":61,"column_start":5,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":17},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11694,"byte_end":11705,"line_start":65,"line_end":65,"column_start":15,"column_end":26},"name":"SET_FEATURE","qualname":"::control::Request::SET_FEATURE","value":"u8","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Standard USB control request Set Feature\n","sig":null,"attributes":[{"value":"/ Standard USB control request Set Feature","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11635,"byte_end":11679,"line_start":64,"line_end":64,"column_start":5,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":18},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11779,"byte_end":11790,"line_start":68,"line_end":68,"column_start":15,"column_end":26},"name":"SET_ADDRESS","qualname":"::control::Request::SET_ADDRESS","value":"u8","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Standard USB control request Set Address\n","sig":null,"attributes":[{"value":"/ Standard USB control request Set Address","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11720,"byte_end":11764,"line_start":67,"line_end":67,"column_start":5,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":19},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11867,"byte_end":11881,"line_start":71,"line_end":71,"column_start":15,"column_end":29},"name":"GET_DESCRIPTOR","qualname":"::control::Request::GET_DESCRIPTOR","value":"u8","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Standard USB control request Get Descriptor\n","sig":null,"attributes":[{"value":"/ Standard USB control request Get Descriptor","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11805,"byte_end":11852,"line_start":70,"line_end":70,"column_start":5,"column_end":52}}]},{"kind":"Const","id":{"krate":0,"index":20},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11958,"byte_end":11972,"line_start":74,"line_end":74,"column_start":15,"column_end":29},"name":"SET_DESCRIPTOR","qualname":"::control::Request::SET_DESCRIPTOR","value":"u8","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Standard USB control request Set Descriptor\n","sig":null,"attributes":[{"value":"/ Standard USB control request Set Descriptor","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11896,"byte_end":11943,"line_start":73,"line_end":73,"column_start":5,"column_end":52}}]},{"kind":"Const","id":{"krate":0,"index":21},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":12052,"byte_end":12069,"line_start":77,"line_end":77,"column_start":15,"column_end":32},"name":"GET_CONFIGURATION","qualname":"::control::Request::GET_CONFIGURATION","value":"u8","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Standard USB control request Get Configuration\n","sig":null,"attributes":[{"value":"/ Standard USB control request Get Configuration","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11987,"byte_end":12037,"line_start":76,"line_end":76,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":22},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":12149,"byte_end":12166,"line_start":80,"line_end":80,"column_start":15,"column_end":32},"name":"SET_CONFIGURATION","qualname":"::control::Request::SET_CONFIGURATION","value":"u8","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Standard USB control request Set Configuration\n","sig":null,"attributes":[{"value":"/ Standard USB control request Set Configuration","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":12084,"byte_end":12134,"line_start":79,"line_end":79,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":23},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":12242,"byte_end":12255,"line_start":83,"line_end":83,"column_start":15,"column_end":28},"name":"GET_INTERFACE","qualname":"::control::Request::GET_INTERFACE","value":"u8","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Standard USB control request Get Interface\n","sig":null,"attributes":[{"value":"/ Standard USB control request Get Interface","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":12181,"byte_end":12227,"line_start":82,"line_end":82,"column_start":5,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":24},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":12332,"byte_end":12345,"line_start":86,"line_end":86,"column_start":15,"column_end":28},"name":"SET_INTERFACE","qualname":"::control::Request::SET_INTERFACE","value":"u8","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Standard USB control request Set Interface\n","sig":null,"attributes":[{"value":"/ Standard USB control request Set Interface","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":12271,"byte_end":12317,"line_start":85,"line_end":85,"column_start":5,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":25},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":12420,"byte_end":12431,"line_start":89,"line_end":89,"column_start":15,"column_end":26},"name":"SYNCH_FRAME","qualname":"::control::Request::SYNCH_FRAME","value":"u8","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Standard USB control request Synch Frame\n","sig":null,"attributes":[{"value":"/ Standard USB control request Synch Frame","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":12361,"byte_end":12405,"line_start":88,"line_end":88,"column_start":5,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":26},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":12522,"byte_end":12543,"line_start":92,"line_end":92,"column_start":15,"column_end":36},"name":"FEATURE_ENDPOINT_HALT","qualname":"::control::Request::FEATURE_ENDPOINT_HALT","value":"u16","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Standard USB feature Endpoint Halt for Set/Clear Feature\n","sig":null,"attributes":[{"value":"/ Standard USB feature Endpoint Halt for Set/Clear Feature","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":12447,"byte_end":12507,"line_start":91,"line_end":91,"column_start":5,"column_end":65}}]},{"kind":"Const","id":{"krate":0,"index":27},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":12641,"byte_end":12669,"line_start":95,"line_end":95,"column_start":15,"column_end":43},"name":"FEATURE_DEVICE_REMOTE_WAKEUP","qualname":"::control::Request::FEATURE_DEVICE_REMOTE_WAKEUP","value":"u16","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Standard USB feature Device Remote Wakeup for Set/Clear Feature\n","sig":null,"attributes":[{"value":"/ Standard USB feature Device Remote Wakeup for Set/Clear Feature","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":12559,"byte_end":12626,"line_start":94,"line_end":94,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":13492,"byte_end":13513,"line_start":119,"line_end":119,"column_start":12,"column_end":33},"name":"descriptor_type_index","qualname":"<Request>::descriptor_type_index","value":"pub fn descriptor_type_index(&Self) -> (u8, u8)","parent":null,"children":[],"decl_id":null,"docs":" Gets the descriptor type and index from the value field of a GET_DESCRIPTOR request.\n","sig":null,"attributes":[{"value":"/ Gets the descriptor type and index from the value field of a GET_DESCRIPTOR request.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":13392,"byte_end":13480,"line_start":118,"line_end":118,"column_start":5,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":30},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bus","qualname":"::bus","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":68},{"krate":0,"index":705},{"krate":0,"index":717},{"krate":0,"index":715},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":84},{"krate":0,"index":718},{"krate":0,"index":730},{"krate":0,"index":728},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90}],"decl_id":null,"docs":" For implementing peripheral drivers.\n","sig":null,"attributes":[{"value":"/ For implementing peripheral drivers.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3518,"byte_end":3558,"line_start":98,"line_end":98,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":46},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14509,"byte_end":14515,"line_start":17,"line_end":17,"column_start":11,"column_end":17},"name":"UsbBus","qualname":"::bus::UsbBus","value":"UsbBus: Sync + Sized","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59}],"decl_id":null,"docs":" A trait for device-specific USB peripherals. Implement this to add support for a new hardware\n platform.","sig":null,"attributes":[{"value":"/ A trait for device-specific USB peripherals. Implement this to add support for a new hardware","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":13827,"byte_end":13924,"line_start":8,"line_end":8,"column_start":1,"column_end":98}},{"value":"/ platform.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":13925,"byte_end":13938,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":13939,"byte_end":13942,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The UsbBus is shared by reference between the global [`UsbDevice`](crate::device::UsbDevice) as","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":13943,"byte_end":14042,"line_start":11,"line_end":11,"column_start":1,"column_end":100}},{"value":"/ well as [`UsbClass`](crate::class::UsbClass)es, and therefore any required mutability must be","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14043,"byte_end":14140,"line_start":12,"line_end":12,"column_start":1,"column_end":98}},{"value":"/ implemented using interior mutability. Most operations that may mutate the bus object itself","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14141,"byte_end":14237,"line_start":13,"line_end":13,"column_start":1,"column_end":97}},{"value":"/ take place before [`enable`](UsbBus::enable) is called. After the bus is enabled, in practice","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14238,"byte_end":14335,"line_start":14,"line_end":14,"column_start":1,"column_end":98}},{"value":"/ most access won't mutate the object itself but only endpoint-specific registers and buffers, the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14336,"byte_end":14436,"line_start":15,"line_end":15,"column_start":1,"column_end":101}},{"value":"/ access to which is mostly arbitrated by endpoint handles.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14437,"byte_end":14498,"line_start":16,"line_end":16,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":15724,"byte_end":15732,"line_start":38,"line_end":38,"column_start":8,"column_end":16},"name":"alloc_ep","qualname":"::bus::UsbBus::alloc_ep","value":"pub fn alloc_ep(&mut Self, UsbDirection, Option<EndpointAddress>,\n                EndpointType, u16, u8) -> Result<EndpointAddress>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Allocates an endpoint and specified endpoint parameters. This method is called by the device\n and class implementations to allocate endpoints, and can only be called before\n [`enable`](UsbBus::enable) is called.","sig":null,"attributes":[{"value":"/ Allocates an endpoint and specified endpoint parameters. This method is called by the device","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14536,"byte_end":14632,"line_start":18,"line_end":18,"column_start":5,"column_end":101}},{"value":"/ and class implementations to allocate endpoints, and can only be called before","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14637,"byte_end":14719,"line_start":19,"line_end":19,"column_start":5,"column_end":87}},{"value":"/ [`enable`](UsbBus::enable) is called.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14724,"byte_end":14765,"line_start":20,"line_end":20,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14770,"byte_end":14773,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14778,"byte_end":14793,"line_start":22,"line_end":22,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14798,"byte_end":14801,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ * `ep_dir` - The endpoint direction.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14806,"byte_end":14846,"line_start":24,"line_end":24,"column_start":5,"column_end":45}},{"value":"/ * `ep_addr` - A static endpoint address to allocate. If Some, the implementation should","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14851,"byte_end":14942,"line_start":25,"line_end":25,"column_start":5,"column_end":96}},{"value":"/   attempt to return an endpoint with the specified address. If None, the implementation","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14947,"byte_end":15038,"line_start":26,"line_end":26,"column_start":5,"column_end":96}},{"value":"/   should return the next available one.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":15043,"byte_end":15086,"line_start":27,"line_end":27,"column_start":5,"column_end":48}},{"value":"/ * `max_packet_size` - Maximum packet size in bytes.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":15091,"byte_end":15146,"line_start":28,"line_end":28,"column_start":5,"column_end":60}},{"value":"/ * `interval` - Polling interval parameter for interrupt endpoints.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":15151,"byte_end":15221,"line_start":29,"line_end":29,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":15226,"byte_end":15229,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":15234,"byte_end":15246,"line_start":31,"line_end":31,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":15251,"byte_end":15254,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ * [`EndpointOverflow`](crate::UsbError::EndpointOverflow) - Available total number of","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":15259,"byte_end":15348,"line_start":33,"line_end":33,"column_start":5,"column_end":94}},{"value":"/   endpoints, endpoints of the specified type, or endpoind packet memory has been exhausted.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":15353,"byte_end":15448,"line_start":34,"line_end":34,"column_start":5,"column_end":100}},{"value":"/   This is generally caused when a user tries to add too many classes to a composite device.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":15453,"byte_end":15548,"line_start":35,"line_end":35,"column_start":5,"column_end":100}},{"value":"/ * [`InvalidEndpoint`](crate::UsbError::InvalidEndpoint) - A specific `ep_addr` was specified","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":15553,"byte_end":15649,"line_start":36,"line_end":36,"column_start":5,"column_end":101}},{"value":"/   but the endpoint in question has already been allocated.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":15654,"byte_end":15716,"line_start":37,"line_end":37,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16109,"byte_end":16115,"line_start":48,"line_end":48,"column_start":8,"column_end":14},"name":"enable","qualname":"::bus::UsbBus::enable","value":"pub fn enable(&mut Self)","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Enables and initializes the USB peripheral. Soon after enabling the device will be reset, so\n there is no need to perform a USB reset in this method.\n","sig":null,"attributes":[{"value":"/ Enables and initializes the USB peripheral. Soon after enabling the device will be reset, so","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":15941,"byte_end":16037,"line_start":46,"line_end":46,"column_start":5,"column_end":101}},{"value":"/ there is no need to perform a USB reset in this method.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16042,"byte_end":16101,"line_start":47,"line_end":47,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16536,"byte_end":16541,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"reset","qualname":"::bus::UsbBus::reset","value":"pub fn reset(&Self)","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Called when the host resets the device. This will be soon called after\n [`poll`](crate::device::UsbDevice::poll) returns [`PollResult::Reset`]. This method should\n reset the state of all endpoints and peripheral flags back to a state suitable for\n enumeration, as well as ensure that all endpoints previously allocated with alloc_ep are\n initialized as specified.\n","sig":null,"attributes":[{"value":"/ Called when the host resets the device. This will be soon called after","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16133,"byte_end":16207,"line_start":50,"line_end":50,"column_start":5,"column_end":79}},{"value":"/ [`poll`](crate::device::UsbDevice::poll) returns [`PollResult::Reset`]. This method should","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16212,"byte_end":16306,"line_start":51,"line_end":51,"column_start":5,"column_end":99}},{"value":"/ reset the state of all endpoints and peripheral flags back to a state suitable for","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16311,"byte_end":16397,"line_start":52,"line_end":52,"column_start":5,"column_end":91}},{"value":"/ enumeration, as well as ensure that all endpoints previously allocated with alloc_ep are","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16402,"byte_end":16494,"line_start":53,"line_end":53,"column_start":5,"column_end":97}},{"value":"/ initialized as specified.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16499,"byte_end":16528,"line_start":54,"line_end":54,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16605,"byte_end":16623,"line_start":58,"line_end":58,"column_start":8,"column_end":26},"name":"set_device_address","qualname":"::bus::UsbBus::set_device_address","value":"pub fn set_device_address(&Self, u8)","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Sets the device USB address to `addr`.\n","sig":null,"attributes":[{"value":"/ Sets the device USB address to `addr`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16555,"byte_end":16597,"line_start":57,"line_end":57,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":17709,"byte_end":17714,"line_start":78,"line_end":78,"column_start":8,"column_end":13},"name":"write","qualname":"::bus::UsbBus::write","value":"pub fn write(&Self, EndpointAddress, &[u8]) -> Result<usize>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Writes a single packet of data to the specified endpoint and returns number of bytes\n actually written.","sig":null,"attributes":[{"value":"/ Writes a single packet of data to the specified endpoint and returns number of bytes","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16647,"byte_end":16735,"line_start":60,"line_end":60,"column_start":5,"column_end":93}},{"value":"/ actually written.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16740,"byte_end":16761,"line_start":61,"line_end":61,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16766,"byte_end":16769,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ The only reason for a short write is if the caller passes a slice larger than the amount of","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16774,"byte_end":16869,"line_start":63,"line_end":63,"column_start":5,"column_end":100}},{"value":"/ memory allocated earlier, and this is generally an error in the class implementation.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16874,"byte_end":16963,"line_start":64,"line_end":64,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16968,"byte_end":16971,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16976,"byte_end":16988,"line_start":66,"line_end":66,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":16993,"byte_end":16996,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ * [`InvalidEndpoint`](crate::UsbError::InvalidEndpoint) - The `ep_addr` does not point to a","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":17001,"byte_end":17096,"line_start":68,"line_end":68,"column_start":5,"column_end":100}},{"value":"/   valid endpoint that was previously allocated with [`UsbBus::alloc_ep`].","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":17101,"byte_end":17178,"line_start":69,"line_end":69,"column_start":5,"column_end":82}},{"value":"/ * [`WouldBlock`](crate::UsbError::WouldBlock) - A previously written packet is still pending","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":17183,"byte_end":17279,"line_start":70,"line_end":70,"column_start":5,"column_end":101}},{"value":"/   to be sent.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":17284,"byte_end":17301,"line_start":71,"line_end":71,"column_start":5,"column_end":22}},{"value":"/ * [`BufferOverflow`](crate::UsbError::BufferOverflow) - The packet is too long to fit in the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":17306,"byte_end":17402,"line_start":72,"line_end":72,"column_start":5,"column_end":101}},{"value":"/   transmission buffer. This is generally an error in the class implementation, because the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":17407,"byte_end":17501,"line_start":73,"line_end":73,"column_start":5,"column_end":99}},{"value":"/   class shouldn't provide more data than the `max_packet_size` it specified when allocating","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":17506,"byte_end":17601,"line_start":74,"line_end":74,"column_start":5,"column_end":100}},{"value":"/   the endpoint.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":17606,"byte_end":17625,"line_start":75,"line_end":75,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":17630,"byte_end":17633,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ Implementations may also return other errors if applicable.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":17638,"byte_end":17701,"line_start":77,"line_end":77,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":18865,"byte_end":18869,"line_start":98,"line_end":98,"column_start":8,"column_end":12},"name":"read","qualname":"::bus::UsbBus::read","value":"pub fn read(&Self, EndpointAddress, &mut [u8]) -> Result<usize>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Reads a single packet of data from the specified endpoint and returns the actual length of\n the packet.","sig":null,"attributes":[{"value":"/ Reads a single packet of data from the specified endpoint and returns the actual length of","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":17783,"byte_end":17877,"line_start":80,"line_end":80,"column_start":5,"column_end":99}},{"value":"/ the packet.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":17882,"byte_end":17897,"line_start":81,"line_end":81,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":17902,"byte_end":17905,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ This should also clear any NAK flags and prepare the endpoint to receive the next packet.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":17910,"byte_end":18003,"line_start":83,"line_end":83,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":18008,"byte_end":18011,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":18016,"byte_end":18028,"line_start":85,"line_end":85,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":18033,"byte_end":18036,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ * [`InvalidEndpoint`](crate::UsbError::InvalidEndpoint) - The `ep_addr` does not point to a","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":18041,"byte_end":18136,"line_start":87,"line_end":87,"column_start":5,"column_end":100}},{"value":"/   valid endpoint that was previously allocated with [`UsbBus::alloc_ep`].","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":18141,"byte_end":18218,"line_start":88,"line_end":88,"column_start":5,"column_end":82}},{"value":"/ * [`WouldBlock`](crate::UsbError::WouldBlock) - There is no packet to be read. Note that","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":18223,"byte_end":18315,"line_start":89,"line_end":89,"column_start":5,"column_end":97}},{"value":"/   this is different from a received zero-length packet, which is valid in USB. A zero-length","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":18320,"byte_end":18416,"line_start":90,"line_end":90,"column_start":5,"column_end":101}},{"value":"/   packet will return `Ok(0)`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":18421,"byte_end":18454,"line_start":91,"line_end":91,"column_start":5,"column_end":38}},{"value":"/ * [`BufferOverflow`](crate::UsbError::BufferOverflow) - The received packet is too long to","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":18459,"byte_end":18553,"line_start":92,"line_end":92,"column_start":5,"column_end":99}},{"value":"/   fit in `buf`. This is generally an error in the class implementation, because the class","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":18558,"byte_end":18651,"line_start":93,"line_end":93,"column_start":5,"column_end":98}},{"value":"/   should use a buffer that is large enough for the `max_packet_size` it specified when","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":18656,"byte_end":18746,"line_start":94,"line_end":94,"column_start":5,"column_end":95}},{"value":"/   allocating the endpoint.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":18751,"byte_end":18781,"line_start":95,"line_end":95,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":18786,"byte_end":18789,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Implementations may also return other errors if applicable.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":18794,"byte_end":18857,"line_start":97,"line_end":97,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":19094,"byte_end":19105,"line_start":102,"line_end":102,"column_start":8,"column_end":19},"name":"set_stalled","qualname":"::bus::UsbBus::set_stalled","value":"pub fn set_stalled(&Self, EndpointAddress, bool)","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Sets or clears the STALL condition for an endpoint. If the endpoint is an OUT endpoint, it\n should be prepared to receive data again.\n","sig":null,"attributes":[{"value":"/ Sets or clears the STALL condition for an endpoint. If the endpoint is an OUT endpoint, it","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":18942,"byte_end":19036,"line_start":100,"line_end":100,"column_start":5,"column_end":99}},{"value":"/ should be prepared to receive data again.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":19041,"byte_end":19086,"line_start":101,"line_end":101,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":19228,"byte_end":19238,"line_start":105,"line_end":105,"column_start":8,"column_end":18},"name":"is_stalled","qualname":"::bus::UsbBus::is_stalled","value":"pub fn is_stalled(&Self, EndpointAddress) -> bool","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Gets whether the STALL condition is set for an endpoint.\n","sig":null,"attributes":[{"value":"/ Gets whether the STALL condition is set for an endpoint.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":19160,"byte_end":19220,"line_start":104,"line_end":104,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":19699,"byte_end":19706,"line_start":112,"line_end":112,"column_start":8,"column_end":15},"name":"suspend","qualname":"::bus::UsbBus::suspend","value":"pub fn suspend(&Self)","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Causes the USB peripheral to enter USB suspend mode, lowering power consumption and\n preparing to detect a USB wakeup event. This will be called after\n [`poll`](crate::device::UsbDevice::poll) returns [`PollResult::Suspend`]. The device will\n continue be polled, and it shall return a value other than `Suspend` from `poll` when it no\n longer detects the suspend condition.\n","sig":null,"attributes":[{"value":"/ Causes the USB peripheral to enter USB suspend mode, lowering power consumption and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":19286,"byte_end":19373,"line_start":107,"line_end":107,"column_start":5,"column_end":92}},{"value":"/ preparing to detect a USB wakeup event. This will be called after","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":19378,"byte_end":19447,"line_start":108,"line_end":108,"column_start":5,"column_end":74}},{"value":"/ [`poll`](crate::device::UsbDevice::poll) returns [`PollResult::Suspend`]. The device will","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":19452,"byte_end":19545,"line_start":109,"line_end":109,"column_start":5,"column_end":98}},{"value":"/ continue be polled, and it shall return a value other than `Suspend` from `poll` when it no","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":19550,"byte_end":19645,"line_start":110,"line_end":110,"column_start":5,"column_end":100}},{"value":"/ longer detects the suspend condition.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":19650,"byte_end":19691,"line_start":111,"line_end":111,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":19842,"byte_end":19848,"line_start":116,"line_end":116,"column_start":8,"column_end":14},"name":"resume","qualname":"::bus::UsbBus::resume","value":"pub fn resume(&Self)","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Resumes from suspend mode. This may only be called after the peripheral has been previously\n suspended.\n","sig":null,"attributes":[{"value":"/ Resumes from suspend mode. This may only be called after the peripheral has been previously","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":19720,"byte_end":19815,"line_start":114,"line_end":114,"column_start":5,"column_end":100}},{"value":"/ suspended.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":19820,"byte_end":19834,"line_start":115,"line_end":115,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20037,"byte_end":20041,"line_start":120,"line_end":120,"column_start":8,"column_end":12},"name":"poll","qualname":"::bus::UsbBus::poll","value":"pub fn poll(&Self) -> PollResult","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Gets information about events and incoming data. Usually called in a loop or from an\n interrupt handler. See the [`PollResult`] struct for more information.\n","sig":null,"attributes":[{"value":"/ Gets information about events and incoming data. Usually called in a loop or from an","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":19862,"byte_end":19950,"line_start":118,"line_end":118,"column_start":5,"column_end":93}},{"value":"/ interrupt handler. See the [`PollResult`] struct for more information.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":19955,"byte_end":20029,"line_start":119,"line_end":119,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20468,"byte_end":20479,"line_start":131,"line_end":131,"column_start":8,"column_end":19},"name":"force_reset","qualname":"::bus::UsbBus::force_reset","value":"pub fn force_reset(&Self) -> Result<()>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Simulates a disconnect from the USB bus, causing the host to reset and re-enumerate the\n device.","sig":null,"attributes":[{"value":"/ Simulates a disconnect from the USB bus, causing the host to reset and re-enumerate the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20069,"byte_end":20160,"line_start":122,"line_end":122,"column_start":5,"column_end":96}},{"value":"/ device.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20165,"byte_end":20176,"line_start":123,"line_end":123,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20181,"byte_end":20184,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ The default implementation just returns `Unsupported`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20189,"byte_end":20247,"line_start":125,"line_end":125,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20252,"byte_end":20255,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20260,"byte_end":20272,"line_start":127,"line_end":127,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20277,"byte_end":20280,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ * [`Unsupported`](crate::UsbError::Unsupported) - This UsbBus implementation doesn't support","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20285,"byte_end":20381,"line_start":129,"line_end":129,"column_start":5,"column_end":101}},{"value":"/   simulating a disconnect or it has not been enabled at creation time.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20386,"byte_end":20460,"line_start":130,"line_end":130,"column_start":5,"column_end":79}}]},{"kind":"Const","id":{"krate":0,"index":59},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20795,"byte_end":20826,"line_start":139,"line_end":139,"column_start":11,"column_end":42},"name":"QUIRK_SET_ADDRESS_BEFORE_STATUS","qualname":"::bus::UsbBus::QUIRK_SET_ADDRESS_BEFORE_STATUS","value":"bool","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Indicates that `set_device_address` must be called before accepting the corresponding\n control transfer, not after.","sig":null,"attributes":[{"value":"/ Indicates that `set_device_address` must be called before accepting the corresponding","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20549,"byte_end":20638,"line_start":135,"line_end":135,"column_start":5,"column_end":94}},{"value":"/ control transfer, not after.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20643,"byte_end":20675,"line_start":136,"line_end":136,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20680,"byte_end":20683,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ The default value for this constant is `false`, which corresponds to the USB 2.0 spec, 9.4.6","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20688,"byte_end":20784,"line_start":138,"line_end":138,"column_start":5,"column_end":101}}]},{"kind":"Struct","id":{"krate":0,"index":63},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":21013,"byte_end":21028,"line_start":148,"line_end":148,"column_start":12,"column_end":27},"name":"UsbBusAllocator","qualname":"::bus::UsbBusAllocator","value":"UsbBusAllocator {  }","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67}],"decl_id":null,"docs":" Helper type used for UsbBus resource allocation and initialization.\n","sig":null,"attributes":[{"value":"/ Helper type used for UsbBus resource allocation and initialization.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":20930,"byte_end":21001,"line_start":147,"line_end":147,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":21314,"byte_end":21317,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"new","qualname":"<UsbBusAllocator<B>>::new","value":"pub fn new(B) -> UsbBusAllocator<B>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`UsbBusAllocator`] that wraps the provided [`UsbBus`]. Usually only called by\n USB driver implementations.\n","sig":null,"attributes":[{"value":"/ Creates a new [`UsbBusAllocator`] that wraps the provided [`UsbBus`]. Usually only called by","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":21170,"byte_end":21266,"line_start":155,"line_end":155,"column_start":5,"column_end":101}},{"value":"/ USB driver implementations.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":21271,"byte_end":21302,"line_start":156,"line_end":156,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":22658,"byte_end":22667,"line_start":192,"line_end":192,"column_start":12,"column_end":21},"name":"interface","qualname":"<UsbBusAllocator<B>>::interface","value":"pub fn interface(&Self) -> InterfaceNumber","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new interface number.\n","sig":null,"attributes":[{"value":"/ Allocates a new interface number.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":22609,"byte_end":22646,"line_start":191,"line_end":191,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":22926,"byte_end":22932,"line_start":201,"line_end":201,"column_start":12,"column_end":18},"name":"string","qualname":"<UsbBusAllocator<B>>::string","value":"pub fn string(&Self) -> StringIndex","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new string index.\n","sig":null,"attributes":[{"value":"/ Allocates a new string index.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":22881,"byte_end":22914,"line_start":200,"line_end":200,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":23390,"byte_end":23395,"line_start":213,"line_end":213,"column_start":12,"column_end":17},"name":"alloc","qualname":"<UsbBusAllocator<B>>::alloc","value":"pub fn alloc<'a,\n             D: EndpointDirection>(&Self, Option<EndpointAddress>,\n                                   EndpointType, u16, u8)\n-> Result<Endpoint<, B, D>>","parent":null,"children":[],"decl_id":null,"docs":" Allocates an endpoint with the specified direction and address.","sig":null,"attributes":[{"value":"/ Allocates an endpoint with the specified direction and address.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":23128,"byte_end":23195,"line_start":209,"line_end":209,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":23200,"byte_end":23203,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ This directly delegates to [`UsbBus::alloc_ep`], so see that method for details. In most","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":23208,"byte_end":23300,"line_start":211,"line_end":211,"column_start":5,"column_end":97}},{"value":"/ cases classes should call the endpoint type specific methods instead.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":23305,"byte_end":23378,"line_start":212,"line_end":212,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24475,"byte_end":24482,"line_start":244,"line_end":244,"column_start":12,"column_end":19},"name":"control","qualname":"<UsbBusAllocator<B>>::control","value":"pub fn control<D: EndpointDirection>(&Self, u16) -> Endpoint<, B, D>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a control endpoint.","sig":null,"attributes":[{"value":"/ Allocates a control endpoint.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":23876,"byte_end":23909,"line_start":229,"line_end":229,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":23914,"byte_end":23917,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ This crate implements the control state machine only for endpoint 0. If classes want to","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":23922,"byte_end":24013,"line_start":231,"line_end":231,"column_start":5,"column_end":96}},{"value":"/ support control requests in other endpoints, the state machine must be implemented manually.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24018,"byte_end":24114,"line_start":232,"line_end":232,"column_start":5,"column_end":101}},{"value":"/ This should rarely be needed by classes.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24119,"byte_end":24163,"line_start":233,"line_end":233,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24168,"byte_end":24171,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24176,"byte_end":24191,"line_start":235,"line_end":235,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24196,"byte_end":24199,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ * `max_packet_size` - Maximum packet size in bytes. Must be one of 8, 16, 32 or 64.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24204,"byte_end":24291,"line_start":237,"line_end":237,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24296,"byte_end":24299,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24304,"byte_end":24316,"line_start":239,"line_end":239,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24321,"byte_end":24324,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ Panics if endpoint allocation fails, because running out of endpoints or memory is not","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24329,"byte_end":24419,"line_start":241,"line_end":241,"column_start":5,"column_end":95}},{"value":"/ feasibly recoverable.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24424,"byte_end":24449,"line_start":242,"line_end":242,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24454,"byte_end":24463,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":25005,"byte_end":25009,"line_start":259,"line_end":259,"column_start":12,"column_end":16},"name":"bulk","qualname":"<UsbBusAllocator<B>>::bulk","value":"pub fn bulk<D: EndpointDirection>(&Self, u16) -> Endpoint<, B, D>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a bulk endpoint.","sig":null,"attributes":[{"value":"/ Allocates a bulk endpoint.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24663,"byte_end":24693,"line_start":248,"line_end":248,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24698,"byte_end":24701,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24706,"byte_end":24721,"line_start":250,"line_end":250,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24726,"byte_end":24729,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ * `max_packet_size` - Maximum packet size in bytes. Must be one of 8, 16, 32 or 64.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24734,"byte_end":24821,"line_start":252,"line_end":252,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24826,"byte_end":24829,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24834,"byte_end":24846,"line_start":254,"line_end":254,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24851,"byte_end":24854,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ Panics if endpoint allocation fails, because running out of endpoints or memory is not","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24859,"byte_end":24949,"line_start":256,"line_end":256,"column_start":5,"column_end":95}},{"value":"/ feasibly recoverable.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24954,"byte_end":24979,"line_start":257,"line_end":257,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":24984,"byte_end":24993,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":25499,"byte_end":25508,"line_start":272,"line_end":272,"column_start":12,"column_end":21},"name":"interrupt","qualname":"<UsbBusAllocator<B>>::interrupt","value":"pub fn interrupt<D: EndpointDirection>(&Self, u16, u8) -> Endpoint<, B, D>","parent":null,"children":[],"decl_id":null,"docs":" Allocates an interrupt endpoint.","sig":null,"attributes":[{"value":"/ Allocates an interrupt endpoint.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":25187,"byte_end":25223,"line_start":263,"line_end":263,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":25228,"byte_end":25231,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ * `max_packet_size` - Maximum packet size in bytes. Cannot exceed 64 bytes.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":25236,"byte_end":25315,"line_start":265,"line_end":265,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":25320,"byte_end":25323,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":25328,"byte_end":25340,"line_start":267,"line_end":267,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":25345,"byte_end":25348,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Panics if endpoint allocation fails, because running out of endpoints or memory is not","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":25353,"byte_end":25443,"line_start":269,"line_end":269,"column_start":5,"column_end":95}},{"value":"/ feasibly recoverable.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":25448,"byte_end":25473,"line_start":270,"line_end":270,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":25478,"byte_end":25487,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":705},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":25856,"byte_end":25871,"line_start":283,"line_end":283,"column_start":12,"column_end":27},"name":"InterfaceNumber","qualname":"::bus::InterfaceNumber","value":"","parent":null,"children":[],"decl_id":null,"docs":" A handle for a USB interface that contains its number.\n","sig":null,"attributes":[{"value":"/ A handle for a USB interface that contains its number.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":25748,"byte_end":25806,"line_start":281,"line_end":281,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":718},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":26078,"byte_end":26089,"line_start":291,"line_end":291,"column_start":12,"column_end":23},"name":"StringIndex","qualname":"::bus::StringIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A handle for a USB string descriptor that contains its index.\n","sig":null,"attributes":[{"value":"/ A handle for a USB string descriptor that contains its index.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":25963,"byte_end":26028,"line_start":289,"line_end":289,"column_start":1,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":91},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":26416,"byte_end":26420,"line_start":306,"line_end":306,"column_start":5,"column_end":9},"name":"None","qualname":"::bus::PollResult::None","value":"PollResult::None","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" No events or packets to report.\n","sig":null,"attributes":[{"value":"/ No events or packets to report.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":26376,"byte_end":26411,"line_start":305,"line_end":305,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":93},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":26478,"byte_end":26483,"line_start":309,"line_end":309,"column_start":5,"column_end":10},"name":"Reset","qualname":"::bus::PollResult::Reset","value":"PollResult::Reset","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" The USB reset condition has been detected.\n","sig":null,"attributes":[{"value":"/ The USB reset condition has been detected.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":26427,"byte_end":26473,"line_start":308,"line_end":308,"column_start":5,"column_end":51}}]},{"kind":"StructVariant","id":{"krate":0,"index":95},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":26724,"byte_end":26728,"line_start":314,"line_end":314,"column_start":5,"column_end":9},"name":"Data","qualname":"::bus::PollResult::Data","value":"PollResult::Data { ep_out, ep_in_complete, ep_setup }","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" USB packets have been received or sent. Each data field is a bit-field where the least\n significant bit represents endpoint 0 etc., and a set bit signifies the event has occurred\n for the corresponding endpoint.\n","sig":null,"attributes":[{"value":"/ USB packets have been received or sent. Each data field is a bit-field where the least","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":26490,"byte_end":26580,"line_start":311,"line_end":311,"column_start":5,"column_end":95}},{"value":"/ significant bit represents endpoint 0 etc., and a set bit signifies the event has occurred","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":26585,"byte_end":26679,"line_start":312,"line_end":312,"column_start":5,"column_end":99}},{"value":"/ for the corresponding endpoint.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":26684,"byte_end":26719,"line_start":313,"line_end":313,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":99},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":27415,"byte_end":27422,"line_start":330,"line_end":330,"column_start":5,"column_end":12},"name":"Suspend","qualname":"::bus::PollResult::Suspend","value":"PollResult::Suspend","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" A USB suspend request has been detected or, in the case of self-powered devices, the device\n has been disconnected from the USB bus.\n","sig":null,"attributes":[{"value":"/ A USB suspend request has been detected or, in the case of self-powered devices, the device","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":27267,"byte_end":27362,"line_start":328,"line_end":328,"column_start":5,"column_end":100}},{"value":"/ has been disconnected from the USB bus.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":27367,"byte_end":27410,"line_start":329,"line_end":329,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":101},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":27593,"byte_end":27599,"line_start":334,"line_end":334,"column_start":5,"column_end":11},"name":"Resume","qualname":"::bus::PollResult::Resume","value":"PollResult::Resume","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" A USB resume request has been detected after being suspended or, in the case of self-powered\n devices, the device has been connected to the USB bus.\n","sig":null,"attributes":[{"value":"/ A USB resume request has been detected after being suspended or, in the case of self-powered","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":27429,"byte_end":27525,"line_start":332,"line_end":332,"column_start":5,"column_end":101}},{"value":"/ devices, the device has been connected to the USB bus.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":27530,"byte_end":27588,"line_start":333,"line_end":333,"column_start":5,"column_end":63}}]},{"kind":"Enum","id":{"krate":0,"index":90},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":26359,"byte_end":26369,"line_start":304,"line_end":304,"column_start":10,"column_end":20},"name":"PollResult","qualname":"::bus::PollResult","value":"pub enum PollResult {\n\n    /// No events or packets to report.\n    None,\n\n    /// The USB reset condition has been detected.\n    Reset,\n\n    /// USB packets have been received or sent. Each data field is a bit-field where the least\n    /// significant bit represents endpoint 0 etc., and a set bit signifies the event has occurred\n    /// for the corresponding endpoint.\n    Data {\n        /// An OUT packet has been received. This event should continue to be reported until the\n        /// packet is read.\n        ep_out: u16,\n        /// An IN packet has finished transmitting. This event should only be reported once for each\n        /// completed transfer.\n        ep_in_complete: u16,\n        /// A SETUP packet has been received. This event should continue to be reported until the\n        /// packet is read. The corresponding bit in `ep_out` may also be set but is ignored.\n        ep_setup: u16,\n    },\n\n    /// A USB suspend request has been detected or, in the case of self-powered devices, the device\n    /// has been disconnected from the USB bus.\n    Suspend,\n\n    /// A USB resume request has been detected after being suspended or, in the case of self-powered\n    /// devices, the device has been connected to the USB bus.\n    Resume,\n}","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":99},{"krate":0,"index":101}],"decl_id":null,"docs":" Event and incoming packet information returned by [`UsbBus::poll`].\n","sig":null,"attributes":[{"value":"/ Event and incoming packet information returned by [`UsbBus::poll`].","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":26278,"byte_end":26349,"line_start":303,"line_end":303,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":103},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"class","qualname":"::class","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":128},{"krate":0,"index":135},{"krate":0,"index":148},{"krate":0,"index":155}],"decl_id":null,"docs":" For implementing standard as well as vendor-specific USB classes.","sig":null,"attributes":[{"value":"/ For implementing standard as well as vendor-specific USB classes.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3573,"byte_end":3642,"line_start":101,"line_end":101,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3643,"byte_end":3646,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ To implement a new class, implement the [`UsbClass`](class::UsbClass) trait. The trait contains","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3647,"byte_end":3746,"line_start":103,"line_end":103,"column_start":1,"column_end":100}},{"value":"/ numerous callbacks that you can use to respond to USB events. None of the methods are required,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3747,"byte_end":3846,"line_start":104,"line_end":104,"column_start":1,"column_end":100}},{"value":"/ and you only need to override the ones that your specific class needs to function. See the trait","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3847,"byte_end":3947,"line_start":105,"line_end":105,"column_start":1,"column_end":101}},{"value":"/ documentation for more information on the callback methods.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3948,"byte_end":4011,"line_start":106,"line_end":106,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4012,"byte_end":4015,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ Your class should *not* hold a direct reference to the [`UsbBus`](bus::UsbBus) object. Rather it","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4016,"byte_end":4116,"line_start":108,"line_end":108,"column_start":1,"column_end":101}},{"value":"/ should take a temporary reference to the [`UsbBusAllocator`](bus::UsbBusAllocator) object","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4117,"byte_end":4210,"line_start":109,"line_end":109,"column_start":1,"column_end":94}},{"value":"/ exposed by the bus in its constructor, and use that to allocate endpoints, as well as interface","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4211,"byte_end":4310,"line_start":110,"line_end":110,"column_start":1,"column_end":100}},{"value":"/ and string handles. Using the [`Endpoint`](endpoint::Endpoint) handles which wrap a reference to","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4311,"byte_end":4411,"line_start":111,"line_end":111,"column_start":1,"column_end":101}},{"value":"/ the `UsbBus` instance ensures that classes cannot inadvertently access an endpoint owned by","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4412,"byte_end":4507,"line_start":112,"line_end":112,"column_start":1,"column_end":96}},{"value":"/ another class.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4508,"byte_end":4526,"line_start":113,"line_end":113,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4527,"byte_end":4530,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ In addition to implementing the trait, add struct methods for the end-user to send and receive","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4531,"byte_end":4629,"line_start":115,"line_end":115,"column_start":1,"column_end":99}},{"value":"/ data via your class. For example, a serial port class might have class-specific methods `read`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4630,"byte_end":4728,"line_start":116,"line_end":116,"column_start":1,"column_end":99}},{"value":"/ and `write` to read and write data.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4729,"byte_end":4768,"line_start":117,"line_end":117,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":116},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":27987,"byte_end":27995,"line_start":12,"line_end":12,"column_start":11,"column_end":19},"name":"UsbClass","qualname":"::class::UsbClass","value":"UsbClass<B: UsbBus>","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"decl_id":null,"docs":" A trait for implementing USB classes.","sig":null,"attributes":[{"value":"/ A trait for implementing USB classes.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":27824,"byte_end":27865,"line_start":8,"line_end":8,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":27866,"byte_end":27869,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ All methods are optional callbacks that will be called by","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":27870,"byte_end":27931,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"/ [UsbBus::poll](crate::bus::UsbBus::poll)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":27932,"byte_end":27976,"line_start":11,"line_end":11,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":28525,"byte_end":28554,"line_start":22,"line_end":22,"column_start":8,"column_end":37},"name":"get_configuration_descriptors","qualname":"::class::UsbClass::get_configuration_descriptors","value":"pub fn get_configuration_descriptors(&Self, &mut DescriptorWriter)\n-> Result<()>","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Called when a GET_DESCRIPTOR request is received for a configuration descriptor. When\n called, the implementation should write its interface, endpoint and any extra class\n descriptors into `writer`. The configuration descriptor itself will be written by\n [UsbDevice](crate::device::UsbDevice) and shouldn't be written by classes.","sig":null,"attributes":[{"value":"/ Called when a GET_DESCRIPTOR request is received for a configuration descriptor. When","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":28013,"byte_end":28102,"line_start":13,"line_end":13,"column_start":5,"column_end":94}},{"value":"/ called, the implementation should write its interface, endpoint and any extra class","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":28107,"byte_end":28194,"line_start":14,"line_end":14,"column_start":5,"column_end":92}},{"value":"/ descriptors into `writer`. The configuration descriptor itself will be written by","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":28199,"byte_end":28284,"line_start":15,"line_end":15,"column_start":5,"column_end":90}},{"value":"/ [UsbDevice](crate::device::UsbDevice) and shouldn't be written by classes.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":28289,"byte_end":28367,"line_start":16,"line_end":16,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":28372,"byte_end":28375,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":28380,"byte_end":28392,"line_start":18,"line_end":18,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":28397,"byte_end":28400,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ Generally errors returned by `DescriptorWriter`. Implementors should propagate any errors","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":28405,"byte_end":28498,"line_start":20,"line_end":20,"column_start":5,"column_end":98}},{"value":"/ using `?`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":28503,"byte_end":28517,"line_start":21,"line_end":21,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":28987,"byte_end":29006,"line_start":31,"line_end":31,"column_start":8,"column_end":27},"name":"get_bos_descriptors","qualname":"::class::UsbClass::get_bos_descriptors","value":"pub fn get_bos_descriptors(&Self, &mut BosWriter) -> Result<()>","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Called when a GET_DESCRIPTOR request is received for a BOS descriptor.\n When called, the implementation should write its blobs such as capability\n descriptors into `writer`. The BOS descriptor itself will be written by\n [UsbDevice](crate::device::UsbDevice) and shouldn't be written by classes.\n","sig":null,"attributes":[{"value":"/ Called when a GET_DESCRIPTOR request is received for a BOS descriptor.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":28660,"byte_end":28734,"line_start":27,"line_end":27,"column_start":5,"column_end":79}},{"value":"/ When called, the implementation should write its blobs such as capability","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":28739,"byte_end":28816,"line_start":28,"line_end":28,"column_start":5,"column_end":82}},{"value":"/ descriptors into `writer`. The BOS descriptor itself will be written by","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":28821,"byte_end":28896,"line_start":29,"line_end":29,"column_start":5,"column_end":80}},{"value":"/ [UsbDevice](crate::device::UsbDevice) and shouldn't be written by classes.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":28901,"byte_end":28979,"line_start":30,"line_end":30,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29546,"byte_end":29556,"line_start":46,"line_end":46,"column_start":8,"column_end":18},"name":"get_string","qualname":"::class::UsbClass::get_string","value":"pub fn get_string(&Self, StringIndex, u16) -> Option<&str>","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Gets a class-specific string descriptor.","sig":null,"attributes":[{"value":"/ Gets a class-specific string descriptor.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29105,"byte_end":29149,"line_start":36,"line_end":36,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29154,"byte_end":29157,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ Note: All string descriptor requests are passed to all classes in turn, so implementations","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29162,"byte_end":29256,"line_start":38,"line_end":38,"column_start":5,"column_end":99}},{"value":"/ should return [`None`] if an unknown index is requested.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29261,"byte_end":29321,"line_start":39,"line_end":39,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29326,"byte_end":29329,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29334,"byte_end":29349,"line_start":41,"line_end":41,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29354,"byte_end":29357,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ * `index` - A string index allocated earlier with","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29362,"byte_end":29415,"line_start":43,"line_end":43,"column_start":5,"column_end":58}},{"value":"/   [`UsbAllocator`](crate::bus::UsbBusAllocator).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29420,"byte_end":29472,"line_start":44,"line_end":44,"column_start":5,"column_end":57}},{"value":"/ * `lang_id` - The language ID for the string to retrieve.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29477,"byte_end":29538,"line_start":45,"line_end":45,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29752,"byte_end":29757,"line_start":52,"line_end":52,"column_start":8,"column_end":13},"name":"reset","qualname":"::class::UsbClass::reset","value":"pub fn reset(&mut Self)","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Called after a USB reset after the bus reset sequence is complete.\n","sig":null,"attributes":[{"value":"/ Called after a USB reset after the bus reset sequence is complete.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29674,"byte_end":29744,"line_start":51,"line_end":51,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29832,"byte_end":29836,"line_start":55,"line_end":55,"column_start":8,"column_end":12},"name":"poll","qualname":"::class::UsbClass::poll","value":"pub fn poll(&mut Self)","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Called whenever the `UsbDevice` is polled.\n","sig":null,"attributes":[{"value":"/ Called whenever the `UsbDevice` is polled.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29778,"byte_end":29824,"line_start":54,"line_end":54,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30557,"byte_end":30568,"line_start":72,"line_end":72,"column_start":8,"column_end":19},"name":"control_out","qualname":"::class::UsbClass::control_out","value":"pub fn control_out(&mut Self, ControlOut<, , , B>)","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Called when a control request is received with direction HostToDevice.","sig":null,"attributes":[{"value":"/ Called when a control request is received with direction HostToDevice.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29857,"byte_end":29931,"line_start":57,"line_end":57,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29936,"byte_end":29939,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ All requests are passed to classes in turn, which can choose to accept, ignore or report an","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":29944,"byte_end":30039,"line_start":59,"line_end":59,"column_start":5,"column_end":100}},{"value":"/ error. Classes can even choose to override standard requests, but doing that is rarely","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30044,"byte_end":30134,"line_start":60,"line_end":60,"column_start":5,"column_end":95}},{"value":"/ necessary.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30139,"byte_end":30153,"line_start":61,"line_end":61,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30158,"byte_end":30161,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ See [`ControlOut`] for how to respond to the transfer.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30166,"byte_end":30224,"line_start":63,"line_end":63,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30229,"byte_end":30232,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ When implementing your own class, you should ignore any requests that are not meant for your","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30237,"byte_end":30333,"line_start":65,"line_end":65,"column_start":5,"column_end":101}},{"value":"/ class so that any other classes in the composite device can process them.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30338,"byte_end":30415,"line_start":66,"line_end":66,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30420,"byte_end":30423,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30428,"byte_end":30443,"line_start":68,"line_end":68,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30448,"byte_end":30451,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ * `req` - The request from the SETUP packet.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30456,"byte_end":30504,"line_start":70,"line_end":70,"column_start":5,"column_end":53}},{"value":"/ * `xfer` - A handle to the transfer.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30509,"byte_end":30549,"line_start":71,"line_end":71,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31365,"byte_end":31375,"line_start":91,"line_end":91,"column_start":8,"column_end":18},"name":"control_in","qualname":"::class::UsbClass::control_in","value":"pub fn control_in(&mut Self, ControlIn<, , , B>)","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Called when a control request is received with direction DeviceToHost.","sig":null,"attributes":[{"value":"/ Called when a control request is received with direction DeviceToHost.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30636,"byte_end":30710,"line_start":76,"line_end":76,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30715,"byte_end":30718,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ All requests are passed to classes in turn, which can choose to accept, ignore or report an","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30723,"byte_end":30818,"line_start":78,"line_end":78,"column_start":5,"column_end":100}},{"value":"/ error. Classes can even choose to override standard requests, but doing that is rarely","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30823,"byte_end":30913,"line_start":79,"line_end":79,"column_start":5,"column_end":95}},{"value":"/ necessary.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30918,"byte_end":30932,"line_start":80,"line_end":80,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30937,"byte_end":30940,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ See [`ControlIn`] for how to respond to the transfer.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":30945,"byte_end":31002,"line_start":82,"line_end":82,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31007,"byte_end":31010,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ When implementing your own class, you should ignore any requests that are not meant for your","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31015,"byte_end":31111,"line_start":84,"line_end":84,"column_start":5,"column_end":101}},{"value":"/ class so that any other classes in the composite device can process them.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31116,"byte_end":31193,"line_start":85,"line_end":85,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31198,"byte_end":31201,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31206,"byte_end":31221,"line_start":87,"line_end":87,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31226,"byte_end":31229,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ * `req` - The request from the SETUP packet.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31234,"byte_end":31282,"line_start":89,"line_end":89,"column_start":5,"column_end":53}},{"value":"/ * `data` - Data to send in the DATA stage of the control transfer.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31287,"byte_end":31357,"line_start":90,"line_end":90,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31774,"byte_end":31788,"line_start":100,"line_end":100,"column_start":8,"column_end":22},"name":"endpoint_setup","qualname":"::class::UsbClass::endpoint_setup","value":"pub fn endpoint_setup(&mut Self, EndpointAddress)","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Called when endpoint with address `addr` has received a SETUP packet. Implementing this\n shouldn't be necessary in most cases, but is provided for completeness' sake.","sig":null,"attributes":[{"value":"/ Called when endpoint with address `addr` has received a SETUP packet. Implementing this","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31442,"byte_end":31533,"line_start":95,"line_end":95,"column_start":5,"column_end":96}},{"value":"/ shouldn't be necessary in most cases, but is provided for completeness' sake.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31538,"byte_end":31619,"line_start":96,"line_end":96,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31624,"byte_end":31627,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ Note: This method may be called for an endpoint address you didn't allocate, and in that","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31632,"byte_end":31724,"line_start":98,"line_end":98,"column_start":5,"column_end":97}},{"value":"/ case you should ignore the event.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31729,"byte_end":31766,"line_start":99,"line_end":99,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":32089,"byte_end":32101,"line_start":108,"line_end":108,"column_start":8,"column_end":20},"name":"endpoint_out","qualname":"::class::UsbClass::endpoint_out","value":"pub fn endpoint_out(&mut Self, EndpointAddress)","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Called when endpoint with address `addr` has received data (OUT packet).","sig":null,"attributes":[{"value":"/ Called when endpoint with address `addr` has received data (OUT packet).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31858,"byte_end":31934,"line_start":104,"line_end":104,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31939,"byte_end":31942,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Note: This method may be called for an endpoint address you didn't allocate, and in that","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":31947,"byte_end":32039,"line_start":106,"line_end":106,"column_start":5,"column_end":97}},{"value":"/ case you should ignore the event.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":32044,"byte_end":32081,"line_start":107,"line_end":107,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":32415,"byte_end":32435,"line_start":116,"line_end":116,"column_start":8,"column_end":28},"name":"endpoint_in_complete","qualname":"::class::UsbClass::endpoint_in_complete","value":"pub fn endpoint_in_complete(&mut Self, EndpointAddress)","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Called when endpoint with address `addr` has completed transmitting data (IN packet).","sig":null,"attributes":[{"value":"/ Called when endpoint with address `addr` has completed transmitting data (IN packet).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":32171,"byte_end":32260,"line_start":112,"line_end":112,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":32265,"byte_end":32268,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ Note: This method may be called for an endpoint address you didn't allocate, and in that","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":32273,"byte_end":32365,"line_start":114,"line_end":114,"column_start":5,"column_end":97}},{"value":"/ case you should ignore the event.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":32370,"byte_end":32407,"line_start":115,"line_end":115,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":128},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":32780,"byte_end":32789,"line_start":124,"line_end":124,"column_start":12,"column_end":21},"name":"ControlIn","qualname":"::class::ControlIn","value":"ControlIn {  }","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134}],"decl_id":null,"docs":" Handle for a control IN transfer. When implementing a class, use the methods of this object to\n response to the transfer with either data or an error (STALL condition). To ignore the request\n and pass it on to the next class, simply don't call any method.\n","sig":null,"attributes":[{"value":"/ Handle for a control IN transfer. When implementing a class, use the methods of this object to","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":32503,"byte_end":32601,"line_start":121,"line_end":121,"column_start":1,"column_end":99}},{"value":"/ response to the transfer with either data or an error (STALL condition). To ignore the request","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":32602,"byte_end":32700,"line_start":122,"line_end":122,"column_start":1,"column_end":99}},{"value":"/ and pass it on to the next class, simply don't call any method.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":32701,"byte_end":32768,"line_start":123,"line_end":123,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":33134,"byte_end":33141,"line_start":135,"line_end":135,"column_start":12,"column_end":19},"name":"request","qualname":"<ControlIn>::request","value":"pub fn request(&Self) -> &control::Request","parent":null,"children":[],"decl_id":null,"docs":" Gets the request from the SETUP packet.\n","sig":null,"attributes":[{"value":"/ Gets the request from the SETUP packet.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":33079,"byte_end":33122,"line_start":134,"line_end":134,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":33262,"byte_end":33273,"line_start":140,"line_end":140,"column_start":12,"column_end":23},"name":"accept_with","qualname":"<ControlIn>::accept_with","value":"pub fn accept_with(Self, &[u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Accepts the transfer with the supplied buffer.\n","sig":null,"attributes":[{"value":"/ Accepts the transfer with the supplied buffer.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":33200,"byte_end":33250,"line_start":139,"line_end":139,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":33719,"byte_end":33737,"line_start":154,"line_end":154,"column_start":12,"column_end":30},"name":"accept_with_static","qualname":"<ControlIn>::accept_with_static","value":"pub fn accept_with_static(Self, &'static [u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Accepts the transfer with the supplied static buffer.\n This method is useful when you have a large static descriptor to send as one packet.\n","sig":null,"attributes":[{"value":"/ Accepts the transfer with the supplied static buffer.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":33557,"byte_end":33614,"line_start":152,"line_end":152,"column_start":5,"column_end":62}},{"value":"/ This method is useful when you have a large static descriptor to send as one packet.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":33619,"byte_end":33707,"line_start":153,"line_end":153,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":33988,"byte_end":33994,"line_start":160,"line_end":160,"column_start":12,"column_end":18},"name":"accept","qualname":"<ControlIn>::accept","value":"pub fn accept<impl FnOnce(&mut [u8]) -> Result<usize>: FnOnce(&mut [u8]) ->\n              Result<usize>>(Self, impl FnOnce(&mut [u8]) -> Result<usize>)\n-> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Accepts the transfer with a callback that can write to the internal buffer of the control\n pipe. Can be used to avoid an extra copy.\n","sig":null,"attributes":[{"value":"/ Accepts the transfer with a callback that can write to the internal buffer of the control","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":33833,"byte_end":33926,"line_start":158,"line_end":158,"column_start":5,"column_end":98}},{"value":"/ pipe. Can be used to avoid an extra copy.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":33931,"byte_end":33976,"line_start":159,"line_end":159,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":34161,"byte_end":34167,"line_start":165,"line_end":165,"column_start":12,"column_end":18},"name":"reject","qualname":"<ControlIn>::reject","value":"pub fn reject(Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Rejects the transfer by stalling the pipe.\n","sig":null,"attributes":[{"value":"/ Rejects the transfer by stalling the pipe.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":34103,"byte_end":34149,"line_start":164,"line_end":164,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":148},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":34499,"byte_end":34509,"line_start":173,"line_end":173,"column_start":12,"column_end":22},"name":"ControlOut","qualname":"::class::ControlOut","value":"ControlOut {  }","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154}],"decl_id":null,"docs":" Handle for a control OUT transfer. When implementing a class, use the methods of this object to\n response to the transfer with an ACT or an error (STALL condition). To ignore the request and\n pass it on to the next class, simply don't call any method.\n","sig":null,"attributes":[{"value":"/ Handle for a control OUT transfer. When implementing a class, use the methods of this object to","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":34226,"byte_end":34325,"line_start":170,"line_end":170,"column_start":1,"column_end":100}},{"value":"/ response to the transfer with an ACT or an error (STALL condition). To ignore the request and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":34326,"byte_end":34423,"line_start":171,"line_end":171,"column_start":1,"column_end":98}},{"value":"/ pass it on to the next class, simply don't call any method.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":34424,"byte_end":34487,"line_start":172,"line_end":172,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":34855,"byte_end":34862,"line_start":184,"line_end":184,"column_start":12,"column_end":19},"name":"request","qualname":"<ControlOut>::request","value":"pub fn request(&Self) -> &control::Request","parent":null,"children":[],"decl_id":null,"docs":" Gets the request from the SETUP packet.\n","sig":null,"attributes":[{"value":"/ Gets the request from the SETUP packet.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":34800,"byte_end":34843,"line_start":183,"line_end":183,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":35027,"byte_end":35031,"line_start":189,"line_end":189,"column_start":12,"column_end":16},"name":"data","qualname":"<ControlOut>::data","value":"pub fn data(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Gets the data from the data stage of the request. May be empty if there was no data stage.\n","sig":null,"attributes":[{"value":"/ Gets the data from the data stage of the request. May be empty if there was no data stage.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":34921,"byte_end":35015,"line_start":188,"line_end":188,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":35169,"byte_end":35175,"line_start":194,"line_end":194,"column_start":12,"column_end":18},"name":"accept","qualname":"<ControlOut>::accept","value":"pub fn accept(Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Accepts the transfer by succesfully responding to the status stage.\n","sig":null,"attributes":[{"value":"/ Accepts the transfer by succesfully responding to the status stage.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":35086,"byte_end":35157,"line_start":193,"line_end":193,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":35298,"byte_end":35304,"line_start":199,"line_end":199,"column_start":12,"column_end":18},"name":"reject","qualname":"<ControlOut>::reject","value":"pub fn reject(Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Rejects the transfer by stalling the pipe.\n","sig":null,"attributes":[{"value":"/ Rejects the transfer by stalling the pipe.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":35240,"byte_end":35286,"line_start":198,"line_end":198,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":165},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"endpoint","qualname":"::endpoint","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":871},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":731},{"krate":0,"index":754},{"krate":0,"index":752},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":744},{"krate":0,"index":191},{"krate":0,"index":201},{"krate":0,"index":213},{"krate":0,"index":216},{"krate":0,"index":755},{"krate":0,"index":768},{"krate":0,"index":766},{"krate":0,"index":765},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":219},{"krate":0,"index":221},{"krate":0,"index":223}],"decl_id":null,"docs":" USB endpoints.\n","sig":null,"attributes":[{"value":"/ USB endpoints.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4785,"byte_end":4803,"line_start":120,"line_end":120,"column_start":1,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":175},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":35563,"byte_end":35580,"line_start":8,"line_end":8,"column_start":11,"column_end":28},"name":"EndpointDirection","qualname":"::endpoint::EndpointDirection","value":"EndpointDirection","parent":null,"children":[{"krate":0,"index":176}],"decl_id":null,"docs":" Trait for endpoint type markers.\n","sig":null,"attributes":[{"value":"/ Trait for endpoint type markers.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":35516,"byte_end":35552,"line_start":7,"line_end":7,"column_start":1,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":176},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":35637,"byte_end":35646,"line_start":10,"line_end":10,"column_start":11,"column_end":20},"name":"DIRECTION","qualname":"::endpoint::EndpointDirection::DIRECTION","value":"UsbDirection","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Direction value of the marker type.\n","sig":null,"attributes":[{"value":"/ Direction value of the marker type.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":35587,"byte_end":35626,"line_start":9,"line_end":9,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":177},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":35711,"byte_end":35714,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"Out","qualname":"::endpoint::Out","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type for OUT endpoints.\n","sig":null,"attributes":[{"value":"/ Marker type for OUT endpoints.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":35665,"byte_end":35699,"line_start":13,"line_end":13,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":181},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":35853,"byte_end":35855,"line_start":21,"line_end":21,"column_start":12,"column_end":14},"name":"In","qualname":"::endpoint::In","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type for IN endpoints.\n","sig":null,"attributes":[{"value":"/ Marker type for IN endpoints.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":35808,"byte_end":35841,"line_start":20,"line_end":20,"column_start":1,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":185},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":35993,"byte_end":36004,"line_start":28,"line_end":28,"column_start":10,"column_end":21},"name":"EndpointOut","qualname":"::endpoint::EndpointOut","value":"Endpoint","parent":null,"children":[],"decl_id":null,"docs":" A host-to-device (OUT) endpoint.\n","sig":null,"attributes":[{"value":"/ A host-to-device (OUT) endpoint.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":35947,"byte_end":35983,"line_start":27,"line_end":27,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":188},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36082,"byte_end":36092,"line_start":31,"line_end":31,"column_start":10,"column_end":20},"name":"EndpointIn","qualname":"::endpoint::EndpointIn","value":"Endpoint","parent":null,"children":[],"decl_id":null,"docs":" A device-to-host (IN) endpoint.\n","sig":null,"attributes":[{"value":"/ A device-to-host (IN) endpoint.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36037,"byte_end":36072,"line_start":30,"line_end":30,"column_start":1,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":732},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36482,"byte_end":36489,"line_start":40,"line_end":40,"column_start":5,"column_end":12},"name":"Control","qualname":"::endpoint::EndpointType::Control","value":"EndpointType::Control","parent":{"krate":0,"index":731},"children":[],"decl_id":null,"docs":" Control endpoint. Used for device management. Only the host can initiate requests. Usually\n used only endpoint 0.\n","sig":null,"attributes":[{"value":"/ Control endpoint. Used for device management. Only the host can initiate requests. Usually","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36353,"byte_end":36447,"line_start":38,"line_end":38,"column_start":5,"column_end":99}},{"value":"/ used only endpoint 0.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36452,"byte_end":36477,"line_start":39,"line_end":39,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":735},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36593,"byte_end":36604,"line_start":42,"line_end":42,"column_start":5,"column_end":16},"name":"Isochronous","qualname":"::endpoint::EndpointType::Isochronous","value":"EndpointType::Isochronous","parent":{"krate":0,"index":731},"children":[],"decl_id":null,"docs":" Isochronous endpoint. Used for time-critical unreliable data. Not implemented yet.\n","sig":null,"attributes":[{"value":"/ Isochronous endpoint. Used for time-critical unreliable data. Not implemented yet.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36502,"byte_end":36588,"line_start":41,"line_end":41,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":738},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36693,"byte_end":36697,"line_start":44,"line_end":44,"column_start":5,"column_end":9},"name":"Bulk","qualname":"::endpoint::EndpointType::Bulk","value":"EndpointType::Bulk","parent":{"krate":0,"index":731},"children":[],"decl_id":null,"docs":" Bulk endpoint. Used for large amounts of best-effort reliable data.\n","sig":null,"attributes":[{"value":"/ Bulk endpoint. Used for large amounts of best-effort reliable data.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36617,"byte_end":36688,"line_start":43,"line_end":43,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":741},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36793,"byte_end":36802,"line_start":46,"line_end":46,"column_start":5,"column_end":14},"name":"Interrupt","qualname":"::endpoint::EndpointType::Interrupt","value":"EndpointType::Interrupt","parent":{"krate":0,"index":731},"children":[],"decl_id":null,"docs":" Interrupt endpoint. Used for small amounts of time-critical reliable data.\n","sig":null,"attributes":[{"value":"/ Interrupt endpoint. Used for small amounts of time-critical reliable data.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36710,"byte_end":36788,"line_start":45,"line_end":45,"column_start":5,"column_end":83}}]},{"kind":"Enum","id":{"krate":0,"index":731},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36334,"byte_end":36346,"line_start":37,"line_end":37,"column_start":10,"column_end":22},"name":"EndpointType","qualname":"::endpoint::EndpointType","value":"pub enum EndpointType {\n\n    /// Control endpoint. Used for device management. Only the host can initiate requests. Usually\n    /// used only endpoint 0.\n    Control = ,\n\n    /// Isochronous endpoint. Used for time-critical unreliable data. Not implemented yet.\n    Isochronous = ,\n\n    /// Bulk endpoint. Used for large amounts of best-effort reliable data.\n    Bulk = ,\n\n    /// Interrupt endpoint. Used for small amounts of time-critical reliable data.\n    Interrupt = ,\n}","parent":null,"children":[{"krate":0,"index":732},{"krate":0,"index":735},{"krate":0,"index":738},{"krate":0,"index":741}],"decl_id":null,"docs":" USB endpoint transfer type. The values of this enum can be directly cast into `u8` to get the\n transfer bmAttributes transfer type bits.\n","sig":null,"attributes":[{"value":"/ USB endpoint transfer type. The values of this enum can be directly cast into `u8` to get the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36124,"byte_end":36221,"line_start":33,"line_end":33,"column_start":1,"column_end":98}},{"value":"/ transfer bmAttributes transfer type bits.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36222,"byte_end":36267,"line_start":34,"line_end":34,"column_start":1,"column_end":46}},{"value":"repr(u8)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36268,"byte_end":36279,"line_start":35,"line_end":35,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":191},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36960,"byte_end":36968,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"Endpoint","qualname":"::endpoint::Endpoint","value":"Endpoint {  }","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200}],"decl_id":null,"docs":" Handle for a USB endpoint. The endpoint direction is constrained by the `D` type argument, which\n must be either `In` or `Out`.\n","sig":null,"attributes":[{"value":"/ Handle for a USB endpoint. The endpoint direction is constrained by the `D` type argument, which","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36814,"byte_end":36914,"line_start":49,"line_end":49,"column_start":1,"column_end":101}},{"value":"/ must be either `In` or `Out`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":36915,"byte_end":36948,"line_start":50,"line_end":50,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":37920,"byte_end":37927,"line_start":88,"line_end":88,"column_start":12,"column_end":19},"name":"address","qualname":"<Endpoint>::address","value":"pub fn address(&Self) -> EndpointAddress","parent":null,"children":[],"decl_id":null,"docs":" Gets the endpoint address including direction bit.\n","sig":null,"attributes":[{"value":"/ Gets the endpoint address including direction bit.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":37854,"byte_end":37908,"line_start":87,"line_end":87,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38024,"byte_end":38031,"line_start":91,"line_end":91,"column_start":12,"column_end":19},"name":"ep_type","qualname":"<Endpoint>::ep_type","value":"pub fn ep_type(&Self) -> EndpointType","parent":null,"children":[],"decl_id":null,"docs":" Gets the endpoint transfer type.\n","sig":null,"attributes":[{"value":"/ Gets the endpoint transfer type.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":37976,"byte_end":38012,"line_start":90,"line_end":90,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38139,"byte_end":38154,"line_start":94,"line_end":94,"column_start":12,"column_end":27},"name":"max_packet_size","qualname":"<Endpoint>::max_packet_size","value":"pub fn max_packet_size(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Gets the maximum packet size for the endpoint.\n","sig":null,"attributes":[{"value":"/ Gets the maximum packet size for the endpoint.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38077,"byte_end":38127,"line_start":93,"line_end":93,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38262,"byte_end":38270,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"name":"interval","qualname":"<Endpoint>::interval","value":"pub fn interval(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Gets the poll interval for interrupt endpoints.\n","sig":null,"attributes":[{"value":"/ Gets the poll interval for interrupt endpoints.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38199,"byte_end":38250,"line_start":96,"line_end":96,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38365,"byte_end":38370,"line_start":100,"line_end":100,"column_start":12,"column_end":17},"name":"stall","qualname":"<Endpoint>::stall","value":"pub fn stall(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Sets the STALL condition for the endpoint.\n","sig":null,"attributes":[{"value":"/ Sets the STALL condition for the endpoint.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38307,"byte_end":38353,"line_start":99,"line_end":99,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38502,"byte_end":38509,"line_start":105,"line_end":105,"column_start":12,"column_end":19},"name":"unstall","qualname":"<Endpoint>::unstall","value":"pub fn unstall(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the STALL condition of the endpoint.\n","sig":null,"attributes":[{"value":"/ Clears the STALL condition of the endpoint.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38443,"byte_end":38490,"line_start":104,"line_end":104,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39486,"byte_end":39491,"line_start":126,"line_end":126,"column_start":12,"column_end":17},"name":"write","qualname":"<Endpoint>::write","value":"pub fn write(&Self, &[u8]) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Writes a single packet of data to the specified endpoint and returns number of bytes\n actually written. The buffer must not be longer than the `max_packet_size` specified when\n allocating the endpoint.","sig":null,"attributes":[{"value":"/ Writes a single packet of data to the specified endpoint and returns number of bytes","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38623,"byte_end":38711,"line_start":111,"line_end":111,"column_start":5,"column_end":93}},{"value":"/ actually written. The buffer must not be longer than the `max_packet_size` specified when","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38716,"byte_end":38809,"line_start":112,"line_end":112,"column_start":5,"column_end":98}},{"value":"/ allocating the endpoint.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38814,"byte_end":38842,"line_start":113,"line_end":113,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38847,"byte_end":38850,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38855,"byte_end":38867,"line_start":115,"line_end":115,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38872,"byte_end":38875,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ Note: USB bus implementation errors are directly passed through, so be prepared to handle","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38880,"byte_end":38973,"line_start":117,"line_end":117,"column_start":5,"column_end":98}},{"value":"/ other errors as well.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38978,"byte_end":39003,"line_start":118,"line_end":118,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39008,"byte_end":39011,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ * [`WouldBlock`](crate::UsbError::WouldBlock) - The transmission buffer of the USB","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39016,"byte_end":39102,"line_start":120,"line_end":120,"column_start":5,"column_end":91}},{"value":"/   peripheral is full and the packet cannot be sent now. A peripheral may or may not support","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39107,"byte_end":39202,"line_start":121,"line_end":121,"column_start":5,"column_end":100}},{"value":"/   concurrent transmission of packets.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39207,"byte_end":39248,"line_start":122,"line_end":122,"column_start":5,"column_end":46}},{"value":"/ * [`BufferOverflow`](crate::UsbError::BufferOverflow) - The data is longer than the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39253,"byte_end":39340,"line_start":123,"line_end":123,"column_start":5,"column_end":92}},{"value":"/   `max_packet_size` specified when allocating the endpoint. This is generally an error in","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39345,"byte_end":39438,"line_start":124,"line_end":124,"column_start":5,"column_end":98}},{"value":"/   the class implementation.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39443,"byte_end":39474,"line_start":125,"line_end":125,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":40492,"byte_end":40496,"line_start":146,"line_end":146,"column_start":12,"column_end":16},"name":"read","qualname":"<Endpoint>::read","value":"pub fn read(&Self, &mut [u8]) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Reads a single packet of data from the specified endpoint and returns the actual length of\n the packet. The buffer should be large enough to fit at least as many bytes as the\n `max_packet_size` specified when allocating the endpoint.","sig":null,"attributes":[{"value":"/ Reads a single packet of data from the specified endpoint and returns the actual length of","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39628,"byte_end":39722,"line_start":132,"line_end":132,"column_start":5,"column_end":99}},{"value":"/ the packet. The buffer should be large enough to fit at least as many bytes as the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39727,"byte_end":39813,"line_start":133,"line_end":133,"column_start":5,"column_end":91}},{"value":"/ `max_packet_size` specified when allocating the endpoint.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39818,"byte_end":39879,"line_start":134,"line_end":134,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39884,"byte_end":39887,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39892,"byte_end":39904,"line_start":136,"line_end":136,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39909,"byte_end":39912,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ Note: USB bus implementation errors are directly passed through, so be prepared to handle","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39917,"byte_end":40010,"line_start":138,"line_end":138,"column_start":5,"column_end":98}},{"value":"/ other errors as well.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":40015,"byte_end":40040,"line_start":139,"line_end":139,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":40045,"byte_end":40048,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ * [`WouldBlock`](crate::UsbError::WouldBlock) - There is no packet to be read. Note that","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":40053,"byte_end":40145,"line_start":141,"line_end":141,"column_start":5,"column_end":97}},{"value":"/   this is different from a received zero-length packet, which is valid and significant in","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":40150,"byte_end":40243,"line_start":142,"line_end":142,"column_start":5,"column_end":98}},{"value":"/   USB. A zero-length packet will return `Ok(0)`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":40248,"byte_end":40300,"line_start":143,"line_end":143,"column_start":5,"column_end":57}},{"value":"/ * [`BufferOverflow`](crate::UsbError::BufferOverflow) - The received packet is too long to","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":40305,"byte_end":40399,"line_start":144,"line_end":144,"column_start":5,"column_end":99}},{"value":"/   fit in `data`. This is generally an error in the class implementation.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":40404,"byte_end":40480,"line_start":145,"line_end":145,"column_start":5,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":755},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":40681,"byte_end":40696,"line_start":153,"line_end":153,"column_start":12,"column_end":27},"name":"EndpointAddress","qualname":"::endpoint::EndpointAddress","value":"","parent":null,"children":[],"decl_id":null,"docs":" Type-safe endpoint address.\n","sig":null,"attributes":[{"value":"/ Type-safe endpoint address.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":40593,"byte_end":40624,"line_start":151,"line_end":151,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":41125,"byte_end":41135,"line_start":174,"line_end":174,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<EndpointAddress>::from_parts","value":"pub fn from_parts(usize, UsbDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new EndpointAddress with the given index and direction.\n","sig":null,"attributes":[{"value":"/ Constructs a new EndpointAddress with the given index and direction.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":41027,"byte_end":41099,"line_start":172,"line_end":172,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":41104,"byte_end":41113,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":41308,"byte_end":41317,"line_start":180,"line_end":180,"column_start":12,"column_end":21},"name":"direction","qualname":"<EndpointAddress>::direction","value":"pub fn direction(&Self) -> UsbDirection","parent":null,"children":[],"decl_id":null,"docs":" Gets the direction part of the address.\n","sig":null,"attributes":[{"value":"/ Gets the direction part of the address.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":41239,"byte_end":41282,"line_start":178,"line_end":178,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":41287,"byte_end":41296,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":41565,"byte_end":41570,"line_start":190,"line_end":190,"column_start":12,"column_end":17},"name":"is_in","qualname":"<EndpointAddress>::is_in","value":"pub fn is_in(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the direction is IN, otherwise false.\n","sig":null,"attributes":[{"value":"/ Returns true if the direction is IN, otherwise false.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":41482,"byte_end":41539,"line_start":188,"line_end":188,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":41544,"byte_end":41553,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":41720,"byte_end":41726,"line_start":196,"line_end":196,"column_start":12,"column_end":18},"name":"is_out","qualname":"<EndpointAddress>::is_out","value":"pub fn is_out(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the direction is OUT, otherwise false.\n","sig":null,"attributes":[{"value":"/ Returns true if the direction is OUT, otherwise false.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":41636,"byte_end":41694,"line_start":194,"line_end":194,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":41699,"byte_end":41708,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":41866,"byte_end":41871,"line_start":202,"line_end":202,"column_start":12,"column_end":17},"name":"index","qualname":"<EndpointAddress>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the index part of the endpoint address.\n","sig":null,"attributes":[{"value":"/ Gets the index part of the endpoint address.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":41792,"byte_end":41840,"line_start":200,"line_end":200,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":41845,"byte_end":41854,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":230},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"device","qualname":"::device","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":921},{"krate":0,"index":770},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":783},{"krate":0,"index":781},{"krate":0,"index":779},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":267},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":289}],"decl_id":null,"docs":" USB composite device.","sig":null,"attributes":[{"value":"/ USB composite device.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4823,"byte_end":4848,"line_start":123,"line_end":123,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4849,"byte_end":4852,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ The [UsbDevice](device::UsbDevice) type in this module is the core of this crate. It combines","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4853,"byte_end":4950,"line_start":125,"line_end":125,"column_start":1,"column_end":98}},{"value":"/ multiple USB class implementations and the USB bus driver and dispatches bus state changes and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4951,"byte_end":5049,"line_start":126,"line_end":126,"column_start":1,"column_end":99}},{"value":"/ control messages between them.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5050,"byte_end":5084,"line_start":127,"line_end":127,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5085,"byte_end":5088,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ To implement USB support for your own project, the required code is usually as follows:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5089,"byte_end":5180,"line_start":129,"line_end":129,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5181,"byte_end":5184,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ ``` ignore","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5185,"byte_end":5199,"line_start":131,"line_end":131,"column_start":1,"column_end":15}},{"value":"/ use usb_device::prelude::*;","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5200,"byte_end":5231,"line_start":132,"line_end":132,"column_start":1,"column_end":32}},{"value":"/ use usb_serial; // example class crate (not included)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5232,"byte_end":5289,"line_start":133,"line_end":133,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5290,"byte_end":5293,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ // Create the device-specific USB peripheral driver. The exact name and arguments are device","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5294,"byte_end":5390,"line_start":135,"line_end":135,"column_start":1,"column_end":97}},{"value":"/ // specific, so check the documentation for your device driver crate.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5391,"byte_end":5464,"line_start":136,"line_end":136,"column_start":1,"column_end":74}},{"value":"/ let usb_bus = device_specific_usb::UsbBus::new(...);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5465,"byte_end":5521,"line_start":137,"line_end":137,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5522,"byte_end":5525,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ // Create one or more USB class implementation. The name and arguments depend on the class,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5526,"byte_end":5621,"line_start":139,"line_end":139,"column_start":1,"column_end":96}},{"value":"/ // however most classes require the UsbAllocator as the first argument in order to allocate","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5622,"byte_end":5717,"line_start":140,"line_end":140,"column_start":1,"column_end":96}},{"value":"/ // the required shared resources.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5718,"byte_end":5755,"line_start":141,"line_end":141,"column_start":1,"column_end":38}},{"value":"/ let mut serial = usb_serial::SerialPort::new(&usb_bus.allocator());","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5756,"byte_end":5827,"line_start":142,"line_end":142,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5828,"byte_end":5831,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ // Build the final [UsbDevice](device::UsbDevice) instance. The required arguments are a","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5832,"byte_end":5924,"line_start":144,"line_end":144,"column_start":1,"column_end":93}},{"value":"/ // reference to the peripheral driver created earlier, as well as a USB vendor ID/product ID","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":5925,"byte_end":6021,"line_start":145,"line_end":145,"column_start":1,"column_end":97}},{"value":"/ // pair. Additional builder arguments can specify parameters such as device class code or","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6022,"byte_end":6115,"line_start":146,"line_end":146,"column_start":1,"column_end":94}},{"value":"/ // product name. If using an existing class, remember to check the class crate documentation","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6116,"byte_end":6212,"line_start":147,"line_end":147,"column_start":1,"column_end":97}},{"value":"/ // for correct values.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6213,"byte_end":6239,"line_start":148,"line_end":148,"column_start":1,"column_end":27}},{"value":"/ let mut usb_dev = UsbDeviceBuilder::new(&usb_bus, UsbVidPid(0x5824, 0x27dd))","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6240,"byte_end":6320,"line_start":149,"line_end":149,"column_start":1,"column_end":81}},{"value":"/     .product(\"Serial port\")","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6321,"byte_end":6352,"line_start":150,"line_end":150,"column_start":1,"column_end":32}},{"value":"/     .device_class(usb_serial::DEVICE_CLASS)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6353,"byte_end":6400,"line_start":151,"line_end":151,"column_start":1,"column_end":48}},{"value":"/     .build();","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6401,"byte_end":6418,"line_start":152,"line_end":152,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6419,"byte_end":6422,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ // At this point the USB peripheral is enabled and a connected host will attempt to enumerate","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6423,"byte_end":6520,"line_start":154,"line_end":154,"column_start":1,"column_end":98}},{"value":"/ // it.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6521,"byte_end":6531,"line_start":155,"line_end":155,"column_start":1,"column_end":11}},{"value":"/ loop {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6532,"byte_end":6542,"line_start":156,"line_end":156,"column_start":1,"column_end":11}},{"value":"/     // Must be called more often than once every 10ms to handle events and stay USB compilant,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6543,"byte_end":6641,"line_start":157,"line_end":157,"column_start":1,"column_end":99}},{"value":"/     // or from a device-specific interrupt handler.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6642,"byte_end":6697,"line_start":158,"line_end":158,"column_start":1,"column_end":56}},{"value":"/     if (usb_dev.poll(&mut [&mut serial])) {","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6698,"byte_end":6745,"line_start":159,"line_end":159,"column_start":1,"column_end":48}},{"value":"/         // Call class-specific methods here","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6746,"byte_end":6793,"line_start":160,"line_end":160,"column_start":1,"column_end":48}},{"value":"/         serial.read(...);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6794,"byte_end":6823,"line_start":161,"line_end":161,"column_start":1,"column_end":30}},{"value":"/     }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6824,"byte_end":6833,"line_start":162,"line_end":162,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6834,"byte_end":6839,"line_start":163,"line_end":163,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6840,"byte_end":6847,"line_start":164,"line_end":164,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":771},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":42610,"byte_end":42617,"line_start":17,"line_end":17,"column_start":5,"column_end":12},"name":"Default","qualname":"::device::UsbDeviceState::Default","value":"UsbDeviceState::Default","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":" The USB device has just been created or reset.\n","sig":null,"attributes":[{"value":"/ The USB device has just been created or reset.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":42555,"byte_end":42605,"line_start":16,"line_end":16,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":773},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":42686,"byte_end":42695,"line_start":20,"line_end":20,"column_start":5,"column_end":14},"name":"Addressed","qualname":"::device::UsbDeviceState::Addressed","value":"UsbDeviceState::Addressed","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":" The USB device has received an address from the host.\n","sig":null,"attributes":[{"value":"/ The USB device has received an address from the host.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":42624,"byte_end":42681,"line_start":19,"line_end":19,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":775},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":42770,"byte_end":42780,"line_start":23,"line_end":23,"column_start":5,"column_end":15},"name":"Configured","qualname":"::device::UsbDeviceState::Configured","value":"UsbDeviceState::Configured","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":" The USB device has been configured and is fully functional.\n","sig":null,"attributes":[{"value":"/ The USB device has been configured and is fully functional.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":42702,"byte_end":42765,"line_start":22,"line_end":22,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":777},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":42884,"byte_end":42891,"line_start":26,"line_end":26,"column_start":5,"column_end":12},"name":"Suspend","qualname":"::device::UsbDeviceState::Suspend","value":"UsbDeviceState::Suspend","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":" The USB device has been suspended by the host or it has been unplugged from the USB bus.\n","sig":null,"attributes":[{"value":"/ The USB device has been suspended by the host or it has been unplugged from the USB bus.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":42787,"byte_end":42879,"line_start":25,"line_end":25,"column_start":5,"column_end":97}}]},{"kind":"Enum","id":{"krate":0,"index":770},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":42534,"byte_end":42548,"line_start":15,"line_end":15,"column_start":10,"column_end":24},"name":"UsbDeviceState","qualname":"::device::UsbDeviceState","value":"pub enum UsbDeviceState {\n\n    /// The USB device has just been created or reset.\n    Default,\n\n    /// The USB device has received an address from the host.\n    Addressed,\n\n    /// The USB device has been configured and is fully functional.\n    Configured,\n\n    /// The USB device has been suspended by the host or it has been unplugged from the USB bus.\n    Suspend,\n}","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":773},{"krate":0,"index":775},{"krate":0,"index":777}],"decl_id":null,"docs":" The global state of the USB device.","sig":null,"attributes":[{"value":"/ The global state of the USB device.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":42351,"byte_end":42390,"line_start":10,"line_end":10,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":42391,"byte_end":42394,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ In general class traffic is only possible in the `Configured` state.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":42395,"byte_end":42467,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"repr(u8)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":42468,"byte_end":42479,"line_start":13,"line_end":13,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":257},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":43085,"byte_end":43094,"line_start":33,"line_end":33,"column_start":12,"column_end":21},"name":"UsbDevice","qualname":"::device::UsbDevice","value":"UsbDevice {  }","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266}],"decl_id":null,"docs":" A USB device consisting of one or more device classes.\n","sig":null,"attributes":[{"value":"/ A USB device consisting of one or more device classes.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":43015,"byte_end":43073,"line_start":32,"line_end":32,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":283},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":43838,"byte_end":43856,"line_start":61,"line_end":61,"column_start":11,"column_end":29},"name":"CONFIGURATION_NONE","qualname":"::device::CONFIGURATION_NONE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" The bConfiguration value for the not configured state.\n","sig":null,"attributes":[{"value":"/ The bConfiguration value for the not configured state.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":43769,"byte_end":43827,"line_start":60,"line_end":60,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":284},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":43961,"byte_end":43980,"line_start":64,"line_end":64,"column_start":11,"column_end":30},"name":"CONFIGURATION_VALUE","qualname":"::device::CONFIGURATION_VALUE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" The bConfiguration value for the single configuration supported by this device.\n","sig":null,"attributes":[{"value":"/ The bConfiguration value for the single configuration supported by this device.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":43867,"byte_end":43950,"line_start":63,"line_end":63,"column_start":1,"column_end":84}}]},{"kind":"Const","id":{"krate":0,"index":285},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":44065,"byte_end":44090,"line_start":67,"line_end":67,"column_start":11,"column_end":36},"name":"DEFAULT_ALTERNATE_SETTING","qualname":"::device::DEFAULT_ALTERNATE_SETTING","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" The default value for bAlternateSetting for all interfaces.\n","sig":null,"attributes":[{"value":"/ The default value for bAlternateSetting for all interfaces.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":43991,"byte_end":44054,"line_start":66,"line_end":66,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":45331,"byte_end":45334,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"bus","qualname":"<UsbDevice>::bus","value":"pub fn bus(&Self) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the [`UsbBus`] implementation used by this `UsbDevice`. You can use this\n to call platform-specific methods on the `UsbBus`.","sig":null,"attributes":[{"value":"/ Gets a reference to the [`UsbBus`] implementation used by this `UsbDevice`. You can use this","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":44981,"byte_end":45077,"line_start":94,"line_end":94,"column_start":5,"column_end":101}},{"value":"/ to call platform-specific methods on the `UsbBus`.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":45082,"byte_end":45136,"line_start":95,"line_end":95,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":45141,"byte_end":45144,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ While it is also possible to call the standard `UsbBus` trait methods through this","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":45149,"byte_end":45235,"line_start":97,"line_end":97,"column_start":5,"column_end":91}},{"value":"/ reference, this is not recommended as it can cause the device to misbehave.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":45240,"byte_end":45319,"line_start":98,"line_end":98,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":45516,"byte_end":45521,"line_start":106,"line_end":106,"column_start":12,"column_end":17},"name":"state","qualname":"<UsbDevice>::state","value":"pub fn state(&Self) -> UsbDeviceState","parent":null,"children":[],"decl_id":null,"docs":" Gets the current state of the device.","sig":null,"attributes":[{"value":"/ Gets the current state of the device.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":45378,"byte_end":45419,"line_start":103,"line_end":103,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":45424,"byte_end":45427,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ In general class traffic is only possible in the `Configured` state.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":45432,"byte_end":45504,"line_start":105,"line_end":105,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":45663,"byte_end":45684,"line_start":111,"line_end":111,"column_start":12,"column_end":33},"name":"remote_wakeup_enabled","qualname":"<UsbDevice>::remote_wakeup_enabled","value":"pub fn remote_wakeup_enabled(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether host remote wakeup has been enabled by the host.\n","sig":null,"attributes":[{"value":"/ Gets whether host remote wakeup has been enabled by the host.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":45586,"byte_end":45651,"line_start":110,"line_end":110,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":45814,"byte_end":45826,"line_start":116,"line_end":116,"column_start":12,"column_end":24},"name":"self_powered","qualname":"<UsbDevice>::self_powered","value":"pub fn self_powered(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether the device is currently self powered.\n","sig":null,"attributes":[{"value":"/ Gets whether the device is currently self powered.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":45748,"byte_end":45802,"line_start":115,"line_end":115,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":45947,"byte_end":45963,"line_start":121,"line_end":121,"column_start":12,"column_end":28},"name":"set_self_powered","qualname":"<UsbDevice>::set_self_powered","value":"pub fn set_self_powered(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets whether the device is currently self powered.\n","sig":null,"attributes":[{"value":"/ Sets whether the device is currently self powered.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":45881,"byte_end":45935,"line_start":120,"line_end":120,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":46358,"byte_end":46369,"line_start":130,"line_end":130,"column_start":12,"column_end":23},"name":"force_reset","qualname":"<UsbDevice>::force_reset","value":"pub fn force_reset(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Simulates a disconnect from the USB bus, causing the host to reset and re-enumerate the\n device.","sig":null,"attributes":[{"value":"/ Simulates a disconnect from the USB bus, causing the host to reset and re-enumerate the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":46056,"byte_end":46147,"line_start":125,"line_end":125,"column_start":5,"column_end":96}},{"value":"/ device.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":46152,"byte_end":46163,"line_start":126,"line_end":126,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":46168,"byte_end":46171,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ Mostly useful for development. Calling this at the start of your program ensures that the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":46176,"byte_end":46269,"line_start":128,"line_end":128,"column_start":5,"column_end":98}},{"value":"/ host re-enumerates your device after a new program has been flashed.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":46274,"byte_end":46346,"line_start":129,"line_end":129,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":47530,"byte_end":47534,"line_start":151,"line_end":151,"column_start":12,"column_end":16},"name":"poll","qualname":"<UsbDevice>::poll","value":"pub fn poll(&mut Self, &mut ClassList<, B>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Polls the [`UsbBus`] for new events and dispatches them to the provided classes. Returns\n true if one of the classes may have data available for reading or be ready for writing,\n false otherwise. This should be called periodically as often as possible for the best data\n rate, or preferably from an interrupt handler. Must be called at least once every 10\n milliseconds while connected to the USB host to be USB compliant.","sig":null,"attributes":[{"value":"/ Polls the [`UsbBus`] for new events and dispatches them to the provided classes. Returns","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":46439,"byte_end":46531,"line_start":134,"line_end":134,"column_start":5,"column_end":97}},{"value":"/ true if one of the classes may have data available for reading or be ready for writing,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":46536,"byte_end":46627,"line_start":135,"line_end":135,"column_start":5,"column_end":96}},{"value":"/ false otherwise. This should be called periodically as often as possible for the best data","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":46632,"byte_end":46726,"line_start":136,"line_end":136,"column_start":5,"column_end":99}},{"value":"/ rate, or preferably from an interrupt handler. Must be called at least once every 10","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":46731,"byte_end":46819,"line_start":137,"line_end":137,"column_start":5,"column_end":93}},{"value":"/ milliseconds while connected to the USB host to be USB compliant.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":46824,"byte_end":46893,"line_start":138,"line_end":138,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":46898,"byte_end":46901,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Note: The list of classes passed in must be the same classes in the same order for every","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":46906,"byte_end":46998,"line_start":140,"line_end":140,"column_start":5,"column_end":97}},{"value":"/ call while the device is configured, or the device may enumerate incorrectly or otherwise","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":47003,"byte_end":47096,"line_start":141,"line_end":141,"column_start":5,"column_end":98}},{"value":"/ misbehave. The easiest way to do this is to call the `poll` method in only one place in your","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":47101,"byte_end":47197,"line_start":142,"line_end":142,"column_start":5,"column_end":101}},{"value":"/ code, as follows:","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":47202,"byte_end":47223,"line_start":143,"line_end":143,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":47228,"byte_end":47231,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ ``` ignore","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":47236,"byte_end":47250,"line_start":145,"line_end":145,"column_start":5,"column_end":19}},{"value":"/ usb_dev.poll(&mut [&mut class1, &mut class2]);","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":47255,"byte_end":47305,"line_start":146,"line_end":146,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":47310,"byte_end":47317,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":47322,"byte_end":47325,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ Strictly speaking the list of classes is allowed to change between polls if the device has","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":47330,"byte_end":47424,"line_start":149,"line_end":149,"column_start":5,"column_end":99}},{"value":"/ been reset, which is indicated by `state` being equal to [`UsbDeviceState::Default`].","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":47429,"byte_end":47518,"line_start":150,"line_end":150,"column_start":5,"column_end":94}}]},{"kind":"Mod","id":{"krate":0,"index":323},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"descriptor","qualname":"::descriptor","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":352},{"krate":0,"index":359},{"krate":0,"index":378},{"krate":0,"index":383}],"decl_id":null,"docs":" Creating USB descriptors\n","sig":null,"attributes":[{"value":"/ Creating USB descriptors","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6865,"byte_end":6893,"line_start":167,"line_end":167,"column_start":1,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":335},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60287,"byte_end":60302,"line_start":8,"line_end":8,"column_start":9,"column_end":24},"name":"descriptor_type","qualname":"::descriptor::descriptor_type","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343}],"decl_id":null,"docs":" Standard descriptor types\n","sig":null,"attributes":[{"value":"/ Standard descriptor types","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60226,"byte_end":60255,"line_start":6,"line_end":6,"column_start":1,"column_end":30}},{"value":"allow(missing_docs)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60256,"byte_end":60278,"line_start":7,"line_end":7,"column_start":1,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":336},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60319,"byte_end":60325,"line_start":9,"line_end":9,"column_start":15,"column_end":21},"name":"DEVICE","qualname":"::descriptor::descriptor_type::DEVICE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":337},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60349,"byte_end":60362,"line_start":10,"line_end":10,"column_start":15,"column_end":28},"name":"CONFIGURATION","qualname":"::descriptor::descriptor_type::CONFIGURATION","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":338},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60386,"byte_end":60392,"line_start":11,"line_end":11,"column_start":15,"column_end":21},"name":"STRING","qualname":"::descriptor::descriptor_type::STRING","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":339},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60416,"byte_end":60425,"line_start":12,"line_end":12,"column_start":15,"column_end":24},"name":"INTERFACE","qualname":"::descriptor::descriptor_type::INTERFACE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":340},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60449,"byte_end":60457,"line_start":13,"line_end":13,"column_start":15,"column_end":23},"name":"ENDPOINT","qualname":"::descriptor::descriptor_type::ENDPOINT","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":341},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60481,"byte_end":60484,"line_start":14,"line_end":14,"column_start":15,"column_end":18},"name":"IAD","qualname":"::descriptor::descriptor_type::IAD","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":342},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60509,"byte_end":60512,"line_start":15,"line_end":15,"column_start":15,"column_end":18},"name":"BOS","qualname":"::descriptor::descriptor_type::BOS","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":343},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60537,"byte_end":60547,"line_start":16,"line_end":16,"column_start":15,"column_end":25},"name":"CAPABILITY","qualname":"::descriptor::descriptor_type::CAPABILITY","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":344},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60605,"byte_end":60612,"line_start":20,"line_end":20,"column_start":9,"column_end":16},"name":"lang_id","qualname":"::descriptor::lang_id","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","parent":null,"children":[{"krate":0,"index":345}],"decl_id":null,"docs":" String descriptor language IDs.\n","sig":null,"attributes":[{"value":"/ String descriptor language IDs.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60561,"byte_end":60596,"line_start":19,"line_end":19,"column_start":1,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":345},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60730,"byte_end":60740,"line_start":24,"line_end":24,"column_start":15,"column_end":25},"name":"ENGLISH_US","qualname":"::descriptor::lang_id::ENGLISH_US","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" English (US)","sig":null,"attributes":[{"value":"/ English (US)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60619,"byte_end":60635,"line_start":21,"line_end":21,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60640,"byte_end":60643,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ Recommended for use as the first language ID for compatibility.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60648,"byte_end":60715,"line_start":23,"line_end":23,"column_start":5,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":346},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60831,"byte_end":60846,"line_start":29,"line_end":29,"column_start":9,"column_end":24},"name":"capability_type","qualname":"::descriptor::capability_type","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351}],"decl_id":null,"docs":" Standard capability descriptor types\n","sig":null,"attributes":[{"value":"/ Standard capability descriptor types","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60759,"byte_end":60799,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"allow(missing_docs)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60800,"byte_end":60822,"line_start":28,"line_end":28,"column_start":1,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":347},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60863,"byte_end":60875,"line_start":30,"line_end":30,"column_start":15,"column_end":27},"name":"WIRELESS_USB","qualname":"::descriptor::capability_type::WIRELESS_USB","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":348},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60899,"byte_end":60916,"line_start":31,"line_end":31,"column_start":15,"column_end":32},"name":"USB_2_0_EXTENSION","qualname":"::descriptor::capability_type::USB_2_0_EXTENSION","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":349},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60940,"byte_end":60953,"line_start":32,"line_end":32,"column_start":15,"column_end":28},"name":"SS_USB_DEVICE","qualname":"::descriptor::capability_type::SS_USB_DEVICE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":350},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":60977,"byte_end":60989,"line_start":33,"line_end":33,"column_start":15,"column_end":27},"name":"CONTAINER_ID","qualname":"::descriptor::capability_type::CONTAINER_ID","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":351},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":61013,"byte_end":61021,"line_start":34,"line_end":34,"column_start":15,"column_end":23},"name":"PLATFORM","qualname":"::descriptor::capability_type::PLATFORM","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":352},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":61079,"byte_end":61095,"line_start":38,"line_end":38,"column_start":12,"column_end":28},"name":"DescriptorWriter","qualname":"::descriptor::DescriptorWriter","value":"DescriptorWriter {  }","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358}],"decl_id":null,"docs":" A writer for USB descriptors.\n","sig":null,"attributes":[{"value":"/ A writer for USB descriptors.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":61034,"byte_end":61067,"line_start":37,"line_end":37,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":61637,"byte_end":61645,"line_start":58,"line_end":58,"column_start":12,"column_end":20},"name":"position","qualname":"<DescriptorWriter>::position","value":"pub fn position(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the current position in the buffer, i.e. the number of bytes written so far.\n","sig":null,"attributes":[{"value":"/ Gets the current position in the buffer, i.e. the number of bytes written so far.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":61540,"byte_end":61625,"line_start":57,"line_end":57,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":61769,"byte_end":61774,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"write","qualname":"<DescriptorWriter>::write","value":"pub fn write(&mut Self, u8, &[u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes an arbitrary (usually class-specific) descriptor.\n","sig":null,"attributes":[{"value":"/ Writes an arbitrary (usually class-specific) descriptor.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":61697,"byte_end":61757,"line_start":62,"line_end":62,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":65274,"byte_end":65277,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"iad","qualname":"<DescriptorWriter>::iad","value":"pub fn iad(&mut Self, InterfaceNumber, u8, u8, u8, u8) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes a interface association descriptor. Call from `UsbClass::get_configuration_descriptors`\n before writing the USB class or function's interface descriptors if your class has more than\n one interface and wants to play nicely with composite devices on Windows. If the USB device\n hosting the class was not configured as composite with IADs enabled, calling this function\n does nothing, so it is safe to call from libraries.","sig":null,"attributes":[{"value":"/ Writes a interface association descriptor. Call from `UsbClass::get_configuration_descriptors`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":64230,"byte_end":64328,"line_start":129,"line_end":129,"column_start":5,"column_end":103}},{"value":"/ before writing the USB class or function's interface descriptors if your class has more than","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":64333,"byte_end":64429,"line_start":130,"line_end":130,"column_start":5,"column_end":101}},{"value":"/ one interface and wants to play nicely with composite devices on Windows. If the USB device","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":64434,"byte_end":64529,"line_start":131,"line_end":131,"column_start":5,"column_end":100}},{"value":"/ hosting the class was not configured as composite with IADs enabled, calling this function","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":64534,"byte_end":64628,"line_start":132,"line_end":132,"column_start":5,"column_end":99}},{"value":"/ does nothing, so it is safe to call from libraries.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":64633,"byte_end":64688,"line_start":133,"line_end":133,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":64693,"byte_end":64696,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":64701,"byte_end":64716,"line_start":135,"line_end":135,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":64721,"byte_end":64724,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ * `first_interface` - Number of the function's first interface, previously allocated with","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":64729,"byte_end":64822,"line_start":137,"line_end":137,"column_start":5,"column_end":98}},{"value":"/   [`UsbBusAllocator::interface`](crate::bus::UsbBusAllocator::interface).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":64827,"byte_end":64904,"line_start":138,"line_end":138,"column_start":5,"column_end":82}},{"value":"/ * `interface_count` - Number of interfaces in the function.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":64909,"byte_end":64972,"line_start":139,"line_end":139,"column_start":5,"column_end":68}},{"value":"/ * `function_class` - Class code assigned by USB.org. Use `0xff` for vendor-specific devices","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":64977,"byte_end":65072,"line_start":140,"line_end":140,"column_start":5,"column_end":100}},{"value":"/   that do not conform to any class.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":65077,"byte_end":65116,"line_start":141,"line_end":141,"column_start":5,"column_end":44}},{"value":"/ * `function_sub_class` - Sub-class code. Depends on class.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":65121,"byte_end":65183,"line_start":142,"line_end":142,"column_start":5,"column_end":67}},{"value":"/ * `function_protocol` - Protocol code. Depends on class and sub-class.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":65188,"byte_end":65262,"line_start":143,"line_end":143,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":66373,"byte_end":66382,"line_start":175,"line_end":175,"column_start":12,"column_end":21},"name":"interface","qualname":"<DescriptorWriter>::interface","value":"pub fn interface(&mut Self, InterfaceNumber, u8, u8, u8) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes a interface descriptor.","sig":null,"attributes":[{"value":"/ Writes a interface descriptor.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":65852,"byte_end":65886,"line_start":165,"line_end":165,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":65891,"byte_end":65894,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":65899,"byte_end":65914,"line_start":167,"line_end":167,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":65919,"byte_end":65922,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ * `number` - Interface number previously allocated with","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":65927,"byte_end":65986,"line_start":169,"line_end":169,"column_start":5,"column_end":64}},{"value":"/   [`UsbBusAllocator::interface`](crate::bus::UsbBusAllocator::interface).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":65991,"byte_end":66068,"line_start":170,"line_end":170,"column_start":5,"column_end":82}},{"value":"/ * `interface_class` - Class code assigned by USB.org. Use `0xff` for vendor-specific devices","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":66073,"byte_end":66169,"line_start":171,"line_end":171,"column_start":5,"column_end":101}},{"value":"/   that do not conform to any class.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":66174,"byte_end":66213,"line_start":172,"line_end":172,"column_start":5,"column_end":44}},{"value":"/ * `interface_sub_class` - Sub-class code. Depends on class.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":66218,"byte_end":66281,"line_start":173,"line_end":173,"column_start":5,"column_end":68}},{"value":"/ * `interface_protocol` - Protocol code. Depends on class and sub-class.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":66286,"byte_end":66361,"line_start":174,"line_end":174,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":67489,"byte_end":67502,"line_start":202,"line_end":202,"column_start":12,"column_end":25},"name":"interface_alt","qualname":"<DescriptorWriter>::interface_alt","value":"pub fn interface_alt(&mut Self, InterfaceNumber, u8, u8, u8, u8,\n                     Option<StringIndex>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes a interface descriptor with a specific alternate setting and\n interface string identifier.","sig":null,"attributes":[{"value":"/ Writes a interface descriptor with a specific alternate setting and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":66745,"byte_end":66816,"line_start":188,"line_end":188,"column_start":5,"column_end":76}},{"value":"/ interface string identifier.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":66821,"byte_end":66853,"line_start":189,"line_end":189,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":66858,"byte_end":66861,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":66866,"byte_end":66881,"line_start":191,"line_end":191,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":66886,"byte_end":66889,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ * `number` - Interface number previously allocated with","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":66894,"byte_end":66953,"line_start":193,"line_end":193,"column_start":5,"column_end":64}},{"value":"/   [`UsbBusAllocator::interface`](crate::bus::UsbBusAllocator::interface).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":66958,"byte_end":67035,"line_start":194,"line_end":194,"column_start":5,"column_end":82}},{"value":"/ * `alternate_setting` - Number of the alternate setting","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":67040,"byte_end":67099,"line_start":195,"line_end":195,"column_start":5,"column_end":64}},{"value":"/ * `interface_class` - Class code assigned by USB.org. Use `0xff` for vendor-specific devices","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":67104,"byte_end":67200,"line_start":196,"line_end":196,"column_start":5,"column_end":101}},{"value":"/   that do not conform to any class.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":67205,"byte_end":67244,"line_start":197,"line_end":197,"column_start":5,"column_end":44}},{"value":"/ * `interface_sub_class` - Sub-class code. Depends on class.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":67249,"byte_end":67312,"line_start":198,"line_end":198,"column_start":5,"column_end":68}},{"value":"/ * `interface_protocol` - Protocol code. Depends on class and sub-class.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":67317,"byte_end":67392,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/ * `interface_string` - Index of string descriptor describing this interface","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":67397,"byte_end":67476,"line_start":200,"line_end":200,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":68848,"byte_end":68856,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"endpoint","qualname":"<DescriptorWriter>::endpoint","value":"pub fn endpoint<'e, B: UsbBus, D: EndpointDirection>(&mut Self, &Endpoint)\n-> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes an endpoint descriptor.","sig":null,"attributes":[{"value":"/ Writes an endpoint descriptor.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":68648,"byte_end":68682,"line_start":238,"line_end":238,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":68687,"byte_end":68690,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":68695,"byte_end":68710,"line_start":240,"line_end":240,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":68715,"byte_end":68718,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ * `endpoint` - Endpoint previously allocated with","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":68723,"byte_end":68776,"line_start":242,"line_end":242,"column_start":5,"column_end":58}},{"value":"/   [`UsbBusAllocator`](crate::bus::UsbBusAllocator).","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":68781,"byte_end":68836,"line_start":243,"line_end":243,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":378},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":70305,"byte_end":70314,"line_start":297,"line_end":297,"column_start":12,"column_end":21},"name":"BosWriter","qualname":"::descriptor::BosWriter","value":"BosWriter {  }","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":382}],"decl_id":null,"docs":" A writer for Binary Object Store descriptor.\n","sig":null,"attributes":[{"value":"/ A writer for Binary Object Store descriptor.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":70245,"byte_end":70293,"line_start":296,"line_end":296,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":71182,"byte_end":71192,"line_start":330,"line_end":330,"column_start":12,"column_end":22},"name":"capability","qualname":"<BosWriter>::capability","value":"pub fn capability(&mut Self, u8, &[u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes capability descriptor to a BOS","sig":null,"attributes":[{"value":"/ Writes capability descriptor to a BOS","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":70993,"byte_end":71034,"line_start":324,"line_end":324,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":71039,"byte_end":71042,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":71047,"byte_end":71062,"line_start":326,"line_end":326,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":71067,"byte_end":71070,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ * `capability_type` - Type of a capability","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":71075,"byte_end":71121,"line_start":328,"line_end":328,"column_start":5,"column_end":51}},{"value":"/ * `data` - Binary data of the descriptor","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":71126,"byte_end":71170,"line_start":329,"line_end":329,"column_start":5,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":391},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"test_class","qualname":"::test_class","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":955},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":405},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":443},{"krate":0,"index":457}],"decl_id":null,"docs":" Test USB class for testing USB driver implementations. Peripheral driver implementations should\n include an example called \"test_class\" that creates a device with this class to enable the\n driver to be tested with the test_class_host example in this crate.\n","sig":null,"attributes":[{"value":"/ Test USB class for testing USB driver implementations. Peripheral driver implementations should","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6915,"byte_end":7014,"line_start":170,"line_end":170,"column_start":1,"column_end":100}},{"value":"/ include an example called \"test_class\" that creates a device with this class to enable the","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7015,"byte_end":7109,"line_start":171,"line_end":171,"column_start":1,"column_end":95}},{"value":"/ driver to be tested with the test_class_host example in this crate.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7110,"byte_end":7181,"line_start":172,"line_end":172,"column_start":1,"column_end":72}},{"value":"allow(missing_docs)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":72152,"byte_end":72175,"line_start":1,"line_end":1,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":405},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":72939,"byte_end":72948,"line_start":27,"line_end":27,"column_start":12,"column_end":21},"name":"TestClass","qualname":"::test_class::TestClass","value":"TestClass {  }","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":417},{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427}],"decl_id":null,"docs":" Test USB class for testing USB driver implementations. Supports various endpoint types and\n requests for testing USB peripheral drivers on actual hardware.\n","sig":null,"attributes":[{"value":"/ Test USB class for testing USB driver implementations. Supports various endpoint types and","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":72765,"byte_end":72859,"line_start":25,"line_end":25,"column_start":1,"column_end":95}},{"value":"/ requests for testing USB peripheral drivers on actual hardware.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":72860,"byte_end":72927,"line_start":26,"line_end":26,"column_start":1,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":428},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":73522,"byte_end":73525,"line_start":47,"line_end":47,"column_start":11,"column_end":14},"name":"VID","qualname":"::test_class::VID","value":"u16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":429},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":73551,"byte_end":73554,"line_start":48,"line_end":48,"column_start":11,"column_end":14},"name":"PID","qualname":"::test_class::PID","value":"u16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":430},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":73580,"byte_end":73592,"line_start":49,"line_end":49,"column_start":11,"column_end":23},"name":"MANUFACTURER","qualname":"::test_class::MANUFACTURER","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":431},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":73645,"byte_end":73652,"line_start":50,"line_end":50,"column_start":11,"column_end":18},"name":"PRODUCT","qualname":"::test_class::PRODUCT","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":432},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":73717,"byte_end":73730,"line_start":51,"line_end":51,"column_start":11,"column_end":24},"name":"SERIAL_NUMBER","qualname":"::test_class::SERIAL_NUMBER","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":433},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":73777,"byte_end":73790,"line_start":52,"line_end":52,"column_start":11,"column_end":24},"name":"CUSTOM_STRING","qualname":"::test_class::CUSTOM_STRING","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":434},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":73844,"byte_end":73860,"line_start":53,"line_end":53,"column_start":11,"column_end":27},"name":"INTERFACE_STRING","qualname":"::test_class::INTERFACE_STRING","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":435},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":73911,"byte_end":73928,"line_start":55,"line_end":55,"column_start":11,"column_end":28},"name":"REQ_STORE_REQUEST","qualname":"::test_class::REQ_STORE_REQUEST","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":436},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":73948,"byte_end":73963,"line_start":56,"line_end":56,"column_start":11,"column_end":26},"name":"REQ_READ_BUFFER","qualname":"::test_class::REQ_READ_BUFFER","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":437},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":73983,"byte_end":73999,"line_start":57,"line_end":57,"column_start":11,"column_end":27},"name":"REQ_WRITE_BUFFER","qualname":"::test_class::REQ_WRITE_BUFFER","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":438},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":74019,"byte_end":74040,"line_start":58,"line_end":58,"column_start":11,"column_end":32},"name":"REQ_SET_BENCH_ENABLED","qualname":"::test_class::REQ_SET_BENCH_ENABLED","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":439},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":74060,"byte_end":74078,"line_start":59,"line_end":59,"column_start":11,"column_end":29},"name":"REQ_READ_LONG_DATA","qualname":"::test_class::REQ_READ_LONG_DATA","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":440},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":74098,"byte_end":74109,"line_start":60,"line_end":60,"column_start":11,"column_end":22},"name":"REQ_UNKNOWN","qualname":"::test_class::REQ_UNKNOWN","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":441},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":74131,"byte_end":74140,"line_start":62,"line_end":62,"column_start":11,"column_end":20},"name":"LONG_DATA","qualname":"::test_class::LONG_DATA","value":"&'static [u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":74253,"byte_end":74256,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<TestClass>::new","value":"pub fn new(&UsbBusAllocator<B>) -> TestClass<, B>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new TestClass.\n","sig":null,"attributes":[{"value":"/ Creates a new TestClass.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":74213,"byte_end":74241,"line_start":66,"line_end":66,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":75213,"byte_end":75224,"line_start":90,"line_end":90,"column_start":12,"column_end":23},"name":"make_device","qualname":"<TestClass>::make_device","value":"pub fn make_device<'a, 'b>(&'a Self, &'b UsbBusAllocator<B>) -> UsbDevice","parent":null,"children":[],"decl_id":null,"docs":" Convenience method to create a UsbDevice that is configured correctly for TestClass.\n","sig":null,"attributes":[{"value":"/ Convenience method to create a UsbDevice that is configured correctly for TestClass.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":75113,"byte_end":75201,"line_start":89,"line_end":89,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":75744,"byte_end":75763,"line_start":105,"line_end":105,"column_start":12,"column_end":31},"name":"make_device_builder","qualname":"<TestClass>::make_device_builder","value":"pub fn make_device_builder<'a, 'b>(&'a Self, &'b UsbBusAllocator<B>)\n-> UsbDeviceBuilder","parent":null,"children":[],"decl_id":null,"docs":" Convenience method to create a UsbDeviceBuilder that is configured correctly for TestClass.","sig":null,"attributes":[{"value":"/ Convenience method to create a UsbDeviceBuilder that is configured correctly for TestClass.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":75359,"byte_end":75454,"line_start":94,"line_end":94,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":75459,"byte_end":75462,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ The methods sets","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":75467,"byte_end":75487,"line_start":96,"line_end":96,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":75492,"byte_end":75495,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ - manufacturer","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":75500,"byte_end":75518,"line_start":98,"line_end":98,"column_start":5,"column_end":23}},{"value":"/ - product","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":75523,"byte_end":75536,"line_start":99,"line_end":99,"column_start":5,"column_end":18}},{"value":"/ - serial number","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":75541,"byte_end":75560,"line_start":100,"line_end":100,"column_start":5,"column_end":24}},{"value":"/ - max_packet_size_0","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":75565,"byte_end":75588,"line_start":101,"line_end":101,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":75593,"byte_end":75596,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ on the returned builder. If you change the manufacturer, product, or serial number fields,","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":75601,"byte_end":75695,"line_start":103,"line_end":103,"column_start":5,"column_end":99}},{"value":"/ the test host may misbehave.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":75700,"byte_end":75732,"line_start":104,"line_end":104,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":76144,"byte_end":76148,"line_start":114,"line_end":114,"column_start":12,"column_end":16},"name":"poll","qualname":"<TestClass>::poll","value":"pub fn poll(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Must be called after polling the UsbDevice.\n","sig":null,"attributes":[{"value":"/ Must be called after polling the UsbDevice.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":76085,"byte_end":76132,"line_start":113,"line_end":113,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":517},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":91311,"byte_end":91320,"line_start":5,"line_end":5,"column_start":12,"column_end":21},"name":"UsbVidPid","qualname":"::device_builder::UsbVidPid","value":"","parent":null,"children":[],"decl_id":null,"docs":" A USB vendor ID and product ID pair.\n","sig":null,"attributes":[{"value":"/ A USB vendor ID and product ID pair.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":91259,"byte_end":91299,"line_start":4,"line_end":4,"column_start":1,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":519},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":91321,"byte_end":91328,"line_start":5,"line_end":5,"column_start":22,"column_end":29},"name":"0","qualname":"::device_builder::UsbVidPid::0","value":"u16","parent":{"krate":0,"index":517},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":520},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":91330,"byte_end":91337,"line_start":5,"line_end":5,"column_start":31,"column_end":38},"name":"1","qualname":"::device_builder::UsbVidPid::1","value":"u16","parent":{"krate":0,"index":517},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":521},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":91390,"byte_end":91406,"line_start":8,"line_end":8,"column_start":12,"column_end":28},"name":"UsbDeviceBuilder","qualname":"::device_builder::UsbDeviceBuilder","value":"UsbDeviceBuilder {  }","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525}],"decl_id":null,"docs":" Used to build new [`UsbDevice`]s.\n","sig":null,"attributes":[{"value":"/ Used to build new [`UsbDevice`]s.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":91341,"byte_end":91378,"line_start":7,"line_end":7,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":91890,"byte_end":91893,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<UsbDeviceBuilder>::new","value":"pub fn new(&'a UsbBusAllocator<B>, UsbVidPid) -> UsbDeviceBuilder","parent":null,"children":[],"decl_id":null,"docs":" Creates a builder for constructing a new [`UsbDevice`].\n","sig":null,"attributes":[{"value":"/ Creates a builder for constructing a new [`UsbDevice`].","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":91819,"byte_end":91878,"line_start":26,"line_end":26,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":92728,"byte_end":92733,"line_start":53,"line_end":53,"column_start":12,"column_end":17},"name":"build","qualname":"<UsbDeviceBuilder>::build","value":"pub fn build(Self) -> UsbDevice","parent":null,"children":[],"decl_id":null,"docs":" Creates the [`UsbDevice`] instance with the configuration in this builder.\n","sig":null,"attributes":[{"value":"/ Creates the [`UsbDevice`] instance with the configuration in this builder.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":92638,"byte_end":92716,"line_start":52,"line_end":52,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":93074,"byte_end":93086,"line_start":62,"line_end":62,"column_start":9,"column_end":21},"name":"device_class","qualname":"<UsbDeviceBuilder>::device_class","value":"pub fn device_class(Self, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the device class code assigned by USB.org. Set to `0xff` for vendor-specific\n devices that do not conform to any class.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":93203,"byte_end":93219,"line_start":67,"line_end":67,"column_start":9,"column_end":25},"name":"device_sub_class","qualname":"<UsbDeviceBuilder>::device_sub_class","value":"pub fn device_sub_class(Self, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the device sub-class code. Depends on class.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":93349,"byte_end":93364,"line_start":72,"line_end":72,"column_start":9,"column_end":24},"name":"device_protocol","qualname":"<UsbDeviceBuilder>::device_protocol","value":"pub fn device_protocol(Self, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the device protocol code. Depends on class and sub-class.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":93481,"byte_end":93495,"line_start":77,"line_end":77,"column_start":9,"column_end":23},"name":"device_release","qualname":"<UsbDeviceBuilder>::device_release","value":"pub fn device_release(Self, u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the device release version in BCD.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":93827,"byte_end":93839,"line_start":87,"line_end":87,"column_start":9,"column_end":21},"name":"self_powered","qualname":"<UsbDeviceBuilder>::self_powered","value":"pub fn self_powered(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether the device may have an external power source.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":93984,"byte_end":94006,"line_start":92,"line_end":92,"column_start":9,"column_end":31},"name":"supports_remote_wakeup","qualname":"<UsbDeviceBuilder>::supports_remote_wakeup","value":"pub fn supports_remote_wakeup(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether the device supports remotely waking up the host is requested.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":94124,"byte_end":94143,"line_start":96,"line_end":96,"column_start":12,"column_end":31},"name":"composite_with_iads","qualname":"<UsbDeviceBuilder>::composite_with_iads","value":"pub fn composite_with_iads(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Configures the device as a composite device with interface association descriptors.\n","sig":null,"attributes":[{"value":"/ Configures the device as a composite device with interface association descriptors.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":94025,"byte_end":94112,"line_start":95,"line_end":95,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":94517,"byte_end":94529,"line_start":109,"line_end":109,"column_start":12,"column_end":24},"name":"manufacturer","qualname":"<UsbDeviceBuilder>::manufacturer","value":"pub fn manufacturer(Self, &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the manufacturer name string descriptor.","sig":null,"attributes":[{"value":"/ Sets the manufacturer name string descriptor.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":94424,"byte_end":94473,"line_start":106,"line_end":106,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":94478,"byte_end":94481,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ Default: (none)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":94486,"byte_end":94505,"line_start":108,"line_end":108,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":94740,"byte_end":94747,"line_start":117,"line_end":117,"column_start":12,"column_end":19},"name":"product","qualname":"<UsbDeviceBuilder>::product","value":"pub fn product(Self, &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the product name string descriptor.","sig":null,"attributes":[{"value":"/ Sets the product name string descriptor.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":94652,"byte_end":94696,"line_start":114,"line_end":114,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":94701,"byte_end":94704,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Default: (none)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":94709,"byte_end":94728,"line_start":116,"line_end":116,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":94944,"byte_end":94957,"line_start":125,"line_end":125,"column_start":12,"column_end":25},"name":"serial_number","qualname":"<UsbDeviceBuilder>::serial_number","value":"pub fn serial_number(Self, &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the serial number string descriptor.","sig":null,"attributes":[{"value":"/ Sets the serial number string descriptor.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":94855,"byte_end":94900,"line_start":122,"line_end":122,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":94905,"byte_end":94908,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Default: (none)","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":94913,"byte_end":94932,"line_start":124,"line_end":124,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":95476,"byte_end":95493,"line_start":137,"line_end":137,"column_start":12,"column_end":29},"name":"max_packet_size_0","qualname":"<UsbDeviceBuilder>::max_packet_size_0","value":"pub fn max_packet_size_0(Self, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the maximum packet size in bytes for the control endpoint 0.","sig":null,"attributes":[{"value":"/ Sets the maximum packet size in bytes for the control endpoint 0.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":95083,"byte_end":95152,"line_start":130,"line_end":130,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":95157,"byte_end":95160,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ Valid values are 8, 16, 32 and 64. There's generally no need to change this from the default","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":95165,"byte_end":95261,"line_start":132,"line_end":132,"column_start":5,"column_end":101}},{"value":"/ value of 8 bytes unless a class uses control transfers for sending large amounts of data, in","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":95266,"byte_end":95362,"line_start":133,"line_end":133,"column_start":5,"column_end":101}},{"value":"/ which case using a larger packet size may be more efficient.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":95367,"byte_end":95431,"line_start":134,"line_end":134,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":95436,"byte_end":95439,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ Default: 8 bytes","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":95444,"byte_end":95464,"line_start":136,"line_end":136,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":96078,"byte_end":96087,"line_start":155,"line_end":155,"column_start":12,"column_end":21},"name":"max_power","qualname":"<UsbDeviceBuilder>::max_power","value":"pub fn max_power(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the maximum current drawn from the USB bus by the device in milliamps.","sig":null,"attributes":[{"value":"/ Sets the maximum current drawn from the USB bus by the device in milliamps.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":95754,"byte_end":95833,"line_start":147,"line_end":147,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":95838,"byte_end":95841,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ The default is 100 mA. If your device always uses an external power source and never draws","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":95846,"byte_end":95940,"line_start":149,"line_end":149,"column_start":5,"column_end":99}},{"value":"/ power from the USB bus, this can be set to 0.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":95945,"byte_end":95994,"line_start":150,"line_end":150,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":95999,"byte_end":96002,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ See also: `self_powered`","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":96007,"byte_end":96035,"line_start":152,"line_end":152,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":96040,"byte_end":96043,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Default: 100mA","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":96048,"byte_end":96066,"line_start":154,"line_end":154,"column_start":5,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":538},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7288,"byte_end":7295,"line_start":180,"line_end":180,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","parent":null,"children":[{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":991}],"decl_id":null,"docs":" Prelude for device implementors.\n","sig":null,"attributes":[{"value":"/ Prelude for device implementors.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7243,"byte_end":7279,"line_start":179,"line_end":179,"column_start":1,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":545},"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7459,"byte_end":7472,"line_start":186,"line_end":186,"column_start":9,"column_end":22},"name":"class_prelude","qualname":"::class_prelude","value":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564}],"decl_id":null,"docs":" Prelude for class implementors.\n","sig":null,"attributes":[{"value":"/ Prelude for class implementors.","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7415,"byte_end":7450,"line_start":185,"line_end":185,"column_start":1,"column_end":36}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3253,"byte_end":3265,"line_start":86,"line_end":86,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11449,"byte_end":11456,"line_start":57,"line_end":57,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":21145,"byte_end":21160,"line_start":154,"line_end":154,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":26101,"byte_end":26112,"line_start":293,"line_end":293,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":32915,"byte_end":32924,"line_start":129,"line_end":129,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":34635,"byte_end":34645,"line_start":178,"line_end":178,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":35744,"byte_end":35747,"line_start":16,"line_end":16,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":35885,"byte_end":35887,"line_start":23,"line_end":23,"column_start":28,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":37209,"byte_end":37217,"line_start":60,"line_end":60,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38597,"byte_end":38605,"line_start":110,"line_end":110,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39601,"byte_end":39609,"line_start":131,"line_end":131,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":40721,"byte_end":40736,"line_start":155,"line_end":155,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":40957,"byte_end":40972,"line_start":169,"line_end":169,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":44169,"byte_end":44178,"line_start":71,"line_end":71,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":304},{"krate":0,"index":311},{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":61255,"byte_end":61271,"line_start":46,"line_end":46,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":70425,"byte_end":70434,"line_start":302,"line_end":302,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":389},{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":74190,"byte_end":74199,"line_start":65,"line_end":65,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":449},{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":78701,"byte_end":78710,"line_start":191,"line_end":191,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control_pipe.rs","byte_start":83996,"byte_end":84007,"line_start":40,"line_end":40,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":91789,"byte_end":91805,"line_start":25,"line_end":25,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":8012,"byte_end":8020,"line_start":203,"line_end":203,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":9124,"byte_end":9134,"line_start":239,"line_end":239,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":9338,"byte_end":9348,"line_start":247,"line_end":247,"column_start":37,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3508,"byte_end":3515,"line_start":96,"line_end":96,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":8}},{"kind":"Mod","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3567,"byte_end":3570,"line_start":99,"line_end":99,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":30}},{"kind":"Mod","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4777,"byte_end":4782,"line_start":118,"line_end":118,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":103}},{"kind":"Mod","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":4812,"byte_end":4820,"line_start":121,"line_end":121,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":165}},{"kind":"Mod","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6856,"byte_end":6862,"line_start":165,"line_end":165,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":230}},{"kind":"Mod","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":6902,"byte_end":6912,"line_start":168,"line_end":168,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":323}},{"kind":"Mod","span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":7190,"byte_end":7200,"line_start":173,"line_end":173,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":391}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":3253,"byte_end":3265,"line_start":86,"line_end":86,"column_start":19,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":616},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control.rs","byte_start":11449,"byte_end":11456,"line_start":57,"line_end":57,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":685},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14517,"byte_end":14521,"line_start":17,"line_end":17,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":2093},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":14524,"byte_end":14529,"line_start":17,"line_end":17,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":21145,"byte_end":21160,"line_start":154,"line_end":154,"column_start":17,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":63},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/bus.rs","byte_start":26101,"byte_end":26112,"line_start":293,"line_end":293,"column_start":6,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":718},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":32915,"byte_end":32924,"line_start":129,"line_end":129,"column_start":29,"column_end":38},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/class.rs","byte_start":34635,"byte_end":34645,"line_start":178,"line_end":178,"column_start":29,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":148},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":35744,"byte_end":35747,"line_start":16,"line_end":16,"column_start":28,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":177},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":35885,"byte_end":35887,"line_start":23,"line_end":23,"column_start":28,"column_end":30},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":181},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":37209,"byte_end":37217,"line_start":60,"line_end":60,"column_start":39,"column_end":47},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":38597,"byte_end":38605,"line_start":110,"line_end":110,"column_start":17,"column_end":25},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":39601,"byte_end":39609,"line_start":131,"line_end":131,"column_start":17,"column_end":25},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":40721,"byte_end":40736,"line_start":155,"line_end":155,"column_start":19,"column_end":34},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/endpoint.rs","byte_start":40957,"byte_end":40972,"line_start":169,"line_end":169,"column_start":6,"column_end":21},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":755},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device.rs","byte_start":44169,"byte_end":44178,"line_start":71,"line_end":71,"column_start":17,"column_end":26},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":257},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":61255,"byte_end":61271,"line_start":46,"line_end":46,"column_start":6,"column_end":22},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/descriptor.rs","byte_start":70425,"byte_end":70434,"line_start":302,"line_end":302,"column_start":18,"column_end":27},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":378},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":74190,"byte_end":74199,"line_start":65,"line_end":65,"column_start":17,"column_end":26},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/test_class.rs","byte_start":78701,"byte_end":78710,"line_start":191,"line_end":191,"column_start":33,"column_end":42},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":405},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/control_pipe.rs","byte_start":83996,"byte_end":84007,"line_start":40,"line_end":40,"column_start":17,"column_end":28},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":478},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/device_builder.rs","byte_start":91789,"byte_end":91805,"line_start":25,"line_end":25,"column_start":21,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":521},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":8012,"byte_end":8020,"line_start":203,"line_end":203,"column_start":21,"column_end":29},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":571},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":9124,"byte_end":9134,"line_start":239,"line_end":239,"column_start":21,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":586},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mcrae/.cargo/registry/src/github.com-1ecc6299db9ec823/usb-device-0.2.8/src/lib.rs","byte_start":9338,"byte_end":9348,"line_start":247,"line_end":247,"column_start":37,"column_end":47},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":586},"to":{"krate":0,"index":116}}]}